import { useSelectableCollection, useSelectableItem } from "@react-aria/selection";
import { useLocale } from "@react-aria/i18n";
import { useFocusWithin } from "@react-aria/interactions";
import { useMemo, useState } from "react";
import { filterDOMProps, mergeProps } from "@react-aria/utils";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
class $b728468b7dd6dbdaf6ef1812f01dd2a7$export$ActionGroupKeyboardDelegate {
  constructor(collection, direction, orientation, disabledKeys) {
    if (disabledKeys === void 0) {
      disabledKeys = new Set();
    }

    this.collection = void 0;
    this.flipDirection = void 0;
    this.disabledKeys = void 0;
    this.collection = collection;
    this.flipDirection = direction === 'rtl' && orientation === 'horizontal';
    this.disabledKeys = disabledKeys;
  }

  getKeyLeftOf(key) {
    if (this.flipDirection) {
      return this.getNextKey(key);
    } else {
      return this.getPreviousKey(key);
    }
  }

  getKeyRightOf(key) {
    if (this.flipDirection) {
      return this.getPreviousKey(key);
    } else {
      return this.getNextKey(key);
    }
  }

  getKeyAbove(key) {
    return this.getPreviousKey(key);
  }

  getKeyBelow(key) {
    return this.getNextKey(key);
  }

  getFirstKey() {
    let key = this.collection.getFirstKey();

    if (this.disabledKeys.has(key)) {
      key = this.getNextKey(key);
    }

    return key;
  }

  getLastKey() {
    let key = this.collection.getLastKey();

    if (this.disabledKeys.has(key)) {
      key = this.getPreviousKey(key);
    }

    return key;
  }

  getNextKey(key) {
    do {
      key = this.collection.getKeyAfter(key);

      if (!key) {
        key = this.collection.getFirstKey();
      }
    } while (this.disabledKeys.has(key));

    return key;
  }

  getPreviousKey(key) {
    do {
      key = this.collection.getKeyBefore(key);

      if (!key) {
        key = this.collection.getLastKey();
      }
    } while (this.disabledKeys.has(key));

    return key;
  }

}

const $d6b03789ac7a9e8dac0d1b0b$var$BUTTON_GROUP_ROLES = {
  'none': 'toolbar',
  'single': 'radiogroup',
  'multiple': 'toolbar'
};
export function useActionGroup(props, state, ref) {
  let {
    isDisabled,
    orientation = 'horizontal'
  } = props;
  let {
    direction
  } = useLocale(); // eslint-disable-next-line arrow-body-style

  let keyboardDelegate = useMemo(() => {
    return new $b728468b7dd6dbdaf6ef1812f01dd2a7$export$ActionGroupKeyboardDelegate(state.collection, direction, orientation, state.disabledKeys);
  }, [state.collection, direction, orientation, state.disabledKeys]);
  let {
    collectionProps
  } = useSelectableCollection({
    ref,
    selectionManager: state.selectionManager,
    keyboardDelegate,
    disallowSelectAll: true
  });
  let [isFocusWithin, setFocusWithin] = useState(false);
  let {
    focusWithinProps
  } = useFocusWithin({
    onFocusWithinChange: setFocusWithin
  });
  let tabIndex = isFocusWithin ? -1 : 0;
  let role = $d6b03789ac7a9e8dac0d1b0b$var$BUTTON_GROUP_ROLES[state.selectionManager.selectionMode];
  return {
    actionGroupProps: _babelRuntimeHelpersEsmExtends({}, filterDOMProps(props, {
      labelable: true
    }), {
      role,
      'aria-orientation': role === 'toolbar' ? orientation : null,
      'aria-disabled': isDisabled
    }, mergeProps(focusWithinProps, collectionProps), {
      tabIndex: isDisabled ? null : tabIndex
    })
  };
}
const $d68d5fee7c6cb722ef27fbc6b2392061$var$BUTTON_ROLES = {
  'none': null,
  'single': 'radio',
  'multiple': 'checkbox'
};
export function useActionGroupItem(props, state, ref) {
  let selectionMode = state.selectionManager.selectionMode;
  let buttonProps = {
    role: $d68d5fee7c6cb722ef27fbc6b2392061$var$BUTTON_ROLES[selectionMode]
  };

  if (selectionMode !== 'none') {
    let isSelected = state.selectionManager.isSelected(props.key);
    buttonProps['aria-checked'] = isSelected;
  }

  let {
    itemProps
  } = useSelectableItem({
    selectionManager: state.selectionManager,
    key: props.key,
    ref
  });
  return {
    buttonProps: mergeProps(itemProps, buttonProps)
  };
}
//# sourceMappingURL=module.js.map
