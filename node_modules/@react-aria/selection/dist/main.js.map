{"mappings":"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","sources":["./packages/@react-aria/selection/src/useTypeSelect.ts","./packages/@react-aria/selection/src/useSelectableCollection.ts","./packages/@react-aria/selection/src/useSelectableItem.ts","./packages/@react-aria/selection/src/ListKeyboardDelegate.ts","./packages/@react-aria/selection/src/useSelectableList.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, Key, KeyboardEvent, useRef} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\ninterface TypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\ninterface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: TypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    key = key || keyboardDelegate.getKeyForSearch(state.search);\n\n    if (key) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, 500);\n  };\n\n  return {\n    typeSelectProps: {\n      onKeyDown: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent, HTMLAttributes, KeyboardEvent, RefObject, useEffect} from 'react';\nimport {FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {focusWithoutScrolling} from '@react-aria/utils';\nimport {getFocusableTreeWalker} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useTypeSelect} from './useTypeSelect';\n\nconst isMac =\n  typeof window !== 'undefined' && window.navigator != null\n    ? /^Mac/.test(window.navigator.platform)\n    : false;\n\nfunction isCtrlKeyPressed(e: KeyboardEvent) {\n  if (isMac) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: SelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false\n  } = options;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Let child element (e.g. menu button) handle the event if the Alt key is pressed.\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (e.altKey || !ref.current.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n            ? delegate.getKeyBelow(manager.focusedKey)\n            : delegate.getFirstKey();\n\n          if (nextKey) {\n            manager.setFocusedKey(nextKey);\n          } else if (shouldFocusWrap) {\n            manager.setFocusedKey(delegate.getFirstKey(manager.focusedKey));\n          }\n\n          if (e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(nextKey);\n          }\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n            ? delegate.getKeyAbove(manager.focusedKey)\n            : delegate.getLastKey();\n\n          if (nextKey) {\n            manager.setFocusedKey(nextKey);\n          } else if (shouldFocusWrap) {\n            manager.setFocusedKey(delegate.getLastKey(manager.focusedKey));\n          }\n\n          if (e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(nextKey);\n          }\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          if (nextKey) {\n            manager.setFocusedKey(nextKey);\n          }\n          if (e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(nextKey);\n          }\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          if (nextKey) {\n            manager.setFocusedKey(nextKey);\n          }\n          if (e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(nextKey);\n          }\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          if (nextKey) {\n            manager.setFocusedKey(nextKey);\n            if (e.shiftKey && manager.selectionMode === 'multiple') {\n              manager.extendSelection(nextKey);\n            }\n          }\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          if (nextKey) {\n            manager.setFocusedKey(nextKey);\n            if (e.shiftKey && manager.selectionMode === 'multiple') {\n              manager.extendSelection(nextKey);\n            }\n          }\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n        // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n        // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n        // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n        // in the collection, so that the browser default behavior will apply starting from that element\n        // rather than the currently focused one.\n        if (e.shiftKey) {\n          ref.current.focus();\n        } else {\n          let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n          let next: HTMLElement;\n          let last: HTMLElement;\n          do {\n            last = walker.lastChild() as HTMLElement;\n            if (last) {\n              next = last;\n            }\n          } while (last);\n\n          if (next && !next.contains(document.activeElement)) {\n            next.focus();\n          }\n        }\n        break;\n      }\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        manager.setFocusedKey(delegate.getLastKey());\n      } else {\n        manager.setFocusedKey(delegate.getFirstKey());\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  useEffect(() => {\n    if (autoFocus) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null) {\n        focusWithoutScrolling(ref.current);\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  return {\n    collectionProps: mergeProps(typeSelectProps, {\n      tabIndex: -1,\n      // We use a capturing listener to ensure that the keyboard events for the collection\n      // override those of the children. For example, ArrowDown in a table should always go\n      // to the cell below, and not open a menu.\n      onKeyDownCapture: onKeyDown,\n      onFocus,\n      onBlur,\n      onMouseDown(e) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusWithoutScrolling} from '@react-aria/utils';\nimport {HTMLAttributes, Key, RefObject, useEffect} from 'react';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressEvent} from '@react-types/shared';\nimport {PressProps} from '@react-aria/interactions';\n\ninterface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void\n}\n\ninterface SelectableItemAria {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: HTMLAttributes<HTMLElement> & PressProps\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    focus\n  } = options;\n\n  let onSelect = (e: PressEvent | PointerEvent) => {\n    if (manager.selectionMode === 'none') {\n      return;\n    }\n\n    if (manager.selectionMode === 'single') {\n      if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    } else if (e.shiftKey) {\n      manager.extendSelection(key);\n    } else if (manager) {\n      manager.toggleSelection(key);\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  let isFocused = key === manager.focusedKey;\n  useEffect(() => {\n    if (isFocused && manager.isFocused && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusWithoutScrolling(ref.current);\n      }\n    }\n  }, [ref, isFocused, manager.focusedKey, manager.isFocused]);\n\n  let itemProps: SelectableItemAria['itemProps'] = {\n    tabIndex: isFocused ? 0 : -1,\n    onFocus(e) {\n      if (e.target === ref.current) {\n        manager.setFocusedKey(key);\n      }\n    }\n  };\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  if (shouldSelectOnPressUp) {\n    itemProps.onPressStart = (e) => {\n      if (e.pointerType === 'keyboard') {\n        onSelect(e);\n      }\n    };\n\n    itemProps.onPressUp = (e) => {\n      if (e.pointerType !== 'keyboard') {\n        onSelect(e);\n      }\n    };\n  } else {\n    // On touch, it feels strange to select on touch down, so we special case this.\n    itemProps.onPressStart = (e) => {\n      if (e.pointerType !== 'touch') {\n        onSelect(e);\n      }\n    };\n\n    itemProps.onPress = (e) => {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  return {\n    itemProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {HTMLAttributes, Key, RefObject, useEffect, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: SelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let delegate = useMemo(() => keyboardDelegate || new ListKeyboardDelegate(collection, disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator]);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && selectionManager.focusedKey) {\n      let element = ref.current.querySelector(`[data-key=\"${selectionManager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n\n/**\n * Scrolls `scrollView` so that `element` is visible.\n * Similar to `element.scrollIntoView({block: 'nearest'})` (not supported in Edge),\n * but doesn't affect parents above `scrollView`.\n */\nfunction scrollIntoView(scrollView: HTMLElement, element: HTMLElement) {\n  let offsetX = element.offsetLeft - scrollView.offsetLeft;\n  let offsetY = element.offsetTop - scrollView.offsetTop;\n  let width = element.offsetWidth;\n  let height = element.offsetHeight;\n  let x = scrollView.scrollLeft;\n  let y = scrollView.scrollTop;\n  let maxX = x + scrollView.offsetWidth;\n  let maxY = y + scrollView.offsetHeight;\n\n  if (offsetX <= x) {\n    x = offsetX;\n  } else if (offsetX + width > maxX) {\n    x += offsetX + width - maxX;\n  }\n  if (offsetY <= y) {\n    y = offsetY;\n  } else if (offsetY + height > maxY) {\n    y += offsetY + height - maxY;\n  }\n\n  scrollView.scrollLeft = x;\n  scrollView.scrollTop = y;\n}\n"],"names":["useTypeSelect","options","keyboardDelegate","selectionManager","onTypeSelect","state","useRef","search","timeout","current","onKeyDown","e","character","getStringForKey","key","ctrlKey","metaKey","getKeyForSearch","focusedKey","setFocusedKey","clearTimeout","setTimeout","typeSelectProps","length","test","isMac","window","navigator","platform","isCtrlKeyPressed","useSelectableCollection","manager","delegate","ref","autoFocus","shouldFocusWrap","disallowEmptySelection","disallowSelectAll","altKey","contains","target","getKeyBelow","preventDefault","nextKey","getFirstKey","shiftKey","selectionMode","extendSelection","getKeyAbove","getLastKey","getKeyLeftOf","getKeyRightOf","firstKey","lastKey","getKeyPageBelow","getKeyPageAbove","selectAll","clearSelection","focus","walker","getFocusableTreeWalker","tabbable","next","last","lastChild","document","activeElement","onFocus","isFocused","currentTarget","setFocused","relatedTarget","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","onBlur","useEffect","selectedKeys","size","values","value","focusWithoutScrolling","collectionProps","mergeProps","tabIndex","onKeyDownCapture","onMouseDown","useSelectableItem","shouldSelectOnPressUp","isVirtualized","onSelect","isSelected","toggleSelection","replaceSelection","itemProps","onPressStart","pointerType","onPressUp","onPress","ListKeyboardDelegate","constructor","collection","disabledKeys","collator","getKeyAfter","item","getItem","type","has","getKeyBefore","querySelector","menu","pageY","Math","max","offsetTop","offsetHeight","min","scrollHeight","fromKey","substring","textValue","slice","compare","useSelectableList","props","useCollator","usage","sensitivity","useMemo","element","scrollIntoView","listProps","scrollView","offsetX","offsetLeft","offsetY","width","offsetWidth","height","x","scrollLeft","y","scrollTop","maxX","maxY"],"version":3,"file":"main.js.map"}