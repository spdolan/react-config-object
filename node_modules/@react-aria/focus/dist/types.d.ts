import React, { ReactNode, HTMLAttributes, ReactElement, RefObject } from "react";
import { FocusableDOMProps, FocusableProps } from "@react-types/shared";
interface FocusScopeProps {
    /** The contents of the focus scope. */
    children: ReactNode;
    /**
     * Whether to contain focus inside the scope, so users cannot
     * move focus outside, for example in a modal dialog.
     */
    contain?: boolean;
    /**
     * Whether to restore focus back to the element that was focused
     * when the focus scope mounted, after the focus scope unmounts.
     */
    restoreFocus?: boolean;
    /** Whether to auto focus the first focusable element in the focus scope on mount. */
    autoFocus?: boolean;
}
interface FocusManagerOptions {
    /** The element to start searching from. The currently focused element by default. */
    from?: HTMLElement;
    /** Whether to only include tabbable elements, or all focusable elements. */
    tabbable?: boolean;
    /** Whether focus should wrap around when it reaches the end of the scope. */
    wrap?: boolean;
}
interface FocusManager {
    /** Moves focus to the next focusable or tabbable element in the focus scope. */
    focusNext(opts?: FocusManagerOptions): HTMLElement;
    /** Moves focus to the previous focusable or tabbable element in the focus scope. */
    focusPrevious(opts?: FocusManagerOptions): HTMLElement;
}
/**
 * A FocusScope manages focus for its descendants. It supports containing focus inside
 * the scope, restoring focus to the previously focused element on unmount, and auto
 * focusing children on mount. It also acts as a container for a programmatic focus
 * management interface that can be used to move focus forward and back in response
 * to user events.
 */
export function FocusScope(props: FocusScopeProps): JSX.Element;
/**
 * Returns a FocusManager interface for the parent FocusScope.
 * A FocusManager can be used to programmatically move focus within
 * a FocusScope, e.g. in response to user events like keyboard navigation.
 */
export function useFocusManager(): FocusManager;
/**
 * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}
 * that matches all focusable/tabbable elements.
 */
export function getFocusableTreeWalker(root: HTMLElement, opts?: FocusManagerOptions): TreeWalker;
interface FocusRingProps {
    /**
     * Whether to show the focus ring when something
     * inside the container element has focus (true), or
     * only if the container itself has focus (false).
     * @default 'false'
     */
    within?: boolean;
    /** Whether the element is a text input. */
    isTextInput?: boolean;
    /** Whether the element will be auto focused. */
    autoFocus?: boolean;
}
interface FocusRingAria {
    /** Whether the element is currently focused. */
    isFocused: boolean;
    /** Whether keyboard focus should be visible. */
    isFocusVisible: boolean;
    /** Props to apply to the container element with the focus ring. */
    focusProps: HTMLAttributes<HTMLElement>;
}
/**
 * Determines whether a focus ring should be shown to indicate keyboard focus.
 * Focus rings are visible only when the user is interacting with a keyboard,
 * not with a mouse, touch, or other input methods.
 */
export function useFocusRing(props?: FocusRingProps): FocusRingAria;
interface _FocusRingProps1 {
    /** Child element to apply CSS classes to. */
    children: ReactElement;
    /** CSS class to apply when the element is focused. */
    focusClass?: string;
    /** CSS class to apply when the element has keyboard focus. */
    focusRingClass?: string;
    /**
     * Whether to show the focus ring when something
     * inside the container element has focus (true), or
     * only if the container itself has focus (false).
     * @default false
     */
    within?: boolean;
    /** Whether the element is a text input. */
    isTextInput?: boolean;
    /** Whether the element will be auto focused. */
    autoFocus?: boolean;
}
/**
 * A utility component that applies a CSS class when an element has keyboard focus.
 * Focus rings are visible only when the user is interacting with a keyboard,
 * not with a mouse, touch, or other input methods.
 */
export function FocusRing(props: _FocusRingProps1): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
interface FocusableOptions extends FocusableProps, FocusableDOMProps {
    /** Whether focus should be disabled. */
    isDisabled?: boolean;
}
/**
 * Used to make an element focusable and capable of auto focus.
 */
export function useFocusable(props: FocusableOptions, domRef: RefObject<HTMLElement>): {
    focusableProps: {
        tabIndex: number;
        defaultChecked?: boolean;
        defaultValue?: string | number | string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        className?: string;
        contentEditable?: boolean | "inherit" | "false" | "true";
        contextMenu?: string;
        dir?: string;
        draggable?: boolean | "false" | "true";
        hidden?: boolean;
        id?: string;
        lang?: string;
        placeholder?: string;
        slot?: string;
        spellCheck?: boolean | "false" | "true";
        style?: import("react").CSSProperties;
        title?: string;
        translate?: "yes" | "no";
        radioGroup?: string;
        role?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        color?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        inputMode?: "search" | "none" | "text" | "numeric" | "tel" | "url" | "email" | "decimal";
        is?: string;
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "both" | "none" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "time" | "page" | "false" | "true" | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "dialog" | "menu" | "listbox" | "grid" | "false" | "true" | "tree";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: (event: import("react").ClipboardEvent<HTMLElement>) => void;
        onCopyCapture?: (event: import("react").ClipboardEvent<HTMLElement>) => void;
        onCut?: (event: import("react").ClipboardEvent<HTMLElement>) => void;
        onCutCapture?: (event: import("react").ClipboardEvent<HTMLElement>) => void;
        onPaste?: (event: import("react").ClipboardEvent<HTMLElement>) => void;
        onPasteCapture?: (event: import("react").ClipboardEvent<HTMLElement>) => void;
        onCompositionEnd?: (event: import("react").CompositionEvent<HTMLElement>) => void;
        onCompositionEndCapture?: (event: import("react").CompositionEvent<HTMLElement>) => void;
        onCompositionStart?: (event: import("react").CompositionEvent<HTMLElement>) => void;
        onCompositionStartCapture?: (event: import("react").CompositionEvent<HTMLElement>) => void;
        onCompositionUpdate?: (event: import("react").CompositionEvent<HTMLElement>) => void;
        onCompositionUpdateCapture?: (event: import("react").CompositionEvent<HTMLElement>) => void;
        onFocus?: (event: import("react").FocusEvent<HTMLElement>) => void;
        onFocusCapture?: (event: import("react").FocusEvent<HTMLElement>) => void;
        onBlur?: (event: import("react").FocusEvent<HTMLElement>) => void;
        onBlurCapture?: (event: import("react").FocusEvent<HTMLElement>) => void;
        onChange?: (event: import("react").FormEvent<HTMLElement>) => void;
        onChangeCapture?: (event: import("react").FormEvent<HTMLElement>) => void;
        onBeforeInput?: (event: import("react").FormEvent<HTMLElement>) => void;
        onBeforeInputCapture?: (event: import("react").FormEvent<HTMLElement>) => void;
        onInput?: (event: import("react").FormEvent<HTMLElement>) => void;
        onInputCapture?: (event: import("react").FormEvent<HTMLElement>) => void;
        onReset?: (event: import("react").FormEvent<HTMLElement>) => void;
        onResetCapture?: (event: import("react").FormEvent<HTMLElement>) => void;
        onSubmit?: (event: import("react").FormEvent<HTMLElement>) => void;
        onSubmitCapture?: (event: import("react").FormEvent<HTMLElement>) => void;
        onInvalid?: (event: import("react").FormEvent<HTMLElement>) => void;
        onInvalidCapture?: (event: import("react").FormEvent<HTMLElement>) => void;
        onLoad?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onLoadCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onError?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onErrorCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onKeyDown?: (event: import("react").KeyboardEvent<HTMLElement>) => void;
        onKeyDownCapture?: (event: import("react").KeyboardEvent<HTMLElement>) => void;
        onKeyPress?: (event: import("react").KeyboardEvent<HTMLElement>) => void;
        onKeyPressCapture?: (event: import("react").KeyboardEvent<HTMLElement>) => void;
        onKeyUp?: (event: import("react").KeyboardEvent<HTMLElement>) => void;
        onKeyUpCapture?: (event: import("react").KeyboardEvent<HTMLElement>) => void;
        onAbort?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onAbortCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onCanPlay?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onCanPlayCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onCanPlayThrough?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onCanPlayThroughCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onDurationChange?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onDurationChangeCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onEmptied?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onEmptiedCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onEncrypted?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onEncryptedCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onEnded?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onEndedCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onLoadedData?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onLoadedDataCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onLoadedMetadata?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onLoadedMetadataCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onLoadStart?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onLoadStartCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onPause?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onPauseCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onPlay?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onPlayCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onPlaying?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onPlayingCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onProgress?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onProgressCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onRateChange?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onRateChangeCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onSeeked?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onSeekedCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onSeeking?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onSeekingCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onStalled?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onStalledCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onSuspend?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onSuspendCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onTimeUpdate?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onTimeUpdateCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onVolumeChange?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onVolumeChangeCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onWaiting?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onWaitingCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onAuxClick?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onAuxClickCapture?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onClick?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onClickCapture?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onContextMenu?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onContextMenuCapture?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onDoubleClick?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onDoubleClickCapture?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onDrag?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragCapture?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragEnd?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragEndCapture?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragEnter?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragEnterCapture?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragExit?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragExitCapture?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragLeave?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragLeaveCapture?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragOver?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragOverCapture?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragStart?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDragStartCapture?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDrop?: (event: import("react").DragEvent<HTMLElement>) => void;
        onDropCapture?: (event: import("react").DragEvent<HTMLElement>) => void;
        onMouseDown?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onMouseDownCapture?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onMouseEnter?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onMouseLeave?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onMouseMove?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onMouseMoveCapture?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onMouseOut?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onMouseOutCapture?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onMouseOver?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onMouseOverCapture?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onMouseUp?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onMouseUpCapture?: (event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void;
        onSelect?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onSelectCapture?: (event: import("react").SyntheticEvent<HTMLElement, Event>) => void;
        onTouchCancel?: (event: import("react").TouchEvent<HTMLElement>) => void;
        onTouchCancelCapture?: (event: import("react").TouchEvent<HTMLElement>) => void;
        onTouchEnd?: (event: import("react").TouchEvent<HTMLElement>) => void;
        onTouchEndCapture?: (event: import("react").TouchEvent<HTMLElement>) => void;
        onTouchMove?: (event: import("react").TouchEvent<HTMLElement>) => void;
        onTouchMoveCapture?: (event: import("react").TouchEvent<HTMLElement>) => void;
        onTouchStart?: (event: import("react").TouchEvent<HTMLElement>) => void;
        onTouchStartCapture?: (event: import("react").TouchEvent<HTMLElement>) => void;
        onPointerDown?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerDownCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerMove?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerMoveCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerUp?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerUpCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerCancel?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerCancelCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerEnter?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerEnterCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerLeave?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerLeaveCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerOver?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerOverCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerOut?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onPointerOutCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onGotPointerCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onGotPointerCaptureCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onLostPointerCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onLostPointerCaptureCapture?: (event: import("react").PointerEvent<HTMLElement>) => void;
        onScroll?: (event: import("react").UIEvent<HTMLElement>) => void;
        onScrollCapture?: (event: import("react").UIEvent<HTMLElement>) => void;
        onWheel?: (event: import("react").WheelEvent<HTMLElement>) => void;
        onWheelCapture?: (event: import("react").WheelEvent<HTMLElement>) => void;
        onAnimationStart?: (event: import("react").AnimationEvent<HTMLElement>) => void;
        onAnimationStartCapture?: (event: import("react").AnimationEvent<HTMLElement>) => void;
        onAnimationEnd?: (event: import("react").AnimationEvent<HTMLElement>) => void;
        onAnimationEndCapture?: (event: import("react").AnimationEvent<HTMLElement>) => void;
        onAnimationIteration?: (event: import("react").AnimationEvent<HTMLElement>) => void;
        onAnimationIterationCapture?: (event: import("react").AnimationEvent<HTMLElement>) => void;
        onTransitionEnd?: (event: import("react").TransitionEvent<HTMLElement>) => void;
        onTransitionEndCapture?: (event: import("react").TransitionEvent<HTMLElement>) => void;
    };
};

//# sourceMappingURL=types.d.ts.map
