{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-aria/select/src/useSelect.ts","./packages/@react-aria/select/src/HiddenSelect.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaSelectProps} from '@react-types/select';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject, useMemo} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {ListKeyboardDelegate, useTypeSelect} from '@react-aria/selection';\nimport {SelectState} from '@react-stately/select';\nimport {useCollator} from '@react-aria/i18n';\nimport {useLabel} from '@react-aria/label';\nimport {useMenuTrigger} from '@react-aria/menu';\n\ninterface AriaSelectOptions<T> extends AriaSelectProps<T> {\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\ninterface SelectAria {\n  /** Props for the label element. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the popup trigger element. */\n  triggerProps: AriaButtonProps,\n\n  /** Props for the element representing the selected value. */\n  valueProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the popup. */\n  menuProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a select component.\n * A select displays a collapsible list of options and allows a user to select one of them.\n * @param props - Props for the select.\n * @param state - State for the select, as returned by `useListState`.\n */\nexport function useSelect<T>(props: AriaSelectOptions<T>, state: SelectState<T>, ref: RefObject<HTMLElement>): SelectAria {\n  let {\n    keyboardDelegate\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let delegate = useMemo(() => keyboardDelegate || new ListKeyboardDelegate(state.collection, state.disabledKeys, null, collator), [keyboardDelegate, state.collection, state.disabledKeys, collator]);\n\n  let {menuTriggerProps, menuProps} = useMenuTrigger(\n    {\n      type: 'listbox'\n    },\n    state,\n    ref\n  );\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: state.selectionManager,\n    onTypeSelect(key) {\n      state.setSelectedKey(key);\n    }\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let triggerProps = mergeProps(mergeProps(menuTriggerProps, fieldProps), typeSelectProps);\n  let valueId = useId();\n\n  return {\n    labelProps,\n    triggerProps: mergeProps(domProps, {\n      ...triggerProps,\n      'aria-labelledby': [\n        triggerProps['aria-labelledby'],\n        triggerProps['aria-label'] && !triggerProps['aria-labelledby'] ? triggerProps.id : null,\n        valueId\n      ].filter(Boolean).join(' '),\n      onFocus() {\n        state.setFocused(true);\n      },\n      onBlur() {\n        state.setFocused(false);\n      }\n    }),\n    valueProps: {\n      id: valueId\n    },\n    menuProps: {\n      ...menuProps,\n      'aria-labelledby': [\n        fieldProps['aria-labelledby'],\n        triggerProps['aria-label'] && !fieldProps['aria-labelledby'] ? triggerProps.id : null\n      ].filter(Boolean).join(' ')\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {ReactNode, RefObject} from 'react';\nimport {SelectState} from '@react-stately/select';\nimport {useInteractionModality} from '@react-aria/interactions';\nimport {VisuallyHidden} from '@react-aria/visually-hidden';\n\ninterface HiddenSelectProps<T> {\n  /** State for the select. */\n  state: SelectState<T>,\n\n  /** A ref to the trigger element. */\n  triggerRef: RefObject<HTMLElement>,\n\n  /** The text label for the select. */\n  label?: ReactNode,\n\n  /** HTML form input name. */\n  name?: string,\n\n  /** Sets the disabled state of the select and input. */\n  isDisabled?: boolean\n}\n\n/**\n * Renders a hidden native `<select>` element, which can be used to support browser\n * form autofill, mobile form navigation, and native form submission.\n */\nexport function HiddenSelect<T>(props: HiddenSelectProps<T>) {\n  let {state, triggerRef, label, name, isDisabled} = props;\n  let modality = useInteractionModality();\n\n  // If used in a <form>, use a hidden input so the value can be submitted to a server.\n  // If the collection isn't too big, use a hidden <select> element for this so that browser\n  // autofill will work. Otherwise, use an <input type=\"hidden\">.\n  if (state.collection.size <= 300) {\n    // In Safari, the <select> cannot have `display: none` or `hidden` for autofill to work.\n    // In Firefox, there must be a <label> to identify the <select> whereas other browsers\n    // seem to identify it just by surrounding text.\n    // The solution is to use <VisuallyHidden> to hide the elements, which clips the elements to a\n    // 1px rectangle. In addition, we hide from screen readers with aria-hidden, and make the <select>\n    // non tabbable with tabIndex={-1}.\n    //\n    // In mobile browsers, there are next/previous buttons above the software keyboard for navigating\n    // between fields in a form. These only support native form inputs that are tabbable. In order to\n    // support those, an additional hidden input is used to marshall focus to the button. It is tabbable\n    // except when the button is focused, so that shift tab works properly to go to the actual previous\n    // input in the form. Using the <select> for this also works, but Safari on iOS briefly flashes\n    // the native menu on focus, so this isn't ideal. A font-size of 16px or greater is required to\n    // prevent Safari from zooming in on the input when it is focused.\n    //\n    // If the current interaction modality is null, then the user hasn't interacted with the page yet.\n    // In this case, we set the tabIndex to -1 on the input element so that automated accessibility\n    // checkers don't throw false-positives about focusable elements inside an aria-hidden parent.\n    return (\n      <VisuallyHidden aria-hidden=\"true\">\n        <input\n          type=\"text\"\n          tabIndex={modality == null || state.isFocused || state.isOpen ? -1 : 0}\n          style={{fontSize: 16}}\n          onFocus={() => triggerRef.current.focus()}\n          disabled={isDisabled} />\n        <label>\n          {label}\n          <select\n            tabIndex={-1}\n            disabled={isDisabled}\n            name={name}\n            size={state.collection.size}\n            value={state.selectedKey}\n            onChange={e => state.setSelectedKey(e.target.value)}>\n            {[...state.collection.getKeys()].map(key => {\n              let item = state.collection.getItem(key);\n              if (item.type === 'item') {\n                return (\n                  <option\n                    key={item.key}\n                    value={item.key}>\n                    {item.textValue}\n                  </option>\n                );\n              }\n            })}\n          </select>\n        </label>\n      </VisuallyHidden>\n    );\n  } else if (name) {\n    return (\n      <input\n        type=\"hidden\"\n        name={name}\n        disabled={isDisabled}\n        value={state.selectedKey} />\n    );\n  }\n\n  return null;\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","useSelect","props","state","ref","keyboardDelegate","collator","useCollator","usage","sensitivity","delegate","useMemo","ListKeyboardDelegate","collection","disabledKeys","menuTriggerProps","menuProps","useMenuTrigger","type","typeSelectProps","useTypeSelect","selectionManager","onTypeSelect","key","setSelectedKey","labelProps","fieldProps","useLabel","labelElementType","domProps","filterDOMProps","labelable","triggerProps","mergeProps","valueId","useId","id","filter","Boolean","join","onFocus","setFocused","onBlur","valueProps","HiddenSelect","triggerRef","label","name","isDisabled","modality","useInteractionModality","size","isFocused","isOpen","fontSize","current","focus","selectedKey","e","target","value","getKeys","map","item","getItem","textValue"],"version":3,"file":"main.js.map"}