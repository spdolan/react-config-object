{"mappings":";;;;AAwBA;;;;OAIO,SAASA,SAAT,CAAmBC,KAAnB,EAA2CC,GAA3C,EAAoF;AACzF,MAAI;AAACC,IAAAA,IAAI,GAAG;AAAR,MAAoBF,KAAxB;AACA,MAAIG,OAAO,GAAGC,SAAS,EAAvB;AACAD,EAAAA,OAAO,GAAGH,KAAK,CAAC,YAAD,CAAL,GAAsBK,SAAtB,GAAkCF,OAA5C,CAHyF,CAKzF;;AACAG,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIL,GAAG,CAACM,OAAJ,IAAe,CAACN,GAAG,CAACM,OAAJ,CAAYC,QAAZ,CAAqBC,QAAQ,CAACC,aAA9B,CAApB,EAAkE;AAChEC,MAAAA,qBAAqB,CAACV,GAAG,CAACM,OAAL,CAArB,CADgE,CAGhE;AACA;AACA;;AACA,UAAIK,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC7B,YAAIJ,QAAQ,CAACC,aAAT,KAA2BT,GAAG,CAACM,OAAnC,EAA4C;AAC1CN,UAAAA,GAAG,CAACM,OAAJ,CAAYO,IAAZ;AACAH,UAAAA,qBAAqB,CAACV,GAAG,CAACM,OAAL,CAArB;AACD;AACF,OALuB,EAKrB,GALqB,CAAxB;AAOA,aAAO,MAAM;AACXQ,QAAAA,YAAY,CAACH,OAAD,CAAZ;AACD,OAFD;AAGD;AACF,GAlBQ,EAkBN,CAACX,GAAD,CAlBM,CAAT;AAoBA,SAAO;AACLe,IAAAA,WAAW,qCACNC,cAAc,CAACjB,KAAD,EAAQ;AAACkB,MAAAA,SAAS,EAAE;AAAZ,KAAR,CADR;AAEThB,MAAAA,IAFS;AAGTiB,MAAAA,QAAQ,EAAE,CAAC,CAHF;AAIT,yBAAmBnB,KAAK,CAAC,iBAAD,CAAL,IAA4BG,OAJtC;AAKT,oBAAc;AALL,MADN;AAQLiB,IAAAA,UAAU,EAAE;AACVC,MAAAA,EAAE,EAAElB;AADM;AARP,GAAP;AAYD","sources":["./packages/@react-aria/dialog/src/useDialog.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {filterDOMProps, focusWithoutScrolling, useSlotId} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject, useEffect} from 'react';\n\ninterface DialogAria {\n  /** Props for the dialog container element. */\n  dialogProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the dialog title element. */\n  titleProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(props: AriaDialogProps, ref: RefObject<HTMLElement>): DialogAria {\n  let {role = 'dialog'} = props;\n  let titleId = useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId;\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusWithoutScrolling(ref.current);\n\n      // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          ref.current.blur();\n          focusWithoutScrolling(ref.current);\n        }\n      }, 500);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId,\n      'aria-modal': true\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n"],"names":["useDialog","props","ref","role","titleId","useSlotId","undefined","useEffect","current","contains","document","activeElement","focusWithoutScrolling","timeout","setTimeout","blur","clearTimeout","dialogProps","filterDOMProps","labelable","tabIndex","titleProps","id"],"version":3,"file":"module.js.map"}