import { useEffect } from "react";
import { filterDOMProps, focusWithoutScrolling, useSlotId } from "@react-aria/utils";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";

/**
 * Provides the behavior and accessibility implementation for a dialog component.
 * A dialog is an overlay shown above other content in an application.
 */
export function useDialog(props, ref) {
  let {
    role = 'dialog'
  } = props;
  let titleId = useSlotId();
  titleId = props['aria-label'] ? undefined : titleId; // Focus the dialog itself on mount, unless a child element is already focused.

  useEffect(() => {
    if (ref.current && !ref.current.contains(document.activeElement)) {
      focusWithoutScrolling(ref.current); // Safari on iOS does not move the VoiceOver cursor to the dialog
      // or announce that it has opened until it has rendered. A workaround
      // is to wait for half a second, then blur and re-focus the dialog.

      let timeout = setTimeout(() => {
        if (document.activeElement === ref.current) {
          ref.current.blur();
          focusWithoutScrolling(ref.current);
        }
      }, 500);
      return () => {
        clearTimeout(timeout);
      };
    }
  }, [ref]);
  return {
    dialogProps: _babelRuntimeHelpersEsmExtends({}, filterDOMProps(props, {
      labelable: true
    }), {
      role,
      tabIndex: -1,
      'aria-labelledby': props['aria-labelledby'] || titleId,
      'aria-modal': true
    }),
    titleProps: {
      id: titleId
    }
  };
}
//# sourceMappingURL=module.js.map
