{"mappings":";;;;;;AAAA,SAASA,sBAAT,CAAgCC,CAAhC,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAACC,UAAP,GAAoBD,CAAC,CAACE,OAAtB,GAAgCF,CAAvC;AACD;;ACqBD;;;;AAIO,SAASG,QAAT,CAAkBC,KAAlB,EAAoD;AACzD,MAAI;AAACC,IAAAA,gBAAD;AAAmBC,IAAAA;AAAnB,MAAiCC,cAAc,CAACH,KAAD,CAAnD;AAEA,SAAO;AACLI,IAAAA,UAAU,kCACLH,gBADK;AAER;AACA;AACA;AACA;AACA;AACAI,MAAAA,IAAI,EAAE;AAPE,MADL;AAULH,IAAAA;AAVK,GAAP;AAYD","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-aria/meter/src/useMeter.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMeterProps} from '@react-types/meter';\nimport {HTMLAttributes} from 'react';\nimport {useProgressBar} from '@react-aria/progress';\n\ninterface MeterAria {\n  /** Props for the meter container element. */\n  meterProps: HTMLAttributes<HTMLElement>,\n  /** Props for the meter's visual label (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the accessibility implementation for a meter component.\n * Meters represent a quantity within a known range, or a fractional value.\n */\nexport function useMeter(props: AriaMeterProps): MeterAria {\n  let {progressBarProps, labelProps} = useProgressBar(props);\n\n  return {\n    meterProps: {\n      ...progressBarProps,\n      // Use the meter role if available, but fall back to progressbar if not\n      // Chrome currently falls back from meter automatically, and Firefox\n      // does not support meter at all. Safari 13+ seems to support meter properly.\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=944542\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1460378\n      role: 'meter progressbar'\n    },\n    labelProps\n  };\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","useMeter","props","progressBarProps","labelProps","useProgressBar","meterProps","role"],"version":3,"file":"main.js.map"}