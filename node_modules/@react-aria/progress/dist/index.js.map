{"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,sBAAT,CAAgCC,CAAhC,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAACC,UAAP,GAAoBD,CAAC,CAACE,OAAtB,GAAgCF,CAAvC;AACD;;ACuBD;;;;;AAKO,SAASG,cAAT,CAAwBC,KAAxB,EAAsE;AAC3E,MAAI;AACFC,IAAAA,KAAK,GAAG,CADN;AAEFC,IAAAA,QAAQ,GAAG,CAFT;AAGFC,IAAAA,QAAQ,GAAG,GAHT;AAIFC,IAAAA,UAJE;AAKFC,IAAAA,eALE;AAMFC,IAAAA,aAAa,GAAG;AACdC,MAAAA,KAAK,EAAE;AADO;AANd,MASAP,KATJ;AAWA,MAAIQ,QAAQ,GAAGC,cAAc,CAACT,KAAD,EAAQ;AAACU,IAAAA,SAAS,EAAE;AAAZ,GAAR,CAA7B;AACA,MAAI;AAACC,IAAAA,UAAD;AAAaC,IAAAA;AAAb,MAA2BC,QAAQ,iCAClCb,KADkC;AAErC;AACA;AACAc,IAAAA,gBAAgB,EAAE;AAJmB,KAAvC;AAOAb,EAAAA,KAAK,GAAGc,KAAK,CAACd,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,CAAb;AACA,MAAIa,UAAU,GAAG,CAACf,KAAK,GAAGC,QAAT,KAAsBC,QAAQ,GAAGD,QAAjC,CAAjB;AACA,MAAIe,SAAS,GAAGC,kBAAkB,CAACZ,aAAD,CAAlC;;AAEA,MAAI,CAACD,eAAD,IAAoB,CAACD,UAAzB,EAAqC;AACnC,QAAIe,aAAa,GAAGb,aAAa,CAACC,KAAd,KAAwB,SAAxB,GAAoCS,UAApC,GAAiDf,KAArE;AACAG,IAAAA,UAAU,GAAGa,SAAS,CAACG,MAAV,CAAiBD,aAAjB,CAAb;AACD;;AAED,SAAO;AACLE,IAAAA,gBAAgB,EAAEC,UAAU,CAACd,QAAD,kCACvBI,UADuB;AAE1B,uBAAiBP,eAAe,GAAGkB,SAAH,GAAetB,KAFrB;AAG1B,uBAAiBC,QAHS;AAI1B,uBAAiBC,QAJS;AAK1B,wBAAkBE,eAAe,GAAGkB,SAAH,GAAenB,UALtB;AAM1BoB,MAAAA,IAAI,EAAE;AANoB,OADvB;AASLb,IAAAA;AATK,GAAP;AAWD","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-aria/progress/src/useProgressBar.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaProgressBarProps} from '@react-types/progress';\nimport {clamp, filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\nimport {useLabel} from '@react-aria/label';\nimport {useNumberFormatter} from '@react-aria/i18n';\n\ninterface ProgressBarAria {\n  /** Props for the progress bar container element. */\n  progressBarProps: HTMLAttributes<HTMLElement>,\n  /** Props for the progress bar's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the accessibility implementation for a progress bar component.\n * Progress bars show either determinate or indeterminate progress of an operation\n * over time.\n */\nexport function useProgressBar(props: AriaProgressBarProps): ProgressBarAria {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    valueLabel,\n    isIndeterminate,\n    formatOptions = {\n      style: 'percent'\n    }\n  } = props;\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Progress bar is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  value = clamp(value, minValue, maxValue);\n  let percentage = (value - minValue) / (maxValue - minValue);\n  let formatter = useNumberFormatter(formatOptions);\n\n  if (!isIndeterminate && !valueLabel) {\n    let valueToFormat = formatOptions.style === 'percent' ? percentage : value;\n    valueLabel = formatter.format(valueToFormat);\n  }\n\n  return {\n    progressBarProps: mergeProps(domProps, {\n      ...fieldProps,\n      'aria-valuenow': isIndeterminate ? undefined : value,\n      'aria-valuemin': minValue,\n      'aria-valuemax': maxValue,\n      'aria-valuetext': isIndeterminate ? undefined : valueLabel as string,\n      role: 'progressbar'\n    }),\n    labelProps\n  };\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","useProgressBar","props","value","minValue","maxValue","valueLabel","isIndeterminate","formatOptions","style","domProps","filterDOMProps","labelable","labelProps","fieldProps","useLabel","labelElementType","clamp","percentage","formatter","useNumberFormatter","valueToFormat","format","progressBarProps","mergeProps","undefined","role"],"version":3,"file":"index.js.map"}