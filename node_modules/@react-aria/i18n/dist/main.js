var _intlMessageformat = $parcel$interopDefault(require("intl-messageformat"));

var _react2 = require("react");

var _react = $parcel$interopDefault(_react2);

var {
  useEffect,
  useState,
  useContext
} = _react2;

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// https://en.wikipedia.org/wiki/Right-to-left
const $dbb62b32f79d03a795a46f9fbec514c$var$RTL_SCRIPTS = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);
const $dbb62b32f79d03a795a46f9fbec514c$var$RTL_LANGS = new Set(['ae', 'ar', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'glk', 'he', 'ku', 'mzn', 'nqo', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi']);
/**
 * Determines if a locale is read right to left using [Intl.Locale]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale}.
 */

function $dbb62b32f79d03a795a46f9fbec514c$export$isRTL(locale) {
  // If the Intl.Locale API is available, use it to get the script for the locale.
  // This is more accurate than guessing by language, since languages can be written in multiple scripts.
  // @ts-ignore
  if (Intl.Locale) {
    // @ts-ignore
    let script = new Intl.Locale(locale).maximize().script;
    return $dbb62b32f79d03a795a46f9fbec514c$var$RTL_SCRIPTS.has(script);
  } // If not, just guess by the language (first part of the locale)


  let lang = locale.split('-')[0];
  return $dbb62b32f79d03a795a46f9fbec514c$var$RTL_LANGS.has(lang);
}

/**
 * Gets the locale setting of the browser.
 */
function $c53c7d716f930bd5da78e9efb99e3e$export$getDefaultLocale() {
  // @ts-ignore
  let locale = typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';
  return {
    locale,
    direction: $dbb62b32f79d03a795a46f9fbec514c$export$isRTL(locale) ? 'rtl' : 'ltr'
  };
}

let $c53c7d716f930bd5da78e9efb99e3e$var$currentLocale = $c53c7d716f930bd5da78e9efb99e3e$export$getDefaultLocale();
let $c53c7d716f930bd5da78e9efb99e3e$var$listeners = new Set();

function $c53c7d716f930bd5da78e9efb99e3e$var$updateLocale() {
  $c53c7d716f930bd5da78e9efb99e3e$var$currentLocale = $c53c7d716f930bd5da78e9efb99e3e$export$getDefaultLocale();

  for (let listener of $c53c7d716f930bd5da78e9efb99e3e$var$listeners) {
    listener($c53c7d716f930bd5da78e9efb99e3e$var$currentLocale);
  }
}
/**
 * Returns the current browser/system language, and updates when it changes.
 */


function $c53c7d716f930bd5da78e9efb99e3e$export$useDefaultLocale() {
  let [defaultLocale, setDefaultLocale] = useState($c53c7d716f930bd5da78e9efb99e3e$var$currentLocale);
  useEffect(() => {
    if ($c53c7d716f930bd5da78e9efb99e3e$var$listeners.size === 0) {
      window.addEventListener('languagechange', $c53c7d716f930bd5da78e9efb99e3e$var$updateLocale);
    }

    $c53c7d716f930bd5da78e9efb99e3e$var$listeners.add(setDefaultLocale);
    return () => {
      $c53c7d716f930bd5da78e9efb99e3e$var$listeners.delete(setDefaultLocale);

      if ($c53c7d716f930bd5da78e9efb99e3e$var$listeners.size === 0) {
        window.removeEventListener('languagechange', $c53c7d716f930bd5da78e9efb99e3e$var$updateLocale);
      }
    };
  }, []);
  return defaultLocale;
}

const $aa95c2b730b505b265f124d9aec67193$var$I18nContext = _react.createContext(null);
/**
 * Provides the locale for the application to all child components.
 */


function I18nProvider(props) {
  let {
    locale,
    children
  } = props;
  let defaultLocale = $c53c7d716f930bd5da78e9efb99e3e$export$useDefaultLocale();
  let value = locale ? {
    locale,
    direction: $dbb62b32f79d03a795a46f9fbec514c$export$isRTL(locale) ? 'rtl' : 'ltr'
  } : defaultLocale;
  return /*#__PURE__*/_react.createElement($aa95c2b730b505b265f124d9aec67193$var$I18nContext.Provider, {
    value: value
  }, children);
}
/**
 * Returns the current locale and layout direction.
 */


exports.I18nProvider = I18nProvider;

function useLocale() {
  let defaultLocale = $c53c7d716f930bd5da78e9efb99e3e$export$useDefaultLocale();
  let context = useContext($aa95c2b730b505b265f124d9aec67193$var$I18nContext);
  return context || defaultLocale;
}

exports.useLocale = useLocale;
const $a5aefbc9b72193c190dce301e0eb39$var$formatterCache = new Map();
/**
 * Handles formatting ICU Message strings to create localized strings for the current locale.
 * Automatically updates when the locale changes, and handles caching of messages for performance.
 * @param strings - A mapping of languages to strings by key.
 */

function useMessageFormatter(strings) {
  let {
    locale: currentLocale
  } = useLocale(); // Check the cache

  let localeCache = $a5aefbc9b72193c190dce301e0eb39$var$formatterCache.get(strings);

  if (localeCache && localeCache.has(currentLocale)) {
    return localeCache.get(currentLocale);
  } // Add to the formatter cache if needed


  if (!localeCache) {
    localeCache = new Map();
    $a5aefbc9b72193c190dce301e0eb39$var$formatterCache.set(strings, localeCache);
  } // Get the strings for the current locale


  let localeStrings = $a5aefbc9b72193c190dce301e0eb39$var$selectLocale(strings, currentLocale); // Create a new message formatter

  let cache = {};

  let formatMessage = (key, variables) => {
    let message = cache[key + '.' + currentLocale];

    if (!message) {
      let msg = localeStrings[key];

      if (!msg) {
        throw new Error("Could not find intl message " + key + " in " + currentLocale + " locale");
      }

      message = new _intlMessageformat(msg, currentLocale);
      cache[key] = message;
    }

    return message.format(variables);
  };

  localeCache.set(currentLocale, formatMessage);
  return formatMessage;
}

exports.useMessageFormatter = useMessageFormatter;

function $a5aefbc9b72193c190dce301e0eb39$var$selectLocale(strings, locale) {
  // If there is an exact match, use it.
  if (strings[locale]) {
    return strings[locale];
  } // Attempt to find the closest match by language.
  // For example, if the locale is fr-CA (French Canadian), but there is only
  // an fr-FR (France) set of strings, use that.


  let language = $a5aefbc9b72193c190dce301e0eb39$var$getLanguage(locale);

  for (let key in strings) {
    if (key.startsWith(language + '-')) {
      return strings[key];
    }
  } // Nothing close, use english.


  return strings['en-US'];
}

function $a5aefbc9b72193c190dce301e0eb39$var$getLanguage(locale) {
  // @ts-ignore
  if (Intl.Locale) {
    // @ts-ignore
    return new Intl.Locale(locale).language;
  }

  return locale.split('-')[0];
}

let $bdeee39f835a1e28966186127db96579$var$formatterCache = new Map();
/**
 * Provides localized date formatting for the current locale. Automatically updates when the locale changes,
 * and handles caching of the date formatter for performance.
 * @param options - Formatting options.
 */

function useDateFormatter(options) {
  let {
    locale
  } = useLocale();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');

  if ($bdeee39f835a1e28966186127db96579$var$formatterCache.has(cacheKey)) {
    return $bdeee39f835a1e28966186127db96579$var$formatterCache.get(cacheKey);
  }

  let formatter = new Intl.DateTimeFormat(locale, options);
  $bdeee39f835a1e28966186127db96579$var$formatterCache.set(cacheKey, formatter);
  return formatter;
}

exports.useDateFormatter = useDateFormatter;
let $fa77db1482937b6cdb6683d9d7eb896$var$formatterCache = new Map();
/**
 * Provides localized number formatting for the current locale. Automatically updates when the locale changes,
 * and handles caching of the number formatter for performance.
 * @param options - Formatting options.
 */

function useNumberFormatter(options) {
  let {
    locale
  } = useLocale();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');

  if ($fa77db1482937b6cdb6683d9d7eb896$var$formatterCache.has(cacheKey)) {
    return $fa77db1482937b6cdb6683d9d7eb896$var$formatterCache.get(cacheKey);
  }

  let numberFormatter = new Intl.NumberFormat(locale, options);
  $fa77db1482937b6cdb6683d9d7eb896$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}

exports.useNumberFormatter = useNumberFormatter;
let $f2d7166fa8b4811bca7b68ebd673b$var$cache = new Map();
/**
 * Provides localized string collation for the current locale. Automatically updates when the locale changes,
 * and handles caching of the collator for performance.
 * @param options - Collator options.
 */

function useCollator(options) {
  let {
    locale
  } = useLocale();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');

  if ($f2d7166fa8b4811bca7b68ebd673b$var$cache.has(cacheKey)) {
    return $f2d7166fa8b4811bca7b68ebd673b$var$cache.get(cacheKey);
  }

  let formatter = new Intl.Collator(locale, options);
  $f2d7166fa8b4811bca7b68ebd673b$var$cache.set(cacheKey, formatter);
  return formatter;
}

exports.useCollator = useCollator;
//# sourceMappingURL=main.js.map
