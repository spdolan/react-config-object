{"mappings":"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","sources":["./packages/@react-aria/i18n/src/utils.ts","./packages/@react-aria/i18n/src/useDefaultLocale.ts","./packages/@react-aria/i18n/src/context.tsx","./packages/@react-aria/i18n/src/useMessageFormatter.ts","./packages/@react-aria/i18n/src/useDateFormatter.ts","./packages/@react-aria/i18n/src/useNumberFormatter.ts","./packages/@react-aria/i18n/src/useCollator.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// https://en.wikipedia.org/wiki/Right-to-left\nconst RTL_SCRIPTS = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\nconst RTL_LANGS = new Set(['ae', 'ar', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'glk', 'he', 'ku', 'mzn', 'nqo', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi']);\n\n/**\n * Determines if a locale is read right to left using [Intl.Locale]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale}.\n */\nexport function isRTL(locale: string) {\n  // If the Intl.Locale API is available, use it to get the script for the locale.\n  // This is more accurate than guessing by language, since languages can be written in multiple scripts.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    let script = new Intl.Locale(locale).maximize().script;\n    return RTL_SCRIPTS.has(script);\n  }\n\n  // If not, just guess by the language (first part of the locale)\n  let lang = locale.split('-')[0];\n  return RTL_LANGS.has(lang);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Direction} from '@react-types/shared';\nimport {isRTL} from './utils';\nimport {useEffect, useState} from 'react';\n\nexport interface Locale {\n  /** The [BCP47](https://www.ietf.org/rfc/bcp/bcp47.txt) language code for the locale. */\n  locale: string,\n  /** The writing direction for the locale. */\n  direction: Direction\n}\n\n/**\n * Gets the locale setting of the browser.\n */\nexport function getDefaultLocale(): Locale {\n  // @ts-ignore\n  let locale = (typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage)) || 'en-US';\n  return {\n    locale,\n    direction: isRTL(locale) ? 'rtl' : 'ltr'\n  };\n}\n\nlet currentLocale = getDefaultLocale();\nlet listeners = new Set<(locale: Locale) => void>();\n\nfunction updateLocale() {\n  currentLocale = getDefaultLocale();\n  for (let listener of listeners) {\n    listener(currentLocale);\n  }\n}\n\n/**\n * Returns the current browser/system language, and updates when it changes.\n */\nexport function useDefaultLocale() {\n  let [defaultLocale, setDefaultLocale] = useState(currentLocale);\n\n  useEffect(() => {\n    if (listeners.size === 0) {\n      window.addEventListener('languagechange', updateLocale);\n    }\n\n    listeners.add(setDefaultLocale);\n\n    return () => {\n      listeners.delete(setDefaultLocale);\n      if (listeners.size === 0) {\n        window.removeEventListener('languagechange', updateLocale);\n      }\n    };\n  }, []);\n\n  return defaultLocale;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isRTL} from './utils';\nimport {Locale, useDefaultLocale} from './useDefaultLocale';\nimport React, {ReactNode, useContext} from 'react';\n\ninterface ProviderProps {\n  /** Contents that should have the locale applied. */\n  children: ReactNode,\n  /** The locale to apply to the children. */\n  locale?: string\n}\n\nconst I18nContext = React.createContext<Locale>(null);\n\n/**\n * Provides the locale for the application to all child components.\n */\nexport function I18nProvider(props: ProviderProps) {\n  let {locale, children} = props;\n  let defaultLocale = useDefaultLocale();\n\n  let value: Locale = locale ? {\n    locale,\n    direction: isRTL(locale) ? 'rtl' : 'ltr'\n  } : defaultLocale;\n\n  return (\n    <I18nContext.Provider value={value}>\n      {children}\n    </I18nContext.Provider>\n  );\n}\n\n/**\n * Returns the current locale and layout direction.\n */\nexport function useLocale(): Locale {\n  let defaultLocale = useDefaultLocale();\n  let context = useContext(I18nContext);\n  return context || defaultLocale;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport IntlMessageFormat from 'intl-messageformat';\nimport {useLocale} from './context';\n\ntype MessageFormatterStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\ntype FormatMessage = (key: string, variables?: {[key: string]: any}) => string;\n\nconst formatterCache = new Map();\n\n/**\n * Handles formatting ICU Message strings to create localized strings for the current locale.\n * Automatically updates when the locale changes, and handles caching of messages for performance.\n * @param strings - A mapping of languages to strings by key.\n */\nexport function useMessageFormatter(strings: MessageFormatterStrings): FormatMessage {\n  let {locale: currentLocale} = useLocale();\n\n  // Check the cache\n  let localeCache = formatterCache.get(strings);\n  if (localeCache && localeCache.has(currentLocale)) {\n    return localeCache.get(currentLocale);\n  }\n\n  // Add to the formatter cache if needed\n  if (!localeCache) {\n    localeCache = new Map();\n    formatterCache.set(strings, localeCache);\n  }\n\n  // Get the strings for the current locale\n  let localeStrings = selectLocale(strings, currentLocale);\n\n  // Create a new message formatter\n  let cache = {};\n  let formatMessage = (key, variables) => {\n    let message = cache[key + '.' + currentLocale];\n    if (!message) {\n      let msg = localeStrings[key];\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${currentLocale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, currentLocale);\n      cache[key] = message;\n    }\n\n    return message.format(variables);\n  };\n\n  localeCache.set(currentLocale, formatMessage);\n  return formatMessage;\n}\n\nfunction selectLocale(strings, locale) {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  let language = getLanguage(locale);\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings['en-US'];\n}\n\nfunction getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useLocale} from './context';\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\n/**\n * Provides localized date formatting for the current locale. Automatically updates when the locale changes,\n * and handles caching of the date formatter for performance.\n * @param options - Formatting options.\n */\nexport function useDateFormatter(options?: Intl.DateTimeFormatOptions): Intl.DateTimeFormat {\n  let {locale} = useLocale();\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let formatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, formatter);\n  return formatter;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useLocale} from './context';\n\nlet formatterCache = new Map<string, Intl.NumberFormat>();\n\n/**\n * Provides localized number formatting for the current locale. Automatically updates when the locale changes,\n * and handles caching of the number formatter for performance.\n * @param options - Formatting options.\n */\nexport function useNumberFormatter(options?: Intl.NumberFormatOptions): Intl.NumberFormat {\n  let {locale} = useLocale();\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useLocale} from './context';\n\nlet cache = new Map<string, Intl.Collator>();\n\n/**\n * Provides localized string collation for the current locale. Automatically updates when the locale changes,\n * and handles caching of the collator for performance.\n * @param options - Collator options.\n */\nexport function useCollator(options?: Intl.CollatorOptions): Intl.Collator {\n  let {locale} = useLocale();\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (cache.has(cacheKey)) {\n    return cache.get(cacheKey);\n  }\n\n  let formatter = new Intl.Collator(locale, options);\n  cache.set(cacheKey, formatter);\n  return formatter;\n}\n"],"names":["RTL_SCRIPTS","Set","RTL_LANGS","isRTL","locale","Intl","Locale","script","maximize","has","lang","split","getDefaultLocale","navigator","language","userLanguage","direction","currentLocale","listeners","updateLocale","listener","useDefaultLocale","defaultLocale","setDefaultLocale","useState","useEffect","size","window","addEventListener","add","delete","removeEventListener","I18nContext","React","createContext","I18nProvider","props","children","value","useLocale","context","useContext","formatterCache","Map","useMessageFormatter","strings","localeCache","get","set","localeStrings","selectLocale","cache","formatMessage","key","variables","message","msg","Error","IntlMessageFormat","format","getLanguage","startsWith","useDateFormatter","options","cacheKey","Object","entries","sort","a","b","join","formatter","DateTimeFormat","useNumberFormatter","numberFormatter","NumberFormat","useCollator","Collator"],"version":3,"file":"module.js.map"}