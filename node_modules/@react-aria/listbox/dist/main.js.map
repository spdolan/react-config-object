{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-aria/listbox/src/useListBox.ts","./packages/@react-aria/listbox/src/useOption.ts","./packages/@react-aria/listbox/src/useListBoxSection.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, ReactNode, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {ListState} from '@react-stately/list';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaListBoxOptions<T> extends AriaListBoxProps<T> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, {\n      role: 'listbox',\n      'aria-multiselectable': state.selectionManager.selectionMode === 'multiple' ? 'true' : undefined,\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {ListState} from '@react-stately/list';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the option. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaOptionProps {\n  /** Whether the option is disabled. */\n  isDisabled?: boolean,\n\n  /** Whether the option is selected. */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key?: Key,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether the option should be focused when the user hovers over it. */\n  shouldFocusOnHover?: boolean,\n\n  /** Whether the option is contained in a virtual scrolling listbox. */\n  isVirtualized?: boolean\n}\n\nconst isSafariMacOS =\n  typeof window !== 'undefined' && window.navigator != null\n    ? /^Mac/.test(window.navigator.platform) &&\n      /Safari/.test(window.navigator.userAgent) &&\n      !/Chrome/.test(window.navigator.userAgent)\n    : false;\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<HTMLElement>): OptionAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    shouldSelectOnPressUp,\n    shouldFocusOnHover,\n    isVirtualized\n  } = props;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent. \n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!isSafariMacOS) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = state.collection.size;\n  }\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized\n  });\n\n  let {pressProps} = usePress({...itemProps, isDisabled});\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(pressProps, hoverProps)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","useListBox","props","state","ref","domProps","filterDOMProps","labelable","listProps","useSelectableList","selectionManager","collection","disabledKeys","labelProps","fieldProps","useLabel","labelElementType","listBoxProps","mergeProps","role","selectionMode","undefined","isSafariMacOS","window","navigator","test","platform","userAgent","useOption","isSelected","isDisabled","key","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","labelId","useSlotId","descriptionId","optionProps","getItem","index","size","itemProps","useSelectableItem","pressProps","usePress","hoverProps","useHover","onHoverStart","isFocusVisible","setFocused","setFocusedKey","id","descriptionProps","useListBoxSection","heading","ariaLabel","headingId","useId","headingProps","groupProps"],"version":3,"file":"main.js.map"}