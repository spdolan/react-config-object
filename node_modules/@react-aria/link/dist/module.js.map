{"mappings":";;;;;AAgCA;;;;;OAKO,SAASA,OAAT,CAAiBC,KAAjB,EAAyCC,GAAzC,EAAgF;AACrF,MAAI;AACFC,IAAAA,WAAW,GAAG,GADZ;AAEFC,IAAAA,OAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,UAJE;AAKF;AACAC,IAAAA,OAAO,EAAEC,iBANP;AAOFC,IAAAA;AAPE,MASAR,KATJ;AAAA,MAQKS,UARL,uDASIT,KATJ;;AAWA,MAAIU,SAAJ;;AACA,MAAIR,WAAW,KAAK,GAApB,EAAyB;AACvBQ,IAAAA,SAAS,GAAG;AACVC,MAAAA,IAAI,EAAE,MADI;AAEVC,MAAAA,QAAQ,EAAE,CAACJ,UAAD,GAAc,CAAd,GAAkBK;AAFlB,KAAZ;AAID;;AAED,MAAI;AAACC,IAAAA;AAAD,MAAeC,QAAQ,CAAC;AAACZ,IAAAA,OAAD;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA,UAAxB;AAAoCG,IAAAA,UAApC;AAAgDP,IAAAA;AAAhD,GAAD,CAA3B;AACA,MAAIe,QAAQ,GAAGC,cAAc,CAACR,UAAD,EAAa;AAACS,IAAAA,SAAS,EAAE;AAAZ,GAAb,CAA7B;AAEA,SAAO;AACLR,IAAAA,SAAS,EAAES,UAAU,CAACH,QAAD,qCAChBF,UADgB,EAEhBJ,SAFgB;AAGnB,uBAAiBF,UAAU,IAAIK,SAHZ;AAInBP,MAAAA,OAAO,EAAGc,CAAD,IAAO;AACdN,QAAAA,UAAU,CAACR,OAAX,CAAmBc,CAAnB;;AACA,YAAIb,iBAAJ,EAAuB;AACrBA,UAAAA,iBAAiB,CAACa,CAAD,CAAjB;AACAC,UAAAA,OAAO,CAACC,IAAR,CAAa,2CAAb;AACD;AACF;AAVkB;AADhB,GAAP;AAcD","sources":["./packages/@react-aria/link/src/useLink.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLinkProps} from '@react-types/link';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface AriaLinkOptions extends AriaLinkProps {\n  /** Whether the link is disabled. */\n  isDisabled?: boolean,\n  /**\n   * The HTML element used to render the link, e.g. 'a', or 'span'.\n   * @default 'a'\n   */\n  elementType?: string\n}\n\nexport interface LinkAria {\n  /** Props for the link element. */\n  linkProps: HTMLAttributes<HTMLDivElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a link component.\n * A link allows a user to navigate to another page or resource within a web page\n * or application.\n */\nexport function useLink(props: AriaLinkOptions, ref: RefObject<HTMLElement>): LinkAria {\n  let {\n    elementType = 'a',\n    onPress,\n    onPressStart,\n    onPressEnd,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    isDisabled,\n    ...otherProps\n  } = props;\n\n  let linkProps: HTMLAttributes<HTMLDivElement>;\n  if (elementType !== 'a') {\n    linkProps = {\n      role: 'link',\n      tabIndex: !isDisabled ? 0 : undefined\n    };\n  }\n\n  let {pressProps} = usePress({onPress, onPressStart, onPressEnd, isDisabled, ref});\n  let domProps = filterDOMProps(otherProps, {labelable: true});\n\n  return {\n    linkProps: mergeProps(domProps, {\n      ...pressProps,\n      ...linkProps,\n      'aria-disabled': isDisabled || undefined,\n      onClick: (e) => {\n        pressProps.onClick(e);\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n"],"names":["useLink","props","ref","elementType","onPress","onPressStart","onPressEnd","onClick","deprecatedOnClick","isDisabled","otherProps","linkProps","role","tabIndex","undefined","pressProps","usePress","domProps","filterDOMProps","labelable","mergeProps","e","console","warn"],"version":3,"file":"module.js.map"}