{"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,sBAAT,CAAgCC,CAAhC,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAACC,UAAP,GAAoBD,CAAC,CAACE,OAAtB,GAAgCF,CAAvC;AACD;;ACuBD;;;;;AAKO,SAASG,YAAT,CACLC,KADK,EAELC,GAFK,EAGU;AACf,MAAI;AACFC,IAAAA,UAAU,GAAG,KADX;AAEFC,IAAAA,UAAU,GAAG,KAFX;AAGFC,IAAAA,UAAU,GAAG,KAHX;AAIFC,IAAAA,eAJE;AAKFC,IAAAA,IAAI,GAAG,MALL;AAMFC,IAAAA,QAAQ,EAARA,SAAQ,GAAG,MAAM,CAAE;AANjB,MAOAP,KAPJ;AAQA,MAAI;AAACQ,IAAAA;AAAD,MAAmBC,YAAY,CAACT,KAAD,EAAQC,GAAR,CAAnC;AACA,MAAI;AAACS,IAAAA,UAAD;AAAaC,IAAAA;AAAb,MAA2BC,QAAQ,CAACZ,KAAD,CAAvC;AACA,MAAIa,QAAQ,GAAGC,cAAc,CAACd,KAAD,EAAQ;AAACe,IAAAA,SAAS,EAAE;AAAZ,GAAR,CAA7B;AAEA,SAAO;AACLL,IAAAA,UADK;AAELM,IAAAA,UAAU,EAAEC,UAAU,CAACJ,QAAD;AACpBP,MAAAA,IADoB;AAEpBY,MAAAA,QAAQ,EAAEhB,UAFU;AAGpBiB,MAAAA,QAAQ,EAAEf,UAHU;AAIpB,uBAAiBD,UAAU,IAAIiB,SAJX;AAKpB,sBAAgBf,eAAe,KAAK,SAApB,IAAiCe,SAL7B;AAMpB,2BAAqBpB,KAAK,CAAC,mBAAD,CANN;AAOpB,+BAAyBA,KAAK,CAAC,uBAAD,CAPV;AAQpB,2BAAqBA,KAAK,CAAC,mBAAD,CARN;AASpB,uBAAiBA,KAAK,CAAC,eAAD,CATF;AAUpBqB,MAAAA,KAAK,EAAErB,KAAK,CAACqB,KAVO;AAWpBC,MAAAA,YAAY,EAAEtB,KAAK,CAACqB,KAAN,GAAcD,SAAd,GAA0BpB,KAAK,CAACsB,YAX1B;AAYpBf,MAAAA,QAAQ,EAAGgB,CAAD,IAAsChB,SAAQ,CAACgB,CAAC,CAACC,MAAF,CAASH,KAAV,CAZpC;AAapBI,MAAAA,YAAY,EAAEzB,KAAK,CAACyB,YAbA;AAcpBC,MAAAA,SAAS,EAAE1B,KAAK,CAAC0B,SAdG;AAepBC,MAAAA,SAAS,EAAE3B,KAAK,CAAC2B,SAfG;AAgBpBC,MAAAA,IAAI,EAAE5B,KAAK,CAAC4B,IAhBQ;AAiBpBC,MAAAA,OAAO,EAAE7B,KAAK,CAAC6B,OAjBK;AAkBpBC,MAAAA,WAAW,EAAE9B,KAAK,CAAC8B,WAlBC;AAmBpBC,MAAAA,SAAS,EAAE/B,KAAK,CAAC+B,SAnBG;AAqBpB;AACAC,MAAAA,MAAM,EAAEhC,KAAK,CAACgC,MAtBM;AAuBpBC,MAAAA,KAAK,EAAEjC,KAAK,CAACiC,KAvBO;AAwBpBC,MAAAA,OAAO,EAAElC,KAAK,CAACkC,OAxBK;AA0BpB;AACAC,MAAAA,gBAAgB,EAAEnC,KAAK,CAACmC,gBA3BJ;AA4BpBC,MAAAA,kBAAkB,EAAEpC,KAAK,CAACoC,kBA5BN;AA6BpBC,MAAAA,mBAAmB,EAAErC,KAAK,CAACqC,mBA7BP;AA+BpB;AACAC,MAAAA,QAAQ,EAAEtC,KAAK,CAACsC,QAhCI;AAkCpB;AACAC,MAAAA,aAAa,EAAEvC,KAAK,CAACuC,aAnCD;AAoCpBC,MAAAA,OAAO,EAAExC,KAAK,CAACwC;AApCK,OAqCjBhC,cArCiB,EAsCjBG,UAtCiB;AAFjB,GAAP;AA2CD","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-aria/textfield/src/useTextField.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {ChangeEvent, InputHTMLAttributes, LabelHTMLAttributes, RefObject} from 'react';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {useLabel} from '@react-aria/label';\n\ninterface TextFieldAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement & HTMLTextAreaElement>,\n  /** Props for the text field's visible label element (if any). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input element.\n */\nexport function useTextField(\n  props: AriaTextFieldProps,\n  ref: RefObject<HTMLInputElement>\n): TextFieldAria {\n  let {\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState,\n    type = 'text',\n    onChange = () => {}\n  } = props;\n  let {focusableProps} = useFocusable(props, ref);\n  let {labelProps, fieldProps} = useLabel(props);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  return {\n    labelProps,\n    inputProps: mergeProps(domProps, {\n      type,\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      'aria-required': isRequired || undefined,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-activedescendant': props['aria-activedescendant'],\n      'aria-autocomplete': props['aria-autocomplete'],\n      'aria-haspopup': props['aria-haspopup'],\n      value: props.value,\n      defaultValue: props.value ? undefined : props.defaultValue,\n      onChange: (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.value),\n      autoComplete: props.autoComplete,\n      maxLength: props.maxLength,\n      minLength: props.minLength,\n      name: props.name,\n      pattern: props.pattern,\n      placeholder: props.placeholder,\n      inputMode: props.inputMode,\n\n      // Clipboard events\n      onCopy: props.onCopy,\n      onCut: props.onCut,\n      onPaste: props.onPaste,\n\n      // Composition events\n      onCompositionEnd: props.onCompositionEnd,\n      onCompositionStart: props.onCompositionStart,\n      onCompositionUpdate: props.onCompositionUpdate,\n\n      // Selection events\n      onSelect: props.onSelect,\n\n      // Input events\n      onBeforeInput: props.onBeforeInput,\n      onInput: props.onInput,\n      ...focusableProps,\n      ...fieldProps\n    })\n  };\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","useTextField","props","ref","isDisabled","isRequired","isReadOnly","validationState","type","onChange","focusableProps","useFocusable","labelProps","fieldProps","useLabel","domProps","filterDOMProps","labelable","inputProps","mergeProps","disabled","readOnly","undefined","value","defaultValue","e","target","autoComplete","maxLength","minLength","name","pattern","placeholder","inputMode","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onSelect","onBeforeInput","onInput"],"version":3,"file":"main.js.map"}