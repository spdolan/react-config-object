{"mappings":";OAcO,SAASA,kBAAT,CACLC,KADK,EAELC,YAFK,EAGLC,QAHK,EAI6D;AAClE,MAAI,CAACC,UAAD,EAAaC,aAAb,IAA8BC,QAAQ,CAACL,KAAK,IAAIC,YAAV,CAA1C;AACA,MAAIK,GAAG,GAAGC,MAAM,CAACP,KAAK,KAAKQ,SAAX,CAAhB;AACA,MAAIC,aAAa,GAAGH,GAAG,CAACI,OAAxB;AACA,MAAIC,YAAY,GAAGX,KAAK,KAAKQ,SAA7B,CAJkE,CAKlE;;AACA,MAAII,QAAQ,GAAGL,MAAM,CAACJ,UAAD,CAArB;;AACA,MAAIM,aAAa,KAAKE,YAAtB,EAAoC;AAClCE,IAAAA,OAAO,CAACC,IAAR,sCAA+CL,aAAa,GAAG,YAAH,GAAkB,cAA9E,cAAmGE,YAAY,GAAG,YAAH,GAAkB,cAAjI;AACD;;AAEDL,EAAAA,GAAG,CAACI,OAAJ,GAAcC,YAAd;AAEA,MAAII,QAAQ,GAAGC,WAAW,CAAC,UAAChB,KAAD,EAAoB;AAAA,sCAATiB,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAC7C,QAAIC,cAAc,GAAG,SAAjBA,cAAiB,CAAClB,KAAD,EAA4B;AAC/C,UAAIE,QAAJ,EAAc;AACZ,YAAIU,QAAQ,CAACF,OAAT,KAAqBV,KAAzB,EAAgC;AAAA,6CAFJmB,YAEI;AAFJA,YAAAA,YAEI;AAAA;;AAC9BjB,UAAAA,QAAQ,CAACF,KAAD,EAAQ,GAAGmB,YAAX,CAAR;AACD;AACF;;AACD,UAAI,CAACR,YAAL,EAAmB;AACjBC,QAAAA,QAAQ,CAACF,OAAT,GAAmBV,KAAnB;AACD;AACF,KATD;;AAWA,QAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA,UAAIoB,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAA+B;AAAA,2CAAjBC,YAAiB;AAAjBA,UAAAA,YAAiB;AAAA;;AAClD,YAAIC,gBAAgB,GAAGvB,KAAK,CAACW,YAAY,GAAGC,QAAQ,CAACF,OAAZ,GAAsBW,QAAnC,EAA6C,GAAGC,YAAhD,CAA5B;AACAJ,QAAAA,cAAc,CAACK,gBAAD,EAAmB,GAAGN,IAAtB,CAAd;;AACA,YAAI,CAACN,YAAL,EAAmB;AACjB,iBAAOY,gBAAP;AACD;;AACD,eAAOF,QAAP;AACD,OAPD;;AAQAjB,MAAAA,aAAa,CAACgB,cAAD,CAAb;AACD,KAfD,MAeO;AACL,UAAI,CAACT,YAAL,EAAmB;AACjBP,QAAAA,aAAa,CAACJ,KAAD,CAAb;AACD;;AACDkB,MAAAA,cAAc,CAAClB,KAAD,EAAQ,GAAGiB,IAAX,CAAd;AACD;AACF,GAjCyB,EAiCvB,CAACN,YAAD,EAAeT,QAAf,CAjCuB,CAA1B,CAbkE,CAgDlE;;AACA,MAAIS,YAAJ,EAAkB;AAChBC,IAAAA,QAAQ,CAACF,OAAT,GAAmBV,KAAnB;AACD,GAFD,MAEO;AACLA,IAAAA,KAAK,GAAGG,UAAR;AACD;;AAED,SAAO,CAACH,KAAD,EAAQe,QAAR,CAAP;AACD","sources":["./packages/@react-stately/utils/src/useControlledState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useRef, useState} from 'react';\n\nexport function useControlledState<T>(\n  value: T,\n  defaultValue: T,\n  onChange: (value: T, ...args: any[]) => void\n): [T, (value: T | ((prevState: T) => T), ...args: any[]) => void]  {\n  let [stateValue, setStateValue] = useState(value || defaultValue);\n  let ref = useRef(value !== undefined);\n  let wasControlled = ref.current;\n  let isControlled = value !== undefined;\n  // Internal state reference for useCallback\n  let stateRef = useRef(stateValue);\n  if (wasControlled !== isControlled) {\n    console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);\n  }\n\n  ref.current = isControlled;\n\n  let setValue = useCallback((value, ...args) => {\n    let onChangeCaller = (value, ...onChangeArgs) => {\n      if (onChange) {\n        if (stateRef.current !== value) {\n          onChange(value, ...onChangeArgs);\n        }\n      }\n      if (!isControlled) {\n        stateRef.current = value;\n      }\n    };\n\n    if (typeof value === 'function') {\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      let updateFunction = (oldValue, ...functionArgs) => {\n        let interceptedValue = value(isControlled ? stateRef.current : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) {\n          return interceptedValue;\n        }\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) {\n        setStateValue(value);\n      }\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, onChange]);\n\n  // If a controlled component's value prop changes, we need to update stateRef\n  if (isControlled) {\n    stateRef.current = value;\n  } else {\n    value = stateValue;\n  }\n\n  return [value, setValue];\n}\n"],"names":["useControlledState","value","defaultValue","onChange","stateValue","setStateValue","useState","ref","useRef","undefined","wasControlled","current","isControlled","stateRef","console","warn","setValue","useCallback","args","onChangeCaller","onChangeArgs","updateFunction","oldValue","functionArgs","interceptedValue"],"version":3,"file":"module.js.map"}