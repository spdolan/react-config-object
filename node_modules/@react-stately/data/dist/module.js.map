{"mappings":"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","sources":["./packages/@react-stately/data/src/useListData.ts","./packages/@react-stately/data/src/useAsyncList.ts","./packages/@react-stately/data/src/useTreeData.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useState} from 'react';\nimport {Selection} from '@react-types/shared';\n\ninterface ListOptions<T> {\n  /** Initial items in the list. */\n  initialItems?: T[],\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: 'all' | Iterable<Key>,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key\n}\n\nexport interface ListData<T> {\n  /** The items in the list. */\n  items: T[],\n\n  /** The keys of the currently selected items in the list. */\n  selectedKeys: Selection,\n\n  /** Sets the selected keys. */\n  setSelectedKeys(keys: Selection): void,\n\n  /**\n   * Gets an item from the list by key.\n   * @param key - The key of the item to retrieve.\n   */\n  getItem(key: Key): T,\n\n  /**\n   * Inserts items into the list at the given index.\n   * @param index - The index to insert into.\n   * @param values - The values to insert.\n   */\n  insert(index: number, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list before the item at the given key.\n   * @param key - The key of the item to insert before.\n   * @param values - The values to insert.\n   */\n  insertBefore(key: Key, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list after the item at the given key.\n   * @param key - The key of the item to insert after.\n   * @param values - The values to insert.\n   */\n  insertAfter(key: Key, ...values: T[]): void,\n\n  /**\n   * Appends items to the list.\n   * @param values - The values to insert.\n   */\n  append(...values: T[]): void,\n\n  /**\n   * Prepends items to the list.\n   * @param value - The value to insert.\n   */\n  prepend(...values: T[]): void,\n\n  /**\n   * Removes items from the list by their keys.\n   * @param keys - The keys of the item to remove.\n   */\n  remove(...keys: Key[]): void,\n\n  /**\n   * Removes all items from the list that are currently\n   * in the set of selected items.\n   */\n  removeSelectedItems(): void,\n\n  /**\n   * Moves an item within the list.\n   * @param key - The key of the item to move.\n   * @param toIndex - The index to move the item to.\n   */\n  move(key: Key, toIndex: number): void,\n\n  /**\n   * Updates an item in the list.\n   * @param key - The key of the item to update.\n   * @param newValue - The new value for the item.\n   */\n  update(key: Key, newValue: T): void\n}\n\nexport interface ListState<T> {\n  items: T[],\n  selectedKeys: Selection\n}\n\n/**\n * Manages state for an immutable list data structure, and provides convenience methods to\n * update the data over time.\n */\nexport function useListData<T>(options: ListOptions<T>): ListData<T> {\n  let {\n    initialItems = [],\n    initialSelectedKeys,\n    getKey = (item: any) => item.id || item.key\n  } = options;\n  let [state, setState] = useState<ListState<T>>({\n    items: initialItems,\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys || [])\n  });\n\n  return {\n    ...state,\n    ...createListActions({getKey}, setState),\n    getItem(key: Key) {\n      return state.items.find(item => getKey(item) === key);\n    }\n  };\n}\n\nfunction insert<T>(state: ListState<T>, index: number, ...values: T[]): ListState<T> {\n  return {\n    ...state,\n    items: [\n      ...state.items.slice(0, index),\n      ...values,\n      ...state.items.slice(index)\n    ]\n  };\n}\n\nexport function createListActions<T>(opts: ListOptions<T>, dispatch: (updater: (state: ListState<T>) => ListState<T>) => void): Omit<ListData<T>, 'items' | 'selectedKeys' | 'getItem'> {\n  let {getKey} = opts;\n  return {\n    setSelectedKeys(selectedKeys: Selection) {\n      dispatch(state => ({\n        ...state,\n        selectedKeys\n      }));\n    },\n    insert(index: number, ...values: T[]) {\n      dispatch(state => insert(state, index, ...values));\n    },\n    insertBefore(key: Key, ...values: T[]) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return;\n        }\n\n        return insert(state, index, ...values);\n      });\n    },\n    insertAfter(key: Key, ...values: T[]) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return;\n        }\n\n        return insert(state, index + 1, ...values);\n      });\n    },\n    prepend(...values: T[]) {\n      dispatch(state => insert(state, 0, ...values));\n    },\n    append(...values: T[]) {\n      dispatch(state => insert(state, state.items.length, ...values));\n    },\n    remove(...keys: Key[]) {\n      dispatch(state => {\n        let keySet = new Set(keys);\n        let items = state.items.filter(item => !keySet.has(getKey(item)));\n\n        let selection = new Set(state.selectedKeys);\n        for (let key of keys) {\n          selection.delete(key);\n        }\n\n        return {\n          ...state,\n          items,\n          selectedKeys: selection\n        };\n      });\n    },\n    removeSelectedItems() {\n      dispatch(state => {\n        if (state.selectedKeys === 'all') {\n          return {\n            ...state,\n            items: [],\n            selectedKeys: new Set()\n          };\n        }\n\n        let selectedKeys = state.selectedKeys;\n        let items = state.items.filter(item => !selectedKeys.has(getKey(item)));\n        return {\n          ...state,\n          items,\n          selectedKeys: new Set()\n        };\n      });\n    },\n    move(key: Key, toIndex: number) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return state;\n        }\n\n        let copy = state.items.slice();\n        let [item] = copy.splice(index, 1);\n        copy.splice(toIndex, 0, item);\n        return {\n          ...state,\n          items: copy\n        };\n      });\n    },\n    update(key: Key, newValue: T) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return state;\n        }\n\n        return {\n          ...state,\n          items: [\n            ...state.items.slice(0, index),\n            newValue,\n            ...state.items.slice(index + 1)\n          ]\n        };\n      });\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createListActions, ListData, ListState} from './useListData';\nimport {Key, Reducer, useEffect, useReducer} from 'react';\nimport {Selection, SortDescriptor} from '@react-types/shared';\n\ninterface AsyncListOptions<T, C> {\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: Iterable<Key>,\n  /** The initial sort descriptor. */\n  initialSortDescriptor?: SortDescriptor,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key,\n  /** A function that loads the data for the items in the list. */\n  load: AsyncListLoadFunction<T, C>,\n  /**\n   * An optional function that performs sorting. If not provided,\n   * then `sortDescriptor` is passed to the `load` function.\n   */\n  sort?: AsyncListLoadFunction<T, C>\n}\n\ntype AsyncListLoadFunction<T, C> = (state: AsyncListLoadOptions<T, C>) => Promise<AsyncListStateUpdate<T, C>>;\ninterface AsyncListLoadOptions<T, C> {\n  /** The items currently in the list. */\n  items: T[],\n  /** The keys of the currently selected items in the list. */\n  selectedKeys: Selection,\n  /** The current sort descriptor for the list. */\n  sortDescriptor: SortDescriptor,\n  /** An abort signal used to notify the load function that the request has been aborted. */\n  signal: AbortSignal,\n  /** The pagination cursor returned from the last page load. */\n  cursor?: C\n}\n\ninterface AsyncListStateUpdate<T, C> {\n  /** The new items to append to the list. */\n  items: Iterable<T>,\n  /** The keys to add to the selection. */\n  selectedKeys?: Iterable<Key>,\n  /** The sort descriptor to set. */\n  sortDescriptor?: SortDescriptor,\n  /** The pagination cursor to be used for the next page load. */\n  cursor?: C\n}\n\ninterface AsyncListState<T, C> extends ListState<T> {\n  state: 'loading' | 'sorting' | 'loadingMore' | 'error' | 'idle',\n  items: T[],\n  // disabledKeys?: Iterable<Key>,\n  selectedKeys: Selection,\n  // selectedKey?: Key,\n  // expandedKeys?: Iterable<Key>,\n  sortDescriptor?: SortDescriptor,\n  error?: Error,\n  abortController?: AbortController,\n  cursor?: C\n}\n\ntype ActionType = 'success' | 'error' | 'loading' | 'loadingMore' | 'sorting' | 'update';\ninterface Action<T, C> {\n  type: ActionType,\n  items?: Iterable<T>,\n  selectedKeys?: Iterable<Key>,\n  sortDescriptor?: SortDescriptor,\n  error?: Error,\n  abortController?: AbortController,\n  updater?: (state: ListState<T>) => ListState<T>,\n  cursor?: C\n}\n\ninterface AsyncListData<T> extends ListData<T> {\n  /** Whether data is currently being loaded. */\n  isLoading: boolean,\n  /** If loading data failed, then this contains the error that occurred. */\n  error?: Error,\n  // disabledKeys?: Set<Key>,\n  // selectedKey?: Key,\n  // expandedKeys?: Set<Key>,\n  /** The current sort descriptor for the list. */\n  sortDescriptor?: SortDescriptor,\n\n  /** Reloads the data in the list. */\n  reload(): void,\n  /** Loads the next page of data in the list. */\n  loadMore(): void,\n  /** Triggers sorting for the list. */\n  sort(descriptor: SortDescriptor): void\n}\n\nfunction reducer<T, C>(data: AsyncListState<T, C>, action: Action<T, C>): AsyncListState<T, C> {\n  switch (data.state) {\n    case 'idle':\n    case 'error':\n      switch (action.type) {\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n          return {\n            ...data,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: action.abortController\n          };\n        case 'update':\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        case 'success':\n        case 'error':\n          return data;\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    case 'loading':\n    case 'sorting':\n      switch (action.type) {\n        case 'success':\n          // Ignore if there is a newer abortcontroller in state.\n          // This means that multiple requests were going at once.\n          // We want to take only the latest result.\n          if (action.abortController !== data.abortController) {\n            return data;\n          }\n\n          return {\n            ...data,\n            state: 'idle',\n            items: [...action.items],\n            selectedKeys: new Set(action.selectedKeys ?? data.selectedKeys),\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n        case 'error':\n          if (action.abortController !== data.abortController) {\n            return data;\n          }\n\n          return {\n            ...data,\n            state: 'error',\n            error: action.error,\n            abortController: null\n          };\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n          // We're already loading, and another load was triggered at the same time.\n          // We need to abort the previous load and start a new one.\n          data.abortController.abort();\n          return {\n            ...data,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    case 'loadingMore':\n      switch (action.type) {\n        case 'success':\n          // Append the new items\n          return {\n            ...data,\n            state: 'idle',\n            items: [...data.items, ...action.items],\n            selectedKeys: new Set([...data.selectedKeys, ...(action.selectedKeys ?? [])]),\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n        case 'error':\n          return {\n            ...data,\n            state: 'error',\n            error: action.error\n          };\n        case 'loading':\n        case 'sorting':\n          // We're already loading more, and another load was triggered at the same time.\n          // We need to abort the previous load more and start a new one.\n          data.abortController.abort();\n          return {\n            ...data,\n            state: 'loading',\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    default:\n      throw new Error(`Invalid state \"${data.state}\"`);\n  }\n}\n\n/**\n * Manages state for an immutable async loaded list data structure, and provides convenience methods to\n * update the data over time. Manages loading and error states, pagination, and sorting.\n */\nexport function useAsyncList<T, C = string>(options: AsyncListOptions<T, C>): AsyncListData<T> {\n  const {\n    load,\n    sort,\n    initialSelectedKeys,\n    initialSortDescriptor,\n    getKey = (item: any) => item.id || item.key\n  } = options;\n\n  let [data, dispatch] = useReducer<Reducer<AsyncListState<T, C>, Action<T, C>>>(reducer, {\n    state: 'idle',\n    error: null,\n    items: [],\n    selectedKeys: new Set(initialSelectedKeys),\n    sortDescriptor: initialSortDescriptor\n  });\n\n  const dispatchFetch = async (action: Action<T, C>, fn: AsyncListLoadFunction<T, C>) => {\n    let abortController = new AbortController();\n    try {\n      dispatch({...action, abortController});\n\n      let response = await fn({\n        items: data.items.slice(),\n        selectedKeys: data.selectedKeys,\n        sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n        signal: abortController.signal,\n        cursor: action.type === 'loadingMore' ? data.cursor : null\n      });\n      dispatch({type: 'success', ...response, abortController});\n    } catch (e) {\n      dispatch({type: 'error', error: e, abortController});\n    }\n  };\n\n  useEffect(() => {\n    dispatchFetch({type: 'loading'}, load);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    items: data.items,\n    selectedKeys: data.selectedKeys,\n    sortDescriptor: data.sortDescriptor,\n    isLoading: data.state === 'loading' || data.state === 'loadingMore' || data.state === 'sorting',\n    error: data.error,\n    getItem(key: Key) {\n      return data.items.find(item => getKey(item) === key);\n    },\n    reload() {\n      dispatchFetch({type: 'loading'}, load);\n    },\n    loadMore() {\n      // Ignore if already loading more.\n      if (data.state === 'loadingMore' || data.cursor == null) {\n        return;\n      }\n\n      dispatchFetch({type: 'loadingMore'}, load);\n    },\n    sort(sortDescriptor: SortDescriptor) {\n      dispatchFetch({type: 'sorting', sortDescriptor}, sort || load);\n    },\n    ...createListActions({...options, getKey}, fn => {\n      dispatch({type: 'update', updater: fn});\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useState} from 'react';\n\ninterface TreeOptions<T extends object> {\n  /** Initial root items in the tree. */\n  initialItems?: T[],\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: Iterable<Key>,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key,\n  /** A function that returns the children for an item object. */\n  getChildren?: (item: T) => T[]\n}\n\ninterface TreeNode<T extends object> {\n  /** A unique key for the tree node. */\n  key: Key,\n  /** The key of the parent node. */\n  parentKey: Key,\n  /** The value object for the tree node. */\n  value: T,\n  /** Children of the tree node. */\n  children: TreeNode<T>[]\n}\n\ninterface TreeData<T extends object> {\n  /** The root nodes in the tree. */\n  items: TreeNode<T>[],\n\n  /** The keys of the currently selected items in the tree. */\n  selectedKeys: Set<Key>,\n\n  /** Sets the selected keys. */\n  setSelectedKeys(keys: Set<Key>): void,\n\n  /**\n   * Gets a node from the tree by key.\n   * @param key - The key of the item to retrieve.\n   */\n  getItem(key: Key): TreeNode<T>,\n\n  /**\n   * Inserts an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param index - The index within the parent to insert into.\n   * @param value - The value to insert.\n   */\n  insert(parentKey: Key | null, index: number, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list before the item at the given key.\n   * @param key - The key of the item to insert before.\n   * @param values - The values to insert.\n   */\n  insertBefore(key: Key, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list after the item at the given key.\n   * @param key - The key of the item to insert after.\n   * @param values - The values to insert.\n   */\n  insertAfter(key: Key, ...values: T[]): void,\n\n  /**\n   * Appends an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param value - The value to insert.\n   */\n  append(parentKey: Key | null, ...values: T[]): void,\n\n  /**\n   * Prepends an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param value - The value to insert.\n   */\n  prepend(parentKey: Key | null, ...value: T[]): void,\n\n  /**\n   * Removes an item from the tree by its key.\n   * @param key - The key of the item to remove.\n   */\n  remove(...keys: Key[]): void,\n\n  /**\n   * Removes all items from the tree that are currently\n   * in the set of selected items.\n   */\n  removeSelectedItems(): void,\n\n  /**\n   * Moves an item within the tree.\n   * @param key - The key of the item to move.\n   * @param toParentKey - The key of the new parent to insert into.\n   * @param index - The index within the new parent to insert at.\n   */\n  move(key: Key, toParentKey: Key, index: number): void,\n\n  /**\n   * Updates an item in the tree.\n   * @param key - The key of the item to update.\n   * @param newValue - The new value for the item.\n   */\n  update(key: Key, newValue: T): void\n}\n\n/**\n * Manages state for an immutable tree data structure, and provides convenience methods to\n * update the data over time.\n */\nexport function useTreeData<T extends object>(options: TreeOptions<T>): TreeData<T> {\n  let {\n    initialItems = [],\n    initialSelectedKeys,\n    getKey = (item: any) => item.id || item.key,\n    getChildren = (item: any) => item.children\n  } = options;\n  let map = useMemo(() => new Map<Key, TreeNode<T>>(), []);\n\n  // We only want to compute this on initial render.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  let initialNodes = useMemo(() => buildTree(initialItems), []);\n  let [items, setItems] = useState(initialNodes);\n  let [selectedKeys, setSelectedKeys] = useState(new Set<Key>(initialSelectedKeys || []));\n\n  function buildTree(initialItems: T[], parentKey?: Key | null) {\n    return initialItems.map(item => {\n      let node: TreeNode<T> = {\n        key: getKey(item),\n        parentKey: parentKey,\n        value: item,\n        children: null\n      };\n\n      node.children = buildTree(getChildren(item), node.key);\n      map.set(node.key, node);\n      return node;\n    });\n  }\n\n  function updateTree(items: TreeNode<T>[], key: Key, update: (node: TreeNode<T>) => TreeNode<T>) {\n    let node = map.get(key);\n    if (!node) {\n      return items;\n    }\n\n    // Create a new node. If null, then delete the node, otherwise replace.\n    let newNode = update(node);\n    if (newNode == null) {\n      deleteNode(node);\n    } else {\n      map.set(key, newNode);\n    }\n\n    // Walk up the tree and update each parent to refer to the new chilren.\n    while (node.parentKey) {\n      let nextParent = map.get(node.parentKey);\n      let copy: TreeNode<T> = {\n        key: nextParent.key,\n        parentKey: nextParent.parentKey,\n        value: nextParent.value,\n        children: null\n      };\n\n      let children = nextParent.children;\n      if (newNode == null) {\n        children = children.filter(c => c !== node);\n      }\n\n      copy.children = children.map(child => {\n        if (child === node) {\n          return newNode;\n        }\n\n        return child;\n      });\n\n      map.set(copy.key, copy);\n\n      newNode = copy;\n      node = nextParent;\n    }\n\n    if (newNode == null) {\n      items = items.filter(c => c !== node);\n    }\n\n    return items.map(item => {\n      if (item === node) {\n        return newNode;\n      }\n\n      return item;\n    });\n  }\n\n  function deleteNode(node: TreeNode<T>) {\n    map.delete(node.key);\n    for (let child of node.children) {\n      deleteNode(child);\n    }\n  }\n\n  return {\n    items,\n    selectedKeys,\n    setSelectedKeys,\n    getItem(key: Key) {\n      return map.get(key);\n    },\n    insert(parentKey: Key | null, index: number, ...values: T[]) {\n      setItems(items => {\n        let nodes = buildTree(values, parentKey);\n\n        // If parentKey is null, insert into the root.\n        if (parentKey == null) {\n          return [\n            ...items.slice(0, index),\n            ...nodes,\n            ...items.slice(index)\n          ];\n        }\n\n        // Otherwise, update the parent node and its ancestors.\n        return updateTree(items, parentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [\n            ...parentNode.children.slice(0, index),\n            ...nodes,\n            ...parentNode.children.slice(index)\n          ]\n        }));\n      });\n    },\n    insertBefore(key: Key, ...values: T[]): void {\n      let node = map.get(key);\n      if (!node) {\n        return;\n      }\n\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items;\n      let index = nodes.indexOf(node);\n      this.insert(parentNode?.key, index, ...values);\n    },\n    insertAfter(key: Key, ...values: T[]): void {\n      let node = map.get(key);\n      if (!node) {\n        return;\n      }\n\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items;\n      let index = nodes.indexOf(node);\n      this.insert(parentNode?.key, index + 1, ...values);\n    },\n    prepend(parentKey: Key | null, ...values: T[]) {\n      this.insert(parentKey, 0, ...values);\n    },\n    append(parentKey: Key | null, ...values: T[]) {\n      if (parentKey == null) {\n        this.insert(null, items.length, ...values);\n      } else {\n        let parentNode = map.get(parentKey);\n        if (!parentNode) {\n          return;\n        }\n\n        this.insert(parentKey, parentNode.children.length, ...values);\n      }\n    },\n    remove(...keys: Key[]) {\n      let newItems = items;\n      for (let key of keys) {\n        newItems = updateTree(newItems, key, () => null);\n      }\n\n      setItems(newItems);\n\n      let selection = new Set(selectedKeys);\n      for (let key of selectedKeys) {\n        if (!map.has(key)) {\n          selection.delete(key);\n        }\n      }\n\n      setSelectedKeys(selection);\n    },\n    removeSelectedItems() {\n      this.remove(...selectedKeys);\n    },\n    move(key: Key, toParentKey: Key, index: number) {\n      setItems(items => {\n        let node = map.get(key);\n        if (!node) {\n          return items;\n        }\n\n        items = updateTree(items, key, () => null);\n        return updateTree(items, toParentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [\n            ...parentNode.children.slice(0, index),\n            node,\n            ...parentNode.children.slice(index)\n          ]\n        }));\n      });\n    },\n    update(oldKey: Key, newValue: T) {\n      setItems(items => updateTree(items, oldKey, oldNode => {\n        let node: TreeNode<T> = {\n          key: oldNode.key,\n          parentKey: oldNode.key,\n          value: newValue,\n          children: null\n        };\n\n        node.children = buildTree(getChildren(newValue), node.key);\n        return node;\n      }));\n    }\n  };\n}\n"],"names":["useListData","options","initialItems","initialSelectedKeys","getKey","item","id","key","state","setState","useState","items","selectedKeys","Set","createListActions","getItem","find","insert","index","values","slice","opts","dispatch","setSelectedKeys","insertBefore","findIndex","insertAfter","prepend","append","length","remove","keys","keySet","filter","has","selection","delete","removeSelectedItems","move","toIndex","copy","splice","update","newValue","reducer","data","action","type","sortDescriptor","abortController","updater","Error","cursor","error","abort","useAsyncList","load","sort","initialSortDescriptor","useReducer","dispatchFetch","fn","AbortController","response","signal","e","useEffect","isLoading","reload","loadMore","useTreeData","getChildren","children","map","useMemo","Map","initialNodes","buildTree","setItems","parentKey","node","value","set","updateTree","get","newNode","deleteNode","nextParent","c","child","nodes","parentNode","indexOf","newItems","toParentKey","oldKey","oldNode"],"version":3,"file":"module.js.map"}