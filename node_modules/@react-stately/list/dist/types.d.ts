import { Collection, CollectionBase, MultipleSelection, Node, SingleSelection } from "@react-types/shared";
import { Key } from "react";
import { SelectionManager } from "@react-stately/selection";
export interface ListProps<T> extends CollectionBase<T>, MultipleSelection {
}
export interface ListState<T> {
    /** A collection of items in the list. */
    collection: Collection<Node<T>>;
    /** A set of items that are disabled. */
    disabledKeys: Set<Key>;
    /** A selection manager to read and update multiple selection state. */
    selectionManager: SelectionManager;
}
/**
 * Provides state management for list-like components. Handles building a collection
 * of items from props, and manages multiple selection state.
 */
export function useListState<T extends object>(props: ListProps<T>): ListState<T>;
export interface SingleSelectListProps<T> extends CollectionBase<T>, SingleSelection {
}
export interface SingleSelectListState<T> extends ListState<T> {
    /** The key for the currently selected item. */
    readonly selectedKey: Key;
    /** Sets the selected key. */
    setSelectedKey(key: Key): void;
    /** The value of the currently selected item. */
    readonly selectedItem: Node<T>;
}
/**
 * Provides state management for list-like components with single selection.
 * Handles building a collection of items from props, and manages selection state.
 */
export function useSingleSelectListState<T extends object>(props: SingleSelectListProps<T>): SingleSelectListState<T>;

//# sourceMappingURL=types.d.ts.map
