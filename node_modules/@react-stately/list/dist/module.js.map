{"mappings":"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","sources":["./packages/@react-stately/list/src/ListCollection.ts","./packages/@react-stately/list/src/useListState.ts","./packages/@react-stately/list/src/useSingleSelectListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class ListCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>) {\n    this.iterable = nodes;\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && node.type === 'section') {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n    }\n\n    if (last) {\n      this.lastKey = last.key;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, MultipleSelection, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {ListCollection} from './ListCollection';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface ListProps<T> extends CollectionBase<T>, MultipleSelection {}\nexport interface ListState<T> {\n  /** A collection of items in the list. */\n  collection: Collection<Node<T>>,\n\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for list-like components. Handles building a collection\n * of items from props, and manages multiple selection state.\n */\nexport function useListState<T extends object>(props: ListProps<T>): ListState<T>  {\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let collection = useCollection(props, nodes => new ListCollection(nodes));\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, SingleSelection} from '@react-types/shared';\nimport {Key, useMemo} from 'react';\nimport {ListState, useListState} from './useListState';\nimport {Node} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface SingleSelectListProps<T> extends CollectionBase<T>, SingleSelection {}\nexport interface SingleSelectListState<T> extends ListState<T> {\n  /** The key for the currently selected item. */\n  readonly selectedKey: Key,\n\n  /** Sets the selected key. */\n  setSelectedKey(key: Key): void,\n\n  /** The value of the currently selected item. */\n  readonly selectedItem: Node<T>\n}\n\n/**\n * Provides state management for list-like components with single selection.\n * Handles building a collection of items from props, and manages selection state.\n */\nexport function useSingleSelectListState<T extends object>(props: SingleSelectListProps<T>): SingleSelectListState<T>  {\n  let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, props.defaultSelectedKey, props.onSelectionChange);\n  let selectedKeys = useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {collection, disabledKeys, selectionManager} = useListState({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    selectedKeys,\n    onSelectionChange: (keys: Set<Key>) => {\n      let key = keys.values().next().value;\n\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) {\n        props.onSelectionChange(key);\n      }\n\n      setSelectedKey(key);\n    }\n  });\n\n  let selectedItem = selectedKey\n    ? collection.getItem(selectedKey)\n    : null;\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem\n  };\n}\n"],"names":["Symbol","iterator","ListCollection","constructor","nodes","keyMap","Map","iterable","firstKey","lastKey","visit","node","set","key","childNodes","type","child","last","index","nextKey","prevKey","size","getKeys","keys","getKeyBefore","get","getKeyAfter","getFirstKey","getLastKey","getItem","useListState","props","selectionState","useMultipleSelectionState","disabledKeys","useMemo","Set","collection","useCollection","useEffect","focusedKey","setFocusedKey","selectionManager","SelectionManager","useSingleSelectListState","selectedKey","setSelectedKey","useControlledState","defaultSelectedKey","onSelectionChange","selectedKeys","selectionMode","disallowEmptySelection","values","next","value","selectedItem"],"version":3,"file":"module.js.map"}