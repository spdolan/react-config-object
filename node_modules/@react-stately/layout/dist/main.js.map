{"mappings":";;;;;;;AAmCA,MAAMA,oDAAc,GAAG,EAAvB;AAEA;;;;;;;;;;;AAUO,MAAMC,UAAN,SAA4BC,MAA5B,CAAwE;AAmB7E;;;;AAIAC,EAAAA,WAAW,CAACC,OAAD,EAAqC;AAAA,QAApCA,OAAoC;AAApCA,MAAAA,OAAoC,GAAJ,EAAI;AAAA;;AAC9C;AAD8C,SAtBtCC,SAsBsC;AAAA,SArBtCC,kBAqBsC;AAAA,SApBtCC,aAoBsC;AAAA,SAnBtCC,sBAmBsC;AAAA,SAlBtCC,OAkBsC;AAAA,SAjBtCC,kBAiBsC;AAAA,SAhBtCC,WAgBsC;AAAA,SAftCC,WAesC;AAAA,SAdtCC,WAcsC;AAAA,SAbhDC,UAagD;AAAA,SAZhDC,YAYgD,GAZvB,IAAIC,GAAJ,EAYuB;AAAA,SAXhDC,SAWgD;AAAA,SAVtCC,SAUsC;AAAA,SATtCC,cASsC;AAAA,SARtCC,SAQsC;AAAA,SAPtCC,QAOsC;AAAA,SANtCC,KAMsC,GANA,IAAIC,OAAJ,EAMA;AAE9C,SAAKlB,SAAL,GAAiBD,OAAO,CAACC,SAAzB;AACA,SAAKC,kBAAL,GAA0BF,OAAO,CAACE,kBAAlC;AACA,SAAKC,aAAL,GAAqBH,OAAO,CAACG,aAA7B;AACA,SAAKC,sBAAL,GAA8BJ,OAAO,CAACI,sBAAtC;AACA,SAAKC,OAAL,GAAeL,OAAO,CAACK,OAAR,IAAmB,CAAlC;AACA,SAAKC,kBAAL,GAA0BN,OAAO,CAACM,kBAAlC;AACA,SAAKW,QAAL,GAAgBjB,OAAO,CAACiB,QAAxB;AACA,SAAKV,WAAL,GAAmB,IAAIa,GAAJ,EAAnB;AACA,SAAKZ,WAAL,GAAmB,IAAIY,GAAJ,EAAnB;AACA,SAAKJ,SAAL,GAAiB,EAAjB;AACA,SAAKF,SAAL,GAAiB,CAAjB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACD;;AAEDM,EAAAA,aAAa,CAACC,GAAD,EAAW;AACtB,WAAO,KAAKf,WAAL,CAAiBgB,GAAjB,CAAqBD,GAArB,CAAP;AACD;;AAEDE,EAAAA,qBAAqB,CAACC,IAAD,EAAa;AAChC,QAAIC,GAAiB,GAAG,EAAxB;;AAEA,QAAIC,QAAQ,GAAIC,KAAD,IAAyB;AACtC,WAAK,IAAIC,IAAT,IAAiBD,KAAjB,EAAwB;AACtB,YAAI,KAAKE,SAAL,CAAeD,IAAf,EAAqBJ,IAArB,CAAJ,EAAgC;AAC9BC,UAAAA,GAAG,CAACK,IAAJ,CAASF,IAAI,CAACG,UAAd;;AACA,cAAIH,IAAI,CAACI,MAAT,EAAiB;AACfP,YAAAA,GAAG,CAACK,IAAJ,CAASF,IAAI,CAACI,MAAd;AACD;;AAED,cAAIJ,IAAI,CAACK,QAAT,EAAmB;AACjBP,YAAAA,QAAQ,CAACE,IAAI,CAACK,QAAN,CAAR;AACD;AACF;AACF;AACF,KAbD;;AAeAP,IAAAA,QAAQ,CAAC,KAAKX,SAAN,CAAR;AACA,WAAOU,GAAP;AACD;;AAEDI,EAAAA,SAAS,CAACD,IAAD,EAAmBJ,IAAnB,EAA+B;AACtC,WAAOI,IAAI,CAACG,UAAL,CAAgBP,IAAhB,CAAqBU,UAArB,CAAgCV,IAAhC,KAAyCI,IAAI,CAACG,UAAL,CAAgBI,QAAhE;AACD;;AAEDC,EAAAA,QAAQ,CAACC,mBAAD,EAA6D;AACnE;AACA;AACA,QAAIA,mBAAmB,CAACC,WAAxB,EAAqC;AACnC,WAAKrB,KAAL,GAAa,IAAIC,OAAJ,EAAb;AACD;;AAED,SAAKT,UAAL,GAAkB,KAAK8B,WAAL,CAAiB9B,UAAnC;AACA,SAAKM,SAAL,GAAiB,KAAKyB,eAAL,EAAjB;AAEA,SAAK3B,SAAL,GAAiB,KAAK0B,WAAL,CAAiBE,WAAjB,CAA6BC,KAA9C;AACA,SAAK5B,cAAL,GAAsB,KAAKL,UAA3B;AACD;;AAED+B,EAAAA,eAAe,GAAiB;AAC9B,QAAIG,CAAC,GAAG,KAAKvC,OAAb;AACA,QAAIuB,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,IAAT,IAAiB,KAAKnB,UAAtB,EAAkC;AAChC,UAAImC,UAAU,GAAG,KAAKC,UAAL,CAAgBjB,IAAhB,EAAsB,CAAtB,EAAyBe,CAAzB,CAAjB;AACAA,MAAAA,CAAC,GAAGC,UAAU,CAACb,UAAX,CAAsBP,IAAtB,CAA2BsB,IAA/B;AACAnB,MAAAA,KAAK,CAACG,IAAN,CAAWc,UAAX;AACD;;AAED,QAAI,KAAKhC,SAAT,EAAoB;AAClB,UAAIY,IAAI,GAAG,IAAIuB,IAAJ,CAAS,CAAT,EAAYJ,CAAZ,EAAe,KAAKJ,WAAL,CAAiBE,WAAjB,CAA6BC,KAA5C,EAAmD,EAAnD,CAAX;AACA,UAAIM,MAAM,GAAG,IAAIC,UAAJ,CAAe,QAAf,EAAyB,QAAzB,EAAmCzB,IAAnC,CAAb;AACA,WAAKlB,WAAL,CAAiB4C,GAAjB,CAAqB,QAArB,EAA+BF,MAA/B;AACArB,MAAAA,KAAK,CAACG,IAAN,CAAW;AAACC,QAAAA,UAAU,EAAEiB;AAAb,OAAX;AACAL,MAAAA,CAAC,GAAGK,MAAM,CAACxB,IAAP,CAAYsB,IAAhB;AACD;;AAED,SAAKtC,WAAL,GAAmB,IAAI2C,IAAJ,CAAS,KAAKZ,WAAL,CAAiBE,WAAjB,CAA6BC,KAAtC,EAA6CC,CAAC,GAAG,KAAKvC,OAAtD,CAAnB;AACA,WAAOuB,KAAP;AACD;;AAEDkB,EAAAA,UAAU,CAACjB,IAAD,EAAgBwB,CAAhB,EAA2BT,CAA3B,EAAkD;AAC1D,QAAIU,MAAM,GAAG,KAAKpC,KAAL,CAAWK,GAAX,CAAeM,IAAf,CAAb;;AACA,QAAIyB,MAAM,IAAIV,CAAC,KAAK,CAACU,MAAM,CAACrB,MAAP,IAAiBqB,MAAM,CAACtB,UAAzB,EAAqCP,IAArC,CAA0CmB,CAA9D,EAAiE;AAC/D,aAAOU,MAAP;AACD;;AAED,QAAIT,UAAU,GAAG,KAAKU,SAAL,CAAe1B,IAAf,EAAqBwB,CAArB,EAAwBT,CAAxB,CAAjB;AAEAC,IAAAA,UAAU,CAACb,UAAX,CAAsBwB,SAAtB,GAAkC3B,IAAI,CAAC2B,SAAL,IAAkB,IAApD;AACA,SAAKjD,WAAL,CAAiB4C,GAAjB,CAAqBN,UAAU,CAACb,UAAX,CAAsBV,GAA3C,EAAgDuB,UAAU,CAACb,UAA3D;;AACA,QAAIa,UAAU,CAACZ,MAAf,EAAuB;AACrB,WAAK1B,WAAL,CAAiB4C,GAAjB,CAAqBN,UAAU,CAACZ,MAAX,CAAkBX,GAAvC,EAA4CuB,UAAU,CAACZ,MAAvD;AACD,KAZyD,CAc1D;;;AACA,QAAIwB,IAAI,GAAG,KAAKjD,WAAL,CAAiBe,GAAjB,CAAqBM,IAAI,CAACP,GAA1B,CAAX;;AACA,QAAImC,IAAJ,EAAU;AACR,UAAIC,SAAS,GAAG,IAAI9C,GAAJ,EAAhB;;AACA,UAAIiC,UAAU,CAACX,QAAf,EAAyB;AACvB,aAAK,IAAIyB,KAAT,IAAkBd,UAAU,CAACX,QAA7B,EAAuC;AACrCwB,UAAAA,SAAS,CAACE,GAAV,CAAcD,KAAK,CAAC3B,UAAN,CAAiBV,GAA/B;AACD;AACF;;AAED,UAAImC,IAAI,CAACvB,QAAT,EAAmB;AACjB,aAAK,IAAIyB,KAAT,IAAkBF,IAAI,CAACvB,QAAvB,EAAiC;AAC/B,cAAI,CAACwB,SAAS,CAACG,GAAV,CAAcF,KAAK,CAAC3B,UAAN,CAAiBV,GAA/B,CAAL,EAA0C;AACxC,iBAAKwC,gBAAL,CAAsBH,KAAtB;AACD;AACF;AACF;AACF;;AAED,SAAKnD,WAAL,CAAiB2C,GAAjB,CAAqBtB,IAAI,CAACP,GAA1B,EAA+BuB,UAA/B;AACA,SAAK3B,KAAL,CAAWiC,GAAX,CAAetB,IAAf,EAAqBgB,UAArB;AACA,WAAOA,UAAP;AACD;;AAEDiB,EAAAA,gBAAgB,CAACjB,UAAD,EAAyB;AACvC,SAAKrC,WAAL,CAAiBuD,MAAjB,CAAwBlB,UAAU,CAACb,UAAX,CAAsBV,GAA9C;AAEA,SAAKf,WAAL,CAAiBwD,MAAjB,CAAwBlB,UAAU,CAACb,UAAX,CAAsBV,GAA9C;;AACA,QAAIuB,UAAU,CAACZ,MAAf,EAAuB;AACrB,WAAK1B,WAAL,CAAiBwD,MAAjB,CAAwBlB,UAAU,CAACZ,MAAX,CAAkBX,GAA1C;AACD;;AAED,QAAIuB,UAAU,CAACX,QAAf,EAAyB;AACvB,WAAK,IAAIyB,KAAT,IAAkBd,UAAU,CAACX,QAA7B,EAAuC;AACrC,YAAI,KAAK1B,WAAL,CAAiBe,GAAjB,CAAqBoC,KAAK,CAAC3B,UAAN,CAAiBV,GAAtC,MAA+CqC,KAAnD,EAA0D;AACxD,eAAKG,gBAAL,CAAsBH,KAAtB;AACD;AACF;AACF;AACF;;AAEDJ,EAAAA,SAAS,CAAC1B,IAAD,EAAgBwB,CAAhB,EAA2BT,CAA3B,EAAkD;AACzD,YAAQf,IAAI,CAACmC,IAAb;AACE,WAAK,SAAL;AACE,eAAO,KAAKC,YAAL,CAAkBpC,IAAlB,EAAwBwB,CAAxB,EAA2BT,CAA3B,CAAP;;AACF,WAAK,MAAL;AACE,eAAO,KAAKsB,SAAL,CAAerC,IAAf,EAAqBwB,CAArB,EAAwBT,CAAxB,CAAP;AAJJ;AAMD;;AAEDqB,EAAAA,YAAY,CAACpC,IAAD,EAAgBwB,CAAhB,EAA2BT,CAA3B,EAAkD;AAC5D,QAAID,KAAK,GAAG,KAAKH,WAAL,CAAiBE,WAAjB,CAA6BC,KAAzC;AACA,QAAIwB,UAAU,GAAG,KAAKhE,aAAtB;AACA,QAAIiE,WAAW,GAAG,KAAlB,CAH4D,CAK5D;;AACA,QAAID,UAAU,IAAI,IAAlB,EAAwB;AACtB;AACA;AACA;AACA,UAAIE,kBAAkB,GAAG,KAAK7D,WAAL,CAAiBe,GAAjB,CAAqBM,IAAI,CAACP,GAA1B,CAAzB;;AACA,UAAI+C,kBAAkB,IAAIA,kBAAkB,CAACpC,MAA7C,EAAqD;AACnD,YAAIqC,OAAO,GAAG,KAAK5D,UAAL,CAAgB6D,OAAhB,CAAwB1C,IAAI,CAACP,GAA7B,CAAd;AACA,YAAIkD,QAAQ,GAAG,KAAKzD,cAAL,GAAsB,KAAKA,cAAL,CAAoBwD,OAApB,CAA4B1C,IAAI,CAACP,GAAjC,CAAtB,GAA8D,IAA7E;AACA6C,QAAAA,UAAU,GAAGE,kBAAkB,CAACpC,MAAnB,CAA0BR,IAA1B,CAA+BgD,MAA5C;AACAL,QAAAA,WAAW,GAAGzB,KAAK,KAAK,KAAK7B,SAAf,IAA4BwD,OAAO,KAAKE,QAAxC,IAAoDH,kBAAkB,CAACpC,MAAnB,CAA0ByC,aAA5F;AACD,OALD,MAKO;AACLP,QAAAA,UAAU,GAAItC,IAAI,CAAC8C,QAAL,GAAgB,KAAKvE,sBAArB,GAA8C,CAA5D;AACAgE,QAAAA,WAAW,GAAG,IAAd;AACD;AACF;;AAED,QAAID,UAAU,IAAI,IAAlB,EAAwB;AACtBA,MAAAA,UAAU,GAAGvE,oDAAb;AACD;;AAED,QAAIgF,UAAU,GAAG,IAAI5B,IAAJ,CAAS,CAAT,EAAYJ,CAAZ,EAAeD,KAAf,EAAsBwB,UAAtB,CAAjB;AACA,QAAIlC,MAAM,GAAG,IAAIiB,UAAJ,CAAe,QAAf,EAAyBrB,IAAI,CAACP,GAAL,GAAW,SAApC,EAA+CsD,UAA/C,CAAb;AACA3C,IAAAA,MAAM,CAACyC,aAAP,GAAuBN,WAAvB;AACAnC,IAAAA,MAAM,CAACuB,SAAP,GAAmB3B,IAAI,CAACP,GAAxB;AACAsB,IAAAA,CAAC,IAAIX,MAAM,CAACR,IAAP,CAAYgD,MAAjB;AAEA,QAAIhD,IAAI,GAAG,IAAIuB,IAAJ,CAAS,CAAT,EAAYJ,CAAZ,EAAeD,KAAf,EAAsB,CAAtB,CAAX;AACA,QAAIX,UAAU,GAAG,IAAIkB,UAAJ,CAAerB,IAAI,CAACmC,IAApB,EAA0BnC,IAAI,CAACP,GAA/B,EAAoCG,IAApC,CAAjB;AAEA,QAAIoD,MAAM,GAAGjC,CAAb;AACA,QAAIV,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIyB,KAAT,IAAkB9B,IAAI,CAACiD,UAAvB,EAAmC;AACjC,UAAIjC,UAAU,GAAG,KAAKC,UAAL,CAAgBa,KAAhB,EAAuBN,CAAvB,EAA0BT,CAA1B,CAAjB;AACAA,MAAAA,CAAC,GAAGC,UAAU,CAACb,UAAX,CAAsBP,IAAtB,CAA2BsB,IAA/B;AACAb,MAAAA,QAAQ,CAACH,IAAT,CAAcc,UAAd;AACD;;AAEDpB,IAAAA,IAAI,CAACgD,MAAL,GAAc7B,CAAC,GAAGiC,MAAlB;AAEA,WAAO;AACL5C,MAAAA,MADK;AAELD,MAAAA,UAFK;AAGLE,MAAAA;AAHK,KAAP;AAKD;;AAEDgC,EAAAA,SAAS,CAACrC,IAAD,EAAgBwB,CAAhB,EAA2BT,CAA3B,EAAkD;AACzD,QAAID,KAAK,GAAG,KAAKH,WAAL,CAAiBE,WAAjB,CAA6BC,KAAzC;AACA,QAAIwB,UAAU,GAAG,KAAKlE,SAAtB;AACA,QAAImE,WAAW,GAAG,KAAlB,CAHyD,CAKzD;;AACA,QAAID,UAAU,IAAI,IAAlB,EAAwB;AACtB;AACA;AACA;AACA,UAAIE,kBAAkB,GAAG,KAAK7D,WAAL,CAAiBe,GAAjB,CAAqBM,IAAI,CAACP,GAA1B,CAAzB;;AACA,UAAI+C,kBAAJ,EAAwB;AACtB,YAAIC,OAAO,GAAG,KAAK5D,UAAL,CAAgB6D,OAAhB,CAAwB1C,IAAI,CAACP,GAA7B,CAAd;AACA,YAAIkD,QAAQ,GAAG,KAAKzD,cAAL,GAAsB,KAAKA,cAAL,CAAoBwD,OAApB,CAA4B1C,IAAI,CAACP,GAAjC,CAAtB,GAA8D,IAA7E;AACA6C,QAAAA,UAAU,GAAGE,kBAAkB,CAACrC,UAAnB,CAA8BP,IAA9B,CAAmCgD,MAAhD;AACAL,QAAAA,WAAW,GAAGzB,KAAK,KAAK,KAAK7B,SAAf,IAA4BwD,OAAO,KAAKE,QAAxC,IAAoDH,kBAAkB,CAACrC,UAAnB,CAA8B0C,aAAhG;AACD,OALD,MAKO;AACLP,QAAAA,UAAU,GAAG,KAAKjE,kBAAlB;AACAkE,QAAAA,WAAW,GAAG,IAAd;AACD;AACF;;AAED,QAAID,UAAU,IAAI,IAAlB,EAAwB;AACtBA,MAAAA,UAAU,GAAGvE,oDAAb;AACD;;AAED,QAAI,OAAO,KAAKU,kBAAZ,KAAmC,UAAvC,EAAmD;AACjD+C,MAAAA,CAAC,IAAI,KAAK/C,kBAAL,CAAwB,KAAKI,UAA7B,EAAyCmB,IAAI,CAACP,GAA9C,KAAsD,CAA3D;AACD;;AAED,QAAIG,IAAI,GAAG,IAAIuB,IAAJ,CAASK,CAAT,EAAYT,CAAZ,EAAeD,KAAK,GAAGU,CAAvB,EAA0Bc,UAA1B,CAAX;AACA,QAAInC,UAAU,GAAG,IAAIkB,UAAJ,CAAerB,IAAI,CAACmC,IAApB,EAA0BnC,IAAI,CAACP,GAA/B,EAAoCG,IAApC,CAAjB;AACAO,IAAAA,UAAU,CAAC0C,aAAX,GAA2BN,WAA3B;AACA,WAAO;AACLpC,MAAAA;AADK,KAAP;AAGD;;AAED+C,EAAAA,cAAc,CAACzD,GAAD,EAAW0D,IAAX,EAAuB;AACnC,QAAIhD,UAAU,GAAG,KAAKzB,WAAL,CAAiBgB,GAAjB,CAAqBD,GAArB,CAAjB;AACAU,IAAAA,UAAU,CAAC0C,aAAX,GAA2B,KAA3B;;AACA,QAAI1C,UAAU,CAACP,IAAX,CAAgBgD,MAAhB,KAA2BO,IAAI,CAACP,MAApC,EAA4C;AAC1CzC,MAAAA,UAAU,CAACP,IAAX,CAAgBgD,MAAhB,GAAyBO,IAAI,CAACP,MAA9B,CAD0C,CAG1C;;AACA,WAAKvD,KAAL,CAAW6C,MAAX,CAAkB,KAAKrD,UAAL,CAAgB6D,OAAhB,CAAwBjD,GAAxB,CAAlB;AAEA,UAAIO,IAAI,GAAG,KAAKnB,UAAL,CAAgB6D,OAAhB,CAAwBvC,UAAU,CAACwB,SAAnC,CAAX;;AACA,aAAO3B,IAAP,EAAa;AACX,aAAKX,KAAL,CAAW6C,MAAX,CAAkB,KAAKrD,UAAL,CAAgB6D,OAAhB,CAAwB1C,IAAI,CAACP,GAA7B,CAAlB;AACAO,QAAAA,IAAI,GAAG,KAAKnB,UAAL,CAAgB6D,OAAhB,CAAwB1C,IAAI,CAAC2B,SAA7B,CAAP;AACD;;AAED,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDyB,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKxE,WAAZ;AACD;;AAEDyE,EAAAA,WAAW,CAAC5D,GAAD,EAAW;AACpB,QAAIZ,UAAU,GAAG,KAAKA,UAAtB;AAEAY,IAAAA,GAAG,GAAGZ,UAAU,CAACyE,YAAX,CAAwB7D,GAAxB,CAAN;;AACA,WAAOA,GAAP,EAAY;AACV,UAAI8D,IAAI,GAAG1E,UAAU,CAAC6D,OAAX,CAAmBjD,GAAnB,CAAX;;AACA,UAAI8D,IAAI,CAACpB,IAAL,KAAc,MAAd,IAAwB,CAAC,KAAKrD,YAAL,CAAkBkD,GAAlB,CAAsBuB,IAAI,CAAC9D,GAA3B,CAA7B,EAA8D;AAC5D,eAAOA,GAAP;AACD;;AAEDA,MAAAA,GAAG,GAAGZ,UAAU,CAACyE,YAAX,CAAwB7D,GAAxB,CAAN;AACD;AACF;;AAED+D,EAAAA,WAAW,CAAC/D,GAAD,EAAW;AACpB,QAAIZ,UAAU,GAAG,KAAKA,UAAtB;AAEAY,IAAAA,GAAG,GAAGZ,UAAU,CAAC4E,WAAX,CAAuBhE,GAAvB,CAAN;;AACA,WAAOA,GAAP,EAAY;AACV,UAAI8D,IAAI,GAAG1E,UAAU,CAAC6D,OAAX,CAAmBjD,GAAnB,CAAX;;AACA,UAAI8D,IAAI,CAACpB,IAAL,KAAc,MAAd,IAAwB,CAAC,KAAKrD,YAAL,CAAkBkD,GAAlB,CAAsBuB,IAAI,CAAC9D,GAA3B,CAA7B,EAA8D;AAC5D,eAAOA,GAAP;AACD;;AAEDA,MAAAA,GAAG,GAAGZ,UAAU,CAAC4E,WAAX,CAAuBhE,GAAvB,CAAN;AACD;AACF;;AAEDiE,EAAAA,eAAe,CAACjE,GAAD,EAAW;AACxB,QAAIU,UAAU,GAAG,KAAKX,aAAL,CAAmBC,GAAnB,CAAjB;AACA,QAAIkE,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY1D,UAAU,CAACP,IAAX,CAAgBmB,CAAhB,GAAoBZ,UAAU,CAACP,IAAX,CAAgBgD,MAApC,GAA6C,KAAKjC,WAAL,CAAiBE,WAAjB,CAA6B+B,MAAtF,CAAZ;;AACA,WAAOzC,UAAU,IAAIA,UAAU,CAACP,IAAX,CAAgBmB,CAAhB,GAAoB4C,KAAlC,IAA2CxD,UAAlD,EAA8D;AAC5D,UAAI2D,QAAQ,GAAG,KAAKT,WAAL,CAAiBlD,UAAU,CAACV,GAA5B,CAAf;AACAU,MAAAA,UAAU,GAAG,KAAKX,aAAL,CAAmBsE,QAAnB,CAAb;AACD;;AAED,QAAI3D,UAAJ,EAAgB;AACd,aAAOA,UAAU,CAACV,GAAlB;AACD;;AAED,WAAO,KAAKsE,WAAL,EAAP;AACD;;AAEDC,EAAAA,eAAe,CAACvE,GAAD,EAAW;AACxB,QAAIU,UAAU,GAAG,KAAKX,aAAL,CAAmBC,GAAnB,CAAjB;AACA,QAAIkE,KAAK,GAAGC,IAAI,CAACK,GAAL,CAAS,KAAKtD,WAAL,CAAiB/B,WAAjB,CAA6BgE,MAAtC,EAA8CzC,UAAU,CAACP,IAAX,CAAgBmB,CAAhB,GAAoBZ,UAAU,CAACP,IAAX,CAAgBgD,MAApC,GAA6C,KAAKjC,WAAL,CAAiBE,WAAjB,CAA6B+B,MAAxH,CAAZ;;AACA,WAAOzC,UAAU,IAAIA,UAAU,CAACP,IAAX,CAAgBmB,CAAhB,GAAoB4C,KAAzC,EAAgD;AAC9C,UAAIO,QAAQ,GAAG,KAAKV,WAAL,CAAiBrD,UAAU,CAACV,GAA5B,CAAf;AACAU,MAAAA,UAAU,GAAG,KAAKX,aAAL,CAAmB0E,QAAnB,CAAb;AACD;;AAED,QAAI/D,UAAJ,EAAgB;AACd,aAAOA,UAAU,CAACV,GAAlB;AACD;;AAED,WAAO,KAAK0E,UAAL,EAAP;AACD;;AAEDJ,EAAAA,WAAW,GAAG;AACZ,QAAIlF,UAAU,GAAG,KAAKA,UAAtB;AACA,QAAIY,GAAG,GAAGZ,UAAU,CAACkF,WAAX,EAAV;;AACA,WAAOtE,GAAP,EAAY;AACV,UAAI8D,IAAI,GAAG1E,UAAU,CAAC6D,OAAX,CAAmBjD,GAAnB,CAAX;;AACA,UAAI8D,IAAI,CAACpB,IAAL,KAAc,MAAd,IAAwB,CAAC,KAAKrD,YAAL,CAAkBkD,GAAlB,CAAsBuB,IAAI,CAAC9D,GAA3B,CAA7B,EAA8D;AAC5D,eAAOA,GAAP;AACD;;AAEDA,MAAAA,GAAG,GAAGZ,UAAU,CAAC4E,WAAX,CAAuBhE,GAAvB,CAAN;AACD;AACF;;AAED0E,EAAAA,UAAU,GAAG;AACX,QAAItF,UAAU,GAAG,KAAKA,UAAtB;AACA,QAAIY,GAAG,GAAGZ,UAAU,CAACsF,UAAX,EAAV;;AACA,WAAO1E,GAAP,EAAY;AACV,UAAI8D,IAAI,GAAG1E,UAAU,CAAC6D,OAAX,CAAmBjD,GAAnB,CAAX;;AACA,UAAI8D,IAAI,CAACpB,IAAL,KAAc,MAAd,IAAwB,CAAC,KAAKrD,YAAL,CAAkBkD,GAAlB,CAAsBuB,IAAI,CAAC9D,GAA3B,CAA7B,EAA8D;AAC5D,eAAOA,GAAP;AACD;;AAEDA,MAAAA,GAAG,GAAGZ,UAAU,CAACyE,YAAX,CAAwB7D,GAAxB,CAAN;AACD;AACF;;AAED2E,EAAAA,eAAe,CAACC,MAAD,EAAiBC,OAAjB,EAAgC;AAC7C,QAAI,CAAC,KAAKlF,QAAV,EAAoB;AAClB,aAAO,IAAP;AACD;;AAED,QAAIP,UAAU,GAAG,KAAKA,UAAtB;AACA,QAAIY,GAAG,GAAG6E,OAAO,IAAI,KAAKP,WAAL,EAArB;;AACA,WAAOtE,GAAP,EAAY;AACV,UAAI8D,IAAI,GAAG1E,UAAU,CAAC6D,OAAX,CAAmBjD,GAAnB,CAAX;AACA,UAAI8E,SAAS,GAAGhB,IAAI,CAACiB,SAAL,CAAeC,KAAf,CAAqB,CAArB,EAAwBJ,MAAM,CAACK,MAA/B,CAAhB;;AACA,UAAInB,IAAI,CAACiB,SAAL,IAAkB,KAAKpF,QAAL,CAAcuF,OAAd,CAAsBJ,SAAtB,EAAiCF,MAAjC,MAA6C,CAAnE,EAAsE;AACpE,eAAO5E,GAAP;AACD;;AAEDA,MAAAA,GAAG,GAAG,KAAK+D,WAAL,CAAiB/D,GAAjB,CAAN;AACD;;AAED,WAAO,IAAP;AACD,GAjY4E,CAmY7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEAmF,EAAAA,oBAAoB,CAACzE,UAAD,EAAyB;AAC3CA,IAAAA,UAAU,CAAC0E,OAAX,GAAqB,CAArB;AACA1E,IAAAA,UAAU,CAAC2E,SAAX,GAAuB,wBAAvB;AACA,WAAO3E,UAAP;AACD;;AAED4E,EAAAA,kBAAkB,CAAC5E,UAAD,EAAyB;AACzCA,IAAAA,UAAU,CAAC0E,OAAX,GAAqB,CAArB;AACA1E,IAAAA,UAAU,CAAC2E,SAAX,GAAuB,wBAAvB;AACA,WAAO3E,UAAP;AACD;;AAva4E;;;;AC9BxE,MAAM6E,WAAN,oBAA2C;AAAA;AAAA;AAAA,SAChDnG,UADgD;AAAA,SAEhDK,cAFgD;AAAA,SAGhD+F,YAHgD;AAAA,SAIhDC,mBAJgD;AAAA;;AAMhDtE,EAAAA,eAAe,GAAiB;AAC9B;AACA,QACE,CAAC,KAAK1B,cAAN,IACA,KAAKL,UAAL,CAAgBsG,OAAhB,CAAwBT,MAAxB,KAAmC,KAAKxF,cAAL,CAAoBiG,OAApB,CAA4BT,MAD/D,IAEA,KAAK7F,UAAL,CAAgBsG,OAAhB,CAAwBC,IAAxB,CAA6B,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC5F,GAAF,KAAU,KAAKP,cAAL,CAAoBiG,OAApB,CAA4BG,CAA5B,EAA+B7F,GAAhF,CAHF,EAIE;AACA,WAAKJ,KAAL,GAAa,IAAIC,OAAJ,EAAb;AACD;;AAED,SAAKiG,iBAAL;AACA,QAAInF,MAAM,GAAG,KAAKoF,WAAL,EAAb;AACA,QAAIC,IAAI,GAAG,KAAKC,SAAL,CAAe,CAAf,CAAX;AACAD,IAAAA,IAAI,CAACtF,UAAL,CAAgBP,IAAhB,CAAqBkB,KAArB,GAA6B8C,IAAI,CAACC,GAAL,CAASzD,MAAM,CAACD,UAAP,CAAkBP,IAAlB,CAAuBkB,KAAhC,EAAuC2E,IAAI,CAACtF,UAAL,CAAgBP,IAAhB,CAAqBkB,KAA5D,CAA7B;AACA,SAAKlC,WAAL,GAAmB,IAAI2C,IAAJ,CAASkE,IAAI,CAACtF,UAAL,CAAgBP,IAAhB,CAAqBkB,KAA9B,EAAqC2E,IAAI,CAACtF,UAAL,CAAgBP,IAAhB,CAAqBsB,IAA1D,CAAnB;AACA,WAAO,CACLd,MADK,EAELqF,IAFK,CAAP;AAID;;AAEDF,EAAAA,iBAAiB,GAAG;AAClB,SAAKN,YAAL,GAAoB,IAAI1F,GAAJ,EAApB;AACA,SAAK2F,mBAAL,GAA2B,EAA3B,CAFkB,CAIlB;;AACA,QAAIS,gBAAgB,GAAG,IAAI5G,GAAJ,EAAvB;AACA,QAAI6G,cAAc,GAAG,KAAKjF,WAAL,CAAiBE,WAAjB,CAA6BC,KAAlD;;AACA,SAAK,IAAI+E,MAAT,IAAmB,KAAKhH,UAAL,CAAgBsG,OAAnC,EAA4C;AAAA;;AAC1C,UAAIW,KAAK,GAAGD,MAAM,CAACC,KAAnB;AACA,UAAIhF,KAAK,mBAAGgF,KAAK,CAAChF,KAAT,2BAAkBgF,KAAK,CAACC,YAAjC;;AACA,UAAIjF,KAAK,IAAI,IAAb,EAAmB;AACjB,YAAIkF,CAAC,GAAG,KAAKC,UAAL,CAAgBnF,KAAhB,CAAR;AACA,aAAKmE,YAAL,CAAkB3D,GAAlB,CAAsBuE,MAAM,CAACpG,GAA7B,EAAkCuG,CAAlC;AACAJ,QAAAA,cAAc,IAAII,CAAlB;AACD,OAJD,MAIO;AACLL,QAAAA,gBAAgB,CAAC5D,GAAjB,CAAqB8D,MAArB;AACD,OATyC,CAW1C;AACA;;;AACA,UAAIA,MAAM,CAACC,KAAP,CAAaI,eAAb,IAAgC,KAAKrH,UAAL,CAAgBsH,mBAAhB,CAAoCnE,GAApC,CAAwC6D,MAAM,CAACpG,GAA/C,CAApC,EAAyF;AACvF,aAAKyF,mBAAL,CAAyBhF,IAAzB,CAA8B2F,MAAM,CAACO,KAArC;AACD;AACF,KAvBiB,CAyBlB;;;AACA,QAAIT,gBAAgB,CAACxC,IAAjB,GAAwB,CAA5B,EAA+B;AAC7B,UAAIkD,WAAW,GAAGT,cAAc,IAAI,KAAK/G,UAAL,CAAgBsG,OAAhB,CAAwBT,MAAxB,GAAiC,KAAKO,YAAL,CAAkB9B,IAAvD,CAAhC;;AAEA,WAAK,IAAI0C,MAAT,IAAmBF,gBAAnB,EAAqC;AACnC,YAAIG,KAAK,GAAGD,MAAM,CAACC,KAAnB;AACA,YAAIQ,QAAQ,GAAGR,KAAK,CAACQ,QAAN,IAAkB,IAAlB,GAAyB,KAAKL,UAAL,CAAgBH,KAAK,CAACQ,QAAtB,CAAzB,GAA2D,EAA1E;AACA,YAAIC,QAAQ,GAAGT,KAAK,CAACS,QAAN,IAAkB,IAAlB,GAAyB,KAAKN,UAAL,CAAgBH,KAAK,CAACS,QAAtB,CAAzB,GAA2DC,QAA1E;AACA,YAAI1F,KAAK,GAAG8C,IAAI,CAACC,GAAL,CAASyC,QAAT,EAAmB1C,IAAI,CAACK,GAAL,CAASsC,QAAT,EAAmBF,WAAnB,CAAnB,CAAZ;AAEA,aAAKpB,YAAL,CAAkB3D,GAAlB,CAAsBuE,MAAM,CAACpG,GAA7B,EAAkCqB,KAAlC;AACA8E,QAAAA,cAAc,IAAI9E,KAAlB;;AACA,YAAIA,KAAK,KAAKuF,WAAd,EAA2B;AACzBA,UAAAA,WAAW,GAAGT,cAAc,IAAI,KAAK/G,UAAL,CAAgBsG,OAAhB,CAAwBT,MAAxB,GAAiC,KAAKO,YAAL,CAAkB9B,IAAvD,CAA5B;AACD;AACF;AACF;AACF;;AAED8C,EAAAA,UAAU,CAACnF,KAAD,EAAiC;AACzC,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAI2F,KAAK,GAAG3F,KAAK,CAAC2F,KAAN,CAAY,UAAZ,CAAZ;;AACA,UAAI,CAACA,KAAL,EAAY;AACV,cAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,aAAO,KAAK/F,WAAL,CAAiBE,WAAjB,CAA6BC,KAA7B,IAAsC6F,QAAQ,CAACF,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,GAA/D,CAAP;AACD;;AAED,WAAO3F,KAAP;AACD;;AAED0E,EAAAA,WAAW,GAAe;AACxB,QAAI5F,IAAI,GAAG,IAAIuB,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX;AACA,QAAIhB,UAAU,GAAG,IAAIkB,UAAJ,CAAe,QAAf,EAAyB,QAAzB,EAAmCzB,IAAnC,CAAjB;AAEA,QAAImB,CAAC,GAAG,CAAR;AACA,QAAID,KAAK,GAAG,CAAZ;AACA,QAAIT,QAAsB,GAAG,EAA7B;;AACA,SAAK,IAAIuG,SAAT,IAAsB,KAAK/H,UAAL,CAAgBgI,UAAtC,EAAkD;AAChD,UAAI7F,UAAU,GAAG,KAAKC,UAAL,CAAgB2F,SAAhB,EAA2B,CAA3B,EAA8B7F,CAA9B,CAAjB;AACAC,MAAAA,UAAU,CAACb,UAAX,CAAsBwB,SAAtB,GAAkC,QAAlC;AACAZ,MAAAA,CAAC,GAAGC,UAAU,CAACb,UAAX,CAAsBP,IAAtB,CAA2BsB,IAA/B;AACAJ,MAAAA,KAAK,GAAG8C,IAAI,CAACC,GAAL,CAAS/C,KAAT,EAAgBE,UAAU,CAACb,UAAX,CAAsBP,IAAtB,CAA2BkB,KAA3C,CAAR;AACAT,MAAAA,QAAQ,CAACH,IAAT,CAAcc,UAAd;AACD;;AAEDpB,IAAAA,IAAI,CAACkB,KAAL,GAAaA,KAAb;AACAlB,IAAAA,IAAI,CAACgD,MAAL,GAAc7B,CAAd;AAEA,SAAKrC,WAAL,CAAiB4C,GAAjB,CAAqB,QAArB,EAA+BnB,UAA/B;AAEA,WAAO;AACLA,MAAAA,UADK;AAELE,MAAAA;AAFK,KAAP;AAID;;AAEDyG,EAAAA,cAAc,CAACF,SAAD,EAA0BpF,CAA1B,EAAqCT,CAArC,EAAgD;AAC5D,QAAInB,IAAI,GAAG,IAAIuB,IAAJ,CAAS,CAAT,EAAYJ,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX;AACA,QAAIgG,GAAG,GAAG,IAAI1F,UAAJ,CAAe,WAAf,EAA4BuF,SAAS,CAACnH,GAAtC,EAA2CG,IAA3C,CAAV;AAEA,QAAIgD,MAAM,GAAG,CAAb;AACA,QAAIuC,OAAqB,GAAG,EAA5B;;AACA,SAAK,IAAI6B,IAAT,IAAiBJ,SAAS,CAAC3D,UAA3B,EAAuC;AACrC,UAAIjC,UAAU,GAAG,KAAKC,UAAL,CAAgB+F,IAAhB,EAAsBxF,CAAtB,EAAyBT,CAAzB,CAAjB;AACAC,MAAAA,UAAU,CAACb,UAAX,CAAsBwB,SAAtB,GAAkCoF,GAAG,CAACtH,GAAtC;AACA+B,MAAAA,CAAC,GAAGR,UAAU,CAACb,UAAX,CAAsBP,IAAtB,CAA2BqH,IAA/B;AACArE,MAAAA,MAAM,GAAGgB,IAAI,CAACC,GAAL,CAASjB,MAAT,EAAiB5B,UAAU,CAACb,UAAX,CAAsBP,IAAtB,CAA2BgD,MAA5C,CAAT;AACAuC,MAAAA,OAAO,CAACjF,IAAR,CAAac,UAAb;AACD;;AAED,SAAKkG,eAAL,CAAqB/B,OAArB,EAA8BvC,MAA9B;AAEAhD,IAAAA,IAAI,CAACgD,MAAL,GAAcA,MAAd;AACAhD,IAAAA,IAAI,CAACkB,KAAL,GAAaU,CAAb;AAEA,WAAO;AACLrB,MAAAA,UAAU,EAAE4G,GADP;AAEL1G,MAAAA,QAAQ,EAAE8E;AAFL,KAAP;AAID;;AAED+B,EAAAA,eAAe,CAAC7G,QAAD,EAAyBuC,MAAzB,EAAyC;AACtD,SAAK,IAAId,KAAT,IAAkBzB,QAAlB,EAA4B;AAC1B,UAAIyB,KAAK,CAAC3B,UAAN,CAAiBP,IAAjB,CAAsBgD,MAAtB,KAAiCA,MAArC,EAA6C;AAC3C;AACAd,QAAAA,KAAK,CAAC3B,UAAN,GAAmB2B,KAAK,CAAC3B,UAAN,CAAiBgH,IAAjB,EAAnB;AACA,aAAKzI,WAAL,CAAiB4C,GAAjB,CAAqBQ,KAAK,CAAC3B,UAAN,CAAiBV,GAAtC,EAA2CqC,KAAK,CAAC3B,UAAjD;AAEA2B,QAAAA,KAAK,CAAC3B,UAAN,CAAiBP,IAAjB,CAAsBgD,MAAtB,GAA+BA,MAA/B;AACD;AACF;AACF;;AAEDwE,EAAAA,cAAc,CAACpH,IAAD,EAAqB;AAAA;;AACjC,QAAIqH,OAAO,oBAAGrH,IAAI,CAACqH,OAAR,4BAAmB,CAA9B;AACA,QAAIvG,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIwE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+B,OAApB,EAA6B/B,CAAC,EAA9B,EAAkC;AAChC,UAAIO,MAAM,GAAG,KAAKhH,UAAL,CAAgBsG,OAAhB,CAAwBnF,IAAI,CAACoG,KAAL,GAAad,CAArC,CAAb;AACAxE,MAAAA,KAAK,IAAI,KAAKmE,YAAL,CAAkBvF,GAAlB,CAAsBmG,MAAM,CAACpG,GAA7B,CAAT;AACD;;AAED,WAAOqB,KAAP;AACD;;AAEDwG,EAAAA,kBAAkB,CAACtH,IAAD,EAAqBc,KAArB,EAAoC8B,MAApC,EAAoD2E,eAApD,EAA6E;AAC7F,QAAIhF,WAAW,GAAG,KAAlB,CAD6F,CAG7F;;AACA,QAAIK,MAAM,IAAI,IAAd,EAAoB;AAClB;AACA;AACA;AACA,UAAIJ,kBAAkB,GAAG,KAAK7D,WAAL,CAAiBe,GAAjB,CAAqBM,IAAI,CAACP,GAA1B,CAAzB;;AACA,UAAI+C,kBAAJ,EAAwB;AACtB,YAAIC,OAAO,GAAG,KAAK5D,UAAL,CAAgB6D,OAAhB,CAAwB1C,IAAI,CAACP,GAA7B,CAAd;AACA,YAAIkD,QAAQ,GAAG,KAAKzD,cAAL,GAAsB,KAAKA,cAAL,CAAoBwD,OAApB,CAA4B1C,IAAI,CAACP,GAAjC,CAAtB,GAA8D,IAA7E;AACAmD,QAAAA,MAAM,GAAGJ,kBAAkB,CAACrC,UAAnB,CAA8BP,IAA9B,CAAmCgD,MAA5C;AACAL,QAAAA,WAAW,GAAGE,OAAO,KAAKE,QAAZ,IAAwB7B,KAAK,KAAK0B,kBAAkB,CAACrC,UAAnB,CAA8BP,IAA9B,CAAmCkB,KAArE,IAA8E0B,kBAAkB,CAACrC,UAAnB,CAA8B0C,aAA1H;AACD,OALD,MAKO;AACLD,QAAAA,MAAM,GAAG2E,eAAT;AACAhF,QAAAA,WAAW,GAAG,IAAd;AACD;AACF;;AAED,WAAO;AAACK,MAAAA,MAAD;AAASL,MAAAA;AAAT,KAAP;AACD;;AAEDiF,EAAAA,WAAW,CAACxH,IAAD,EAAqBwB,CAArB,EAAgCT,CAAhC,EAAuD;AAAA;;AAChE,QAAID,KAAK,GAAG,KAAKsG,cAAL,CAAoBpH,IAApB,CAAZ;AACA,QAAI;AAAC4C,MAAAA,MAAD;AAASL,MAAAA;AAAT,QAAwB,KAAK+E,kBAAL,CAAwBtH,IAAxB,EAA8Bc,KAA9B,EAAqC,KAAKxC,aAA1C,EAAyD,KAAKC,sBAA9D,CAA5B;AACA,QAAIqB,IAAI,GAAG,IAAIuB,IAAJ,CAASK,CAAT,EAAYT,CAAZ,EAAeD,KAAf,EAAsB8B,MAAtB,CAAX;AACA,QAAIzC,UAAU,GAAG,IAAIkB,UAAJ,CAAerB,IAAI,CAACmC,IAApB,EAA0BnC,IAAI,CAACP,GAA/B,EAAoCG,IAApC,CAAjB;AACAO,IAAAA,UAAU,CAACI,QAAX,kBAAsBP,IAAI,CAAC8F,KAA3B,qBAAsB,YAAYI,eAAlC;AACA/F,IAAAA,UAAU,CAACsH,MAAX,GAAoBtH,UAAU,CAACI,QAAX,GAAsB,CAAtB,GAA0B,CAA9C;AACAJ,IAAAA,UAAU,CAAC0C,aAAX,GAA2BN,WAA3B;AAEA,WAAO;AACLpC,MAAAA;AADK,KAAP;AAGD;;AAEDuF,EAAAA,SAAS,CAAC3E,CAAD,EAAwB;AAC/B,QAAInB,IAAI,GAAG,IAAIuB,IAAJ,CAAS,CAAT,EAAYJ,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX;AACA,QAAIZ,UAAU,GAAG,IAAIkB,UAAJ,CAAe,UAAf,EAA2B,MAA3B,EAAmCzB,IAAnC,CAAjB;AAEA,QAAIoD,MAAM,GAAGjC,CAAb;AACA,QAAID,KAAK,GAAG,CAAZ;AACA,QAAIT,QAAsB,GAAG,EAA7B;;AACA,SAAK,IAAIL,IAAT,IAAiB,KAAKnB,UAAL,CAAgB4G,IAAhB,CAAqBxC,UAAtC,EAAkD;AAChD,UAAIjC,UAAU,GAAG,KAAKC,UAAL,CAAgBjB,IAAhB,EAAsB,CAAtB,EAAyBe,CAAzB,CAAjB;AACAC,MAAAA,UAAU,CAACb,UAAX,CAAsBwB,SAAtB,GAAkC,MAAlC;AACAZ,MAAAA,CAAC,GAAGC,UAAU,CAACb,UAAX,CAAsBP,IAAtB,CAA2BsB,IAA/B;AACAJ,MAAAA,KAAK,GAAG8C,IAAI,CAACC,GAAL,CAAS/C,KAAT,EAAgBE,UAAU,CAACb,UAAX,CAAsBP,IAAtB,CAA2BkB,KAA3C,CAAR;AACAT,MAAAA,QAAQ,CAACH,IAAT,CAAcc,UAAd;AACD,KAb8B,CAe/B;;;AACA,QAAI,KAAKnC,UAAL,CAAgB4G,IAAhB,CAAqBK,KAArB,CAA2B9G,SAA/B,EAA0C;AACxC,UAAIY,IAAI,GAAG,IAAIuB,IAAJ,CAAS,CAAT,EAAYJ,CAAZ,EAAeD,KAAK,IAAI,KAAKH,WAAL,CAAiBE,WAAjB,CAA6BC,KAArD,EAA4DT,QAAQ,CAACqE,MAAT,KAAoB,CAApB,GAAwB,KAAK/D,WAAL,CAAiBE,WAAjB,CAA6B+B,MAArD,GAA8D,EAA1H,CAAX;AACA,UAAIxB,MAAM,GAAG,IAAIC,UAAJ,CAAe,QAAf,EAAyB,QAAzB,EAAmCzB,IAAnC,CAAb;AACAwB,MAAAA,MAAM,CAACO,SAAP,GAAmB,MAAnB;AACAP,MAAAA,MAAM,CAACb,QAAP,GAAkBF,QAAQ,CAACqE,MAAT,KAAoB,CAAtC;AACA,WAAKhG,WAAL,CAAiB4C,GAAjB,CAAqB,QAArB,EAA+BF,MAA/B;AACAf,MAAAA,QAAQ,CAACH,IAAT,CAAc;AAACC,QAAAA,UAAU,EAAEiB;AAAb,OAAd;AACAL,MAAAA,CAAC,GAAGK,MAAM,CAACxB,IAAP,CAAYsB,IAAhB;AACAJ,MAAAA,KAAK,GAAG8C,IAAI,CAACC,GAAL,CAAS/C,KAAT,EAAgBlB,IAAI,CAACkB,KAArB,CAAR;AACD,KATD,MASO,IAAIT,QAAQ,CAACqE,MAAT,KAAoB,CAAxB,EAA2B;AAChC,UAAI9E,IAAI,GAAG,IAAIuB,IAAJ,CAAS,CAAT,EAAYJ,CAAZ,EAAe,KAAKJ,WAAL,CAAiBE,WAAjB,CAA6BC,KAA5C,EAAmD,KAAKH,WAAL,CAAiBE,WAAjB,CAA6B+B,MAAhF,CAAX;AACA,UAAI8E,KAAK,GAAG,IAAIrG,UAAJ,CAAe,OAAf,EAAwB,OAAxB,EAAiCzB,IAAjC,CAAZ;AACA8H,MAAAA,KAAK,CAAC/F,SAAN,GAAkB,MAAlB;AACA+F,MAAAA,KAAK,CAACnH,QAAN,GAAiB,IAAjB;AACA,WAAK7B,WAAL,CAAiB4C,GAAjB,CAAqB,OAArB,EAA8BoG,KAA9B;AACArH,MAAAA,QAAQ,CAACH,IAAT,CAAc;AAACC,QAAAA,UAAU,EAAEuH;AAAb,OAAd;AACA3G,MAAAA,CAAC,GAAG2G,KAAK,CAAC9H,IAAN,CAAWsB,IAAf;AACAJ,MAAAA,KAAK,GAAG8C,IAAI,CAACC,GAAL,CAAS/C,KAAT,EAAgBlB,IAAI,CAACkB,KAArB,CAAR;AACD;;AAEDlB,IAAAA,IAAI,CAACkB,KAAL,GAAaA,KAAb;AACAlB,IAAAA,IAAI,CAACgD,MAAL,GAAc7B,CAAC,GAAGiC,MAAlB;AAEA,SAAKtE,WAAL,CAAiB4C,GAAjB,CAAqB,MAArB,EAA6BnB,UAA7B;AAEA,WAAO;AACLA,MAAAA,UADK;AAELE,MAAAA;AAFK,KAAP;AAID;;AAEDqB,EAAAA,SAAS,CAAC1B,IAAD,EAAqBwB,CAArB,EAAgCT,CAAhC,EAAuD;AAC9D,YAAQf,IAAI,CAACmC,IAAb;AACE,WAAK,WAAL;AACE,eAAO,KAAK2E,cAAL,CAAoB9G,IAApB,EAA0BwB,CAA1B,EAA6BT,CAA7B,CAAP;;AACF,WAAK,MAAL;AACE,eAAO,KAAK4G,QAAL,CAAc3H,IAAd,EAAoBwB,CAApB,EAAuBT,CAAvB,CAAP;;AACF,WAAK,QAAL;AACA,WAAK,aAAL;AACE,eAAO,KAAKyG,WAAL,CAAiBxH,IAAjB,EAAuBwB,CAAvB,EAA0BT,CAA1B,CAAP;;AACF,WAAK,MAAL;AACE,eAAO,KAAK6G,SAAL,CAAe5H,IAAf,EAAqBwB,CAArB,EAAwBT,CAAxB,CAAP;;AACF;AACE,cAAM,IAAI2F,KAAJ,CAAU,uBAAuB1G,IAAI,CAACmC,IAAtC,CAAN;AAXJ;AAaD;;AAEDwF,EAAAA,QAAQ,CAAC3H,IAAD,EAAqBwB,CAArB,EAAgCT,CAAhC,EAAuD;AAC7D,QAAInB,IAAI,GAAG,IAAIuB,IAAJ,CAASK,CAAT,EAAYT,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX;AACA,QAAIZ,UAAU,GAAG,IAAIkB,UAAJ,CAAe,KAAf,EAAsBrB,IAAI,CAACP,GAA3B,EAAgCG,IAAhC,CAAjB;AAEA,QAAIS,QAAsB,GAAG,EAA7B;AACA,QAAIuC,MAAM,GAAG,CAAb;;AACA,SAAK,IAAId,KAAT,IAAkB9B,IAAI,CAACiD,UAAvB,EAAmC;AACjC,UAAIjC,UAAU,GAAG,KAAKC,UAAL,CAAgBa,KAAhB,EAAuBN,CAAvB,EAA0BT,CAA1B,CAAjB;AACAS,MAAAA,CAAC,GAAGR,UAAU,CAACb,UAAX,CAAsBP,IAAtB,CAA2BqH,IAA/B;AACArE,MAAAA,MAAM,GAAGgB,IAAI,CAACC,GAAL,CAASjB,MAAT,EAAiB5B,UAAU,CAACb,UAAX,CAAsBP,IAAtB,CAA2BgD,MAA5C,CAAT;AACAvC,MAAAA,QAAQ,CAACH,IAAT,CAAcc,UAAd;AACD;;AAED,SAAKkG,eAAL,CAAqB7G,QAArB,EAA+BuC,MAA/B;AAEAhD,IAAAA,IAAI,CAACkB,KAAL,GAAaU,CAAb;AACA5B,IAAAA,IAAI,CAACgD,MAAL,GAAcA,MAAM,GAAG,CAAvB,CAhB6D,CAgBnC;;AAE1B,WAAO;AACLzC,MAAAA,UADK;AAELE,MAAAA;AAFK,KAAP;AAID;;AAEDuH,EAAAA,SAAS,CAAC5H,IAAD,EAAqBwB,CAArB,EAAgCT,CAAhC,EAAuD;AAAA;;AAC9D,QAAID,KAAK,GAAG,KAAKsG,cAAL,CAAoBpH,IAApB,CAAZ;AACA,QAAI;AAAC4C,MAAAA,MAAD;AAASL,MAAAA;AAAT,QAAwB,KAAK+E,kBAAL,CAAwBtH,IAAxB,EAA8Bc,KAA9B,EAAqC,KAAK1C,SAA1C,EAAqD,KAAKC,kBAA1D,CAA5B;AACA,QAAIuB,IAAI,GAAG,IAAIuB,IAAJ,CAASK,CAAT,EAAYT,CAAZ,EAAeD,KAAf,EAAsB8B,MAAtB,CAAX;AACA,QAAIzC,UAAU,GAAG,IAAIkB,UAAJ,CAAerB,IAAI,CAACmC,IAApB,EAA0BnC,IAAI,CAACP,GAA/B,EAAoCG,IAApC,CAAjB;AACAO,IAAAA,UAAU,CAACI,QAAX,mBAAsBP,IAAI,CAAC8F,KAA3B,qBAAsB,aAAYI,eAAlC;AACA/F,IAAAA,UAAU,CAACsH,MAAX,GAAoBtH,UAAU,CAACI,QAAX,GAAsB,CAAtB,GAA0B,CAA9C;AACAJ,IAAAA,UAAU,CAAC0C,aAAX,GAA2BN,WAA3B;AAEA,WAAO;AACLpC,MAAAA;AADK,KAAP;AAGD;;AAEDR,EAAAA,qBAAqB,CAACC,IAAD,EAAa;AAChC,QAAIC,GAAiB,GAAG,EAAxB;;AAEA,SAAK,IAAIG,IAAT,IAAiB,KAAKb,SAAtB,EAAiC;AAC/BU,MAAAA,GAAG,CAACK,IAAJ,CAASF,IAAI,CAACG,UAAd;AACA,WAAK0H,qBAAL,CAA2BhI,GAA3B,EAAgCG,IAAhC,EAAsCJ,IAAtC;AACD;;AAED,WAAOC,GAAP;AACD;;AAEDgI,EAAAA,qBAAqB,CAAChI,GAAD,EAAoBG,IAApB,EAAsCJ,IAAtC,EAAkD;AACrE,QAAI,CAACI,IAAI,CAACK,QAAN,IAAkBL,IAAI,CAACK,QAAL,CAAcqE,MAAd,KAAyB,CAA/C,EAAkD;AAChD;AACD;;AAED,YAAQ1E,IAAI,CAACG,UAAL,CAAgBgC,IAAxB;AACE,WAAK,QAAL;AAAe;AACb,eAAK,IAAIL,KAAT,IAAkB9B,IAAI,CAACK,QAAvB,EAAiC;AAC/BR,YAAAA,GAAG,CAACK,IAAJ,CAAS4B,KAAK,CAAC3B,UAAf;AACA,iBAAK0H,qBAAL,CAA2BhI,GAA3B,EAAgCiC,KAAhC,EAAuClC,IAAvC;AACD;;AACD;AACD;;AACD,WAAK,UAAL;AAAiB;AACf,cAAIkI,eAAe,GAAG,KAAKC,YAAL,CAAkB/H,IAAI,CAACK,QAAvB,EAAiCT,IAAI,CAACoI,OAAtC,EAA+C,GAA/C,CAAtB;AACA,cAAIC,cAAc,GAAG,KAAKF,YAAL,CAAkB/H,IAAI,CAACK,QAAvB,EAAiCT,IAAI,CAACsI,WAAtC,EAAmD,GAAnD,CAArB;;AACA,eAAK,IAAI5C,CAAC,GAAGwC,eAAb,EAA8BxC,CAAC,IAAI2C,cAAnC,EAAmD3C,CAAC,EAApD,EAAwD;AACtDzF,YAAAA,GAAG,CAACK,IAAJ,CAASF,IAAI,CAACK,QAAL,CAAciF,CAAd,EAAiBnF,UAA1B;AACA,iBAAK0H,qBAAL,CAA2BhI,GAA3B,EAAgCG,IAAI,CAACK,QAAL,CAAciF,CAAd,CAAhC,EAAkD1F,IAAlD;AACD;;AACD;AACD;;AACD,WAAK,WAAL;AACA,WAAK,KAAL;AAAY;AACV,cAAIuI,gBAAgB,GAAG,KAAKJ,YAAL,CAAkB/H,IAAI,CAACK,QAAvB,EAAiCT,IAAI,CAACoI,OAAtC,EAA+C,GAA/C,CAAvB;AACA,cAAII,eAAe,GAAG,KAAKL,YAAL,CAAkB/H,IAAI,CAACK,QAAvB,EAAiCT,IAAI,CAACyI,QAAtC,EAAgD,GAAhD,CAAtB;AACA,cAAIC,WAAW,GAAG,CAAlB;;AACA,eAAK,IAAIhD,CAAC,GAAG6C,gBAAb,EAA+B7C,CAAC,IAAI8C,eAApC,EAAqD9C,CAAC,EAAtD,EAA0D;AACxD;AACA;AACA,gBAAIgD,WAAW,GAAG,KAAKpD,mBAAL,CAAyBR,MAA3C,EAAmD;AACjD,kBAAI6D,GAAG,GAAG,KAAKrD,mBAAL,CAAyBoD,WAAzB,CAAV;;AACA,qBAAOC,GAAG,GAAGjD,CAAb,EAAgB;AACdzF,gBAAAA,GAAG,CAACK,IAAJ,CAASF,IAAI,CAACK,QAAL,CAAckI,GAAd,EAAmBpI,UAA5B;AACAoI,gBAAAA,GAAG,GAAG,KAAKrD,mBAAL,CAAyBoD,WAAW,EAApC,CAAN;AACD;AACF;;AAEDzI,YAAAA,GAAG,CAACK,IAAJ,CAASF,IAAI,CAACK,QAAL,CAAciF,CAAd,EAAiBnF,UAA1B;AACD;;AAED,iBAAOmI,WAAW,GAAG,KAAKpD,mBAAL,CAAyBR,MAA9C,EAAsD;AACpD,gBAAI6D,GAAG,GAAG,KAAKrD,mBAAL,CAAyBoD,WAAW,EAApC,CAAV;AACAzI,YAAAA,GAAG,CAACK,IAAJ,CAASF,IAAI,CAACK,QAAL,CAAckI,GAAd,EAAmBpI,UAA5B;AACD;;AACD;AACD;;AACD;AACE,cAAM,IAAIuG,KAAJ,CAAU,uBAAuB1G,IAAI,CAACG,UAAL,CAAgBgC,IAAjD,CAAN;AA3CJ;AA6CD;;AAED4F,EAAAA,YAAY,CAACS,KAAD,EAAsBC,KAAtB,EAAoCC,IAApC,EAAqD;AAC/D,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,IAAI,GAAGJ,KAAK,CAAC9D,MAAN,GAAe,CAA1B;;AACA,WAAOiE,GAAG,IAAIC,IAAd,EAAoB;AAClB,UAAIC,GAAG,GAAIF,GAAG,GAAGC,IAAP,IAAgB,CAA1B;AACA,UAAIrF,IAAI,GAAGiF,KAAK,CAACK,GAAD,CAAhB;;AAEA,UAAKH,IAAI,KAAK,GAAT,IAAgBnF,IAAI,CAACpD,UAAL,CAAgBP,IAAhB,CAAqBqH,IAArB,GAA4BwB,KAAK,CAACjH,CAAnD,IAA0DkH,IAAI,KAAK,GAAT,IAAgBnF,IAAI,CAACpD,UAAL,CAAgBP,IAAhB,CAAqBsB,IAArB,GAA4BuH,KAAK,CAAC1H,CAAhH,EAAoH;AAClH4H,QAAAA,GAAG,GAAGE,GAAG,GAAG,CAAZ;AACD,OAFD,MAEO,IAAKH,IAAI,KAAK,GAAT,IAAgBnF,IAAI,CAACpD,UAAL,CAAgBP,IAAhB,CAAqB4B,CAArB,GAAyBiH,KAAK,CAACjH,CAAhD,IAAuDkH,IAAI,KAAK,GAAT,IAAgBnF,IAAI,CAACpD,UAAL,CAAgBP,IAAhB,CAAqBmB,CAArB,GAAyB0H,KAAK,CAAC1H,CAA1G,EAA8G;AACnH6H,QAAAA,IAAI,GAAGC,GAAG,GAAG,CAAb;AACD,OAFM,MAEA;AACL,eAAOA,GAAP;AACD;AACF;;AAED,WAAOjF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACK,GAAL,CAASuE,KAAK,CAAC9D,MAAN,GAAe,CAAxB,EAA2BiE,GAA3B,CAAZ,CAAP;AACD;;AAxX+C","sources":["./packages/@react-stately/layout/src/ListLayout.ts","./packages/@react-stately/layout/src/TableLayout.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {InvalidationContext, Layout, LayoutInfo, Rect, Size} from '@react-stately/virtualizer';\nimport {Key} from 'react';\n// import { DragTarget, DropTarget, DropPosition } from '@react-types/shared';\n\ntype ListLayoutOptions<T> = {\n  /** The height of a row in px. */\n  rowHeight?: number,\n  estimatedRowHeight?: number,\n  headingHeight?: number,\n  estimatedHeadingHeight?: number,\n  padding?: number,\n  indentationForItem?: (collection: Collection<Node<T>>, key: Key) => number,\n  collator?: Intl.Collator\n};\n\n// A wrapper around LayoutInfo that supports heirarchy\nexport interface LayoutNode {\n  layoutInfo: LayoutInfo,\n  header?: LayoutInfo,\n  children?: LayoutNode[]\n}\n\nconst DEFAULT_HEIGHT = 48;\n\n/**\n * The ListLayout class is an implementation of a collection view {@link Layout}\n * it is used for creating lists and lists with indented sub-lists.\n *\n * To configure a ListLayout, you can use the properties to define the\n * layouts and/or use the method for defining indentation.\n * The {@link ListKeyboardDelegate} extends the existing collection view\n * delegate with an additional method to do this (it uses the same delegate object as\n * the collection view itself).\n */\nexport class ListLayout<T> extends Layout<Node<T>> implements KeyboardDelegate {\n  protected rowHeight: number;\n  protected estimatedRowHeight: number;\n  protected headingHeight: number;\n  protected estimatedHeadingHeight: number;\n  protected padding: number;\n  protected indentationForItem?: (collection: Collection<Node<T>>, key: Key) => number;\n  protected layoutInfos: Map<Key, LayoutInfo>;\n  protected layoutNodes: Map<Key, LayoutNode>;\n  protected contentSize: Size;\n  collection: Collection<Node<T>>;\n  disabledKeys: Set<Key> = new Set();\n  isLoading: boolean;\n  protected lastWidth: number;\n  protected lastCollection: Collection<Node<T>>;\n  protected rootNodes: LayoutNode[];\n  protected collator: Intl.Collator;\n  protected cache: WeakMap<Node<T>, LayoutNode> = new WeakMap();\n\n  /**\n   * Creates a new ListLayout with options. See the list of properties below for a description\n   * of the options that can be provided.\n   */\n  constructor(options: ListLayoutOptions<T> = {}) {\n    super();\n    this.rowHeight = options.rowHeight;\n    this.estimatedRowHeight = options.estimatedRowHeight;\n    this.headingHeight = options.headingHeight;\n    this.estimatedHeadingHeight = options.estimatedHeadingHeight;\n    this.padding = options.padding || 0;\n    this.indentationForItem = options.indentationForItem;\n    this.collator = options.collator;\n    this.layoutInfos = new Map();\n    this.layoutNodes = new Map();\n    this.rootNodes = [];\n    this.lastWidth = 0;\n    this.lastCollection = null;\n  }\n\n  getLayoutInfo(key: Key) {\n    return this.layoutInfos.get(key);\n  }\n\n  getVisibleLayoutInfos(rect: Rect) {\n    let res: LayoutInfo[] = [];\n\n    let addNodes = (nodes: LayoutNode[]) => {\n      for (let node of nodes) {\n        if (this.isVisible(node, rect)) {\n          res.push(node.layoutInfo);\n          if (node.header) {\n            res.push(node.header);\n          }\n\n          if (node.children) {\n            addNodes(node.children);\n          }\n        }\n      }\n    };\n\n    addNodes(this.rootNodes);\n    return res;\n  }\n\n  isVisible(node: LayoutNode, rect: Rect) {\n    return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky;\n  }\n\n  validate(invalidationContext: InvalidationContext<Node<T>, unknown>) {\n    // Invalidate cache if the size of the collection changed.\n    // In this case, we need to recalculate the entire layout.\n    if (invalidationContext.sizeChanged) {\n      this.cache = new WeakMap();\n    }\n\n    this.collection = this.virtualizer.collection;\n    this.rootNodes = this.buildCollection();\n\n    this.lastWidth = this.virtualizer.visibleRect.width;\n    this.lastCollection = this.collection;\n  }\n\n  buildCollection(): LayoutNode[] {\n    let y = this.padding;\n    let nodes = [];\n    for (let node of this.collection) {\n      let layoutNode = this.buildChild(node, 0, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      nodes.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      let rect = new Rect(0, y, this.virtualizer.visibleRect.width, 40);\n      let loader = new LayoutInfo('loader', 'loader', rect);\n      this.layoutInfos.set('loader', loader);\n      nodes.push({layoutInfo: loader});\n      y = loader.rect.maxY;\n    }\n\n    this.contentSize = new Size(this.virtualizer.visibleRect.width, y + this.padding);\n    return nodes;\n  }\n\n  buildChild(node: Node<T>, x: number, y: number): LayoutNode {\n    let cached = this.cache.get(node);\n    if (cached && y === (cached.header || cached.layoutInfo).rect.y) {\n      return cached;\n    }\n\n    let layoutNode = this.buildNode(node, x, y);\n\n    layoutNode.layoutInfo.parentKey = node.parentKey || null;\n    this.layoutInfos.set(layoutNode.layoutInfo.key, layoutNode.layoutInfo);\n    if (layoutNode.header) {\n      this.layoutInfos.set(layoutNode.header.key, layoutNode.header);\n    }\n\n    // Remove deleted child layout nodes from key mapping.\n    let prev = this.layoutNodes.get(node.key);\n    if (prev) {\n      let childKeys = new Set();\n      if (layoutNode.children) {\n        for (let child of layoutNode.children) {\n          childKeys.add(child.layoutInfo.key);\n        }\n      }\n\n      if (prev.children) {\n        for (let child of prev.children) {\n          if (!childKeys.has(child.layoutInfo.key)) {\n            this.removeLayoutNode(child);\n          }\n        }\n      }\n    }\n\n    this.layoutNodes.set(node.key, layoutNode);\n    this.cache.set(node, layoutNode);\n    return layoutNode;\n  }\n\n  removeLayoutNode(layoutNode: LayoutNode) {\n    this.layoutNodes.delete(layoutNode.layoutInfo.key);\n\n    this.layoutInfos.delete(layoutNode.layoutInfo.key);\n    if (layoutNode.header) {\n      this.layoutInfos.delete(layoutNode.header.key);\n    }\n\n    if (layoutNode.children) {\n      for (let child of layoutNode.children) {\n        if (this.layoutNodes.get(child.layoutInfo.key) === child) {\n          this.removeLayoutNode(child);\n        }\n      }\n    }\n  }\n\n  buildNode(node: Node<T>, x: number, y: number): LayoutNode {\n    switch (node.type) {\n      case 'section':\n        return this.buildSection(node, x, y);\n      case 'item':\n        return this.buildItem(node, x, y);\n    }\n  }\n\n  buildSection(node: Node<T>, x: number, y: number): LayoutNode {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.headingHeight;\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (rectHeight == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode && previousLayoutNode.header) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        rectHeight = previousLayoutNode.header.rect.height;\n        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.header.estimatedSize;\n      } else {\n        rectHeight = (node.rendered ? this.estimatedHeadingHeight : 0);\n        isEstimated = true;\n      }\n    }\n\n    if (rectHeight == null) {\n      rectHeight = DEFAULT_HEIGHT;\n    }\n\n    let headerRect = new Rect(0, y, width, rectHeight);\n    let header = new LayoutInfo('header', node.key + ':header', headerRect);\n    header.estimatedSize = isEstimated;\n    header.parentKey = node.key;\n    y += header.rect.height;\n\n    let rect = new Rect(0, y, width, 0);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n\n    let startY = y;\n    let children = [];\n    for (let child of node.childNodes) {\n      let layoutNode = this.buildChild(child, x, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      children.push(layoutNode);\n    }\n\n    rect.height = y - startY;\n\n    return {\n      header,\n      layoutInfo,\n      children\n    };\n  }\n\n  buildItem(node: Node<T>, x: number, y: number): LayoutNode {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.rowHeight;\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (rectHeight == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        rectHeight = previousLayoutNode.layoutInfo.rect.height;\n        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.layoutInfo.estimatedSize;\n      } else {\n        rectHeight = this.estimatedRowHeight;\n        isEstimated = true;\n      }\n    }\n\n    if (rectHeight == null) {\n      rectHeight = DEFAULT_HEIGHT;\n    }\n\n    if (typeof this.indentationForItem === 'function') {\n      x += this.indentationForItem(this.collection, node.key) || 0;\n    }\n\n    let rect = new Rect(x, y, width - x, rectHeight);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.estimatedSize = isEstimated;\n    return {\n      layoutInfo\n    };\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    let layoutInfo = this.layoutInfos.get(key);\n    layoutInfo.estimatedSize = false;\n    if (layoutInfo.rect.height !== size.height) {\n      layoutInfo.rect.height = size.height;\n\n      // Invalidate layout for this layout node and all parents\n      this.cache.delete(this.collection.getItem(key));\n\n      let node = this.collection.getItem(layoutInfo.parentKey);\n      while (node) {\n        this.cache.delete(this.collection.getItem(node.key));\n        node = this.collection.getItem(node.parentKey);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  getContentSize() {\n    return this.contentSize;\n  }\n\n  getKeyAbove(key: Key) {\n    let collection = this.collection;\n\n    key = collection.getKeyBefore(key);\n    while (key) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyBefore(key);\n    }\n  }\n\n  getKeyBelow(key: Key) {\n    let collection = this.collection;\n\n    key = collection.getKeyAfter(key);\n    while (key) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyPageAbove(key: Key) {\n    let layoutInfo = this.getLayoutInfo(key);\n    let pageY = Math.max(0, layoutInfo.rect.y + layoutInfo.rect.height - this.virtualizer.visibleRect.height);\n    while (layoutInfo && layoutInfo.rect.y > pageY && layoutInfo) {\n      let keyAbove = this.getKeyAbove(layoutInfo.key);\n      layoutInfo = this.getLayoutInfo(keyAbove);\n    }\n\n    if (layoutInfo) {\n      return layoutInfo.key;\n    }\n\n    return this.getFirstKey();\n  }\n\n  getKeyPageBelow(key: Key) {\n    let layoutInfo = this.getLayoutInfo(key);\n    let pageY = Math.min(this.virtualizer.contentSize.height, layoutInfo.rect.y - layoutInfo.rect.height + this.virtualizer.visibleRect.height);\n    while (layoutInfo && layoutInfo.rect.y < pageY) {\n      let keyBelow = this.getKeyBelow(layoutInfo.key);\n      layoutInfo = this.getLayoutInfo(keyBelow);\n    }\n\n    if (layoutInfo) {\n      return layoutInfo.key;\n    }\n\n    return this.getLastKey();\n  }\n\n  getFirstKey() {\n    let collection = this.collection;\n    let key = collection.getFirstKey();\n    while (key) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let collection = this.collection;\n    let key = collection.getLastKey();\n    while (key) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyBefore(key);\n    }\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n\n  // getDragTarget(point: Point): DragTarget {\n  //   let visible = this.getVisibleLayoutInfos(new Rect(point.x, point.y, 1, 1));\n  //   if (visible.length > 0) {\n  //     visible = visible.sort((a, b) => b.zIndex - a.zIndex);\n  //     return {\n  //       type: 'item',\n  //       key: visible[0].key\n  //     };\n  //   }\n\n  //   return null;\n  // }\n\n  // getDropTarget(point: Point): DropTarget {\n  //   let key = this.virtualizer.keyAtPoint(point);\n  //   if (key) {\n  //     return {\n  //       type: 'item',\n  //       key,\n  //       dropPosition: DropPosition.ON\n  //     };\n  //   }\n\n  //   return null;\n  // }\n\n  getInitialLayoutInfo(layoutInfo: LayoutInfo) {\n    layoutInfo.opacity = 0;\n    layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n    return layoutInfo;\n  }\n\n  getFinalLayoutInfo(layoutInfo: LayoutInfo) {\n    layoutInfo.opacity = 0;\n    layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ColumnProps, TableCollection, TableNode} from '@react-types/table';\nimport {Key} from 'react';\nimport {LayoutInfo, Point, Rect, Size} from '@react-stately/virtualizer';\nimport {LayoutNode, ListLayout} from './ListLayout';\n\nexport class TableLayout<T> extends ListLayout<T> {\n  collection: TableCollection<T>;\n  lastCollection: TableCollection<T>;\n  columnWidths: Map<Key, number>;\n  stickyColumnIndices: number[];\n\n  buildCollection(): LayoutNode[] {\n    // If columns changed, clear layout cache.\n    if (\n      !this.lastCollection ||\n      this.collection.columns.length !== this.lastCollection.columns.length ||\n      this.collection.columns.some((c, i) => c.key !== this.lastCollection.columns[i].key)\n    ) {\n      this.cache = new WeakMap();\n    }\n\n    this.buildColumnWidths();\n    let header = this.buildHeader();\n    let body = this.buildBody(0);\n    body.layoutInfo.rect.width = Math.max(header.layoutInfo.rect.width, body.layoutInfo.rect.width);\n    this.contentSize = new Size(body.layoutInfo.rect.width, body.layoutInfo.rect.maxY);\n    return [\n      header,\n      body\n    ];\n  }\n\n  buildColumnWidths() {\n    this.columnWidths = new Map();\n    this.stickyColumnIndices = [];\n\n    // Pass 1: set widths for all explicitly defined columns.\n    let remainingColumns = new Set<TableNode<T>>();\n    let remainingSpace = this.virtualizer.visibleRect.width;\n    for (let column of this.collection.columns) {\n      let props = column.props as ColumnProps<T>;\n      let width = props.width ?? props.defaultWidth;\n      if (width != null) {\n        let w = this.parseWidth(width);\n        this.columnWidths.set(column.key, w);\n        remainingSpace -= w;\n      } else {\n        remainingColumns.add(column);\n      }\n\n      // The selection cell and any other sticky columns always need to be visible.\n      // In addition, row headers need to be in the DOM for accessibility labeling.\n      if (column.props.isSelectionCell || this.collection.rowHeaderColumnKeys.has(column.key)) {\n        this.stickyColumnIndices.push(column.index);\n      }\n    }\n\n    // Pass 2: if there are remaining columns, then distribute the remaining space evenly.\n    if (remainingColumns.size > 0) {\n      let columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n\n      for (let column of remainingColumns) {\n        let props = column.props as ColumnProps<T>;\n        let minWidth = props.minWidth != null ? this.parseWidth(props.minWidth) : 75;\n        let maxWidth = props.maxWidth != null ? this.parseWidth(props.maxWidth) : Infinity;\n        let width = Math.max(minWidth, Math.min(maxWidth, columnWidth));\n\n        this.columnWidths.set(column.key, width);\n        remainingSpace -= width;\n        if (width !== columnWidth) {\n          columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n        }\n      }\n    }\n  }\n\n  parseWidth(width: number | string): number {\n    if (typeof width === 'string') {\n      let match = width.match(/^(\\d+)%$/);\n      if (!match) {\n        throw new Error('Only percentages are supported as column widths');\n      }\n\n      return this.virtualizer.visibleRect.width * (parseInt(match[1], 10) / 100);\n    }\n\n    return width;\n  }\n\n  buildHeader(): LayoutNode {\n    let rect = new Rect(0, 0, 0, 0);\n    let layoutInfo = new LayoutInfo('header', 'header', rect);\n\n    let y = 0;\n    let width = 0;\n    let children: LayoutNode[] = [];\n    for (let headerRow of this.collection.headerRows) {\n      let layoutNode = this.buildChild(headerRow, 0, y);\n      layoutNode.layoutInfo.parentKey = 'header';\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      children.push(layoutNode);\n    }\n\n    rect.width = width;\n    rect.height = y;\n\n    this.layoutInfos.set('header', layoutInfo);\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildHeaderRow(headerRow: TableNode<T>, x: number, y: number) {\n    let rect = new Rect(0, y, 0, 0);\n    let row = new LayoutInfo('headerrow', headerRow.key, rect);\n\n    let height = 0;\n    let columns: LayoutNode[] = [];\n    for (let cell of headerRow.childNodes) {\n      let layoutNode = this.buildChild(cell, x, y);\n      layoutNode.layoutInfo.parentKey = row.key;\n      x = layoutNode.layoutInfo.rect.maxX;\n      height = Math.max(height, layoutNode.layoutInfo.rect.height);\n      columns.push(layoutNode);\n    }\n\n    this.setChildHeights(columns, height);\n\n    rect.height = height;\n    rect.width = x;\n\n    return {\n      layoutInfo: row,\n      children: columns\n    };\n  }\n\n  setChildHeights(children: LayoutNode[], height: number) {\n    for (let child of children) {\n      if (child.layoutInfo.rect.height !== height) {\n        // Need to copy the layout info before we mutate it.\n        child.layoutInfo = child.layoutInfo.copy();\n        this.layoutInfos.set(child.layoutInfo.key, child.layoutInfo);\n\n        child.layoutInfo.rect.height = height;\n      }\n    }\n  }\n\n  getColumnWidth(node: TableNode<T>) {\n    let colspan = node.colspan ?? 1;\n    let width = 0;\n    for (let i = 0; i < colspan; i++) {\n      let column = this.collection.columns[node.index + i];\n      width += this.columnWidths.get(column.key);\n    }\n\n    return width;\n  }\n\n  getEstimatedHeight(node: TableNode<T>, width: number, height: number, estimatedHeight: number) {\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (height == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        height = previousLayoutNode.layoutInfo.rect.height;\n        isEstimated = curNode !== lastNode || width !== previousLayoutNode.layoutInfo.rect.width || previousLayoutNode.layoutInfo.estimatedSize;\n      } else {\n        height = estimatedHeight;\n        isEstimated = true;\n      }\n    }\n\n    return {height, isEstimated};\n  }\n\n  buildColumn(node: TableNode<T>, x: number, y: number): LayoutNode {\n    let width = this.getColumnWidth(node);\n    let {height, isEstimated} = this.getEstimatedHeight(node, width, this.headingHeight, this.estimatedHeadingHeight);\n    let rect = new Rect(x, y, width, height);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = node.props?.isSelectionCell;\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n\n    return {\n      layoutInfo\n    };\n  }\n\n  buildBody(y: number): LayoutNode {\n    let rect = new Rect(0, y, 0, 0);\n    let layoutInfo = new LayoutInfo('rowgroup', 'body', rect);\n\n    let startY = y;\n    let width = 0;\n    let children: LayoutNode[] = [];\n    for (let node of this.collection.body.childNodes) {\n      let layoutNode = this.buildChild(node, 0, y);\n      layoutNode.layoutInfo.parentKey = 'body';\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      children.push(layoutNode);\n    }\n\n    // TODO: not show the spinner at the bottom when sorting?\n    if (this.collection.body.props.isLoading) {\n      let rect = new Rect(0, y, width || this.virtualizer.visibleRect.width, children.length === 0 ? this.virtualizer.visibleRect.height : 60);\n      let loader = new LayoutInfo('loader', 'loader', rect);\n      loader.parentKey = 'body';\n      loader.isSticky = children.length === 0;\n      this.layoutInfos.set('loader', loader);\n      children.push({layoutInfo: loader});\n      y = loader.rect.maxY;\n      width = Math.max(width, rect.width);\n    } else if (children.length === 0) {\n      let rect = new Rect(0, y, this.virtualizer.visibleRect.width, this.virtualizer.visibleRect.height);\n      let empty = new LayoutInfo('empty', 'empty', rect);\n      empty.parentKey = 'body';\n      empty.isSticky = true;\n      this.layoutInfos.set('empty', empty);\n      children.push({layoutInfo: empty});\n      y = empty.rect.maxY;\n      width = Math.max(width, rect.width);\n    }\n\n    rect.width = width;\n    rect.height = y - startY;\n\n    this.layoutInfos.set('body', layoutInfo);\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildNode(node: TableNode<T>, x: number, y: number): LayoutNode {\n    switch (node.type) {\n      case 'headerrow':\n        return this.buildHeaderRow(node, x, y);\n      case 'item':\n        return this.buildRow(node, x, y);\n      case 'column':\n      case 'placeholder':\n        return this.buildColumn(node, x, y);\n      case 'cell':\n        return this.buildCell(node, x, y);\n      default:\n        throw new Error('Unknown node type ' + node.type);\n    }\n  }\n\n  buildRow(node: TableNode<T>, x: number, y: number): LayoutNode {\n    let rect = new Rect(x, y, 0, 0);\n    let layoutInfo = new LayoutInfo('row', node.key, rect);\n\n    let children: LayoutNode[] = [];\n    let height = 0;\n    for (let child of node.childNodes) {\n      let layoutNode = this.buildChild(child, x, y);\n      x = layoutNode.layoutInfo.rect.maxX;\n      height = Math.max(height, layoutNode.layoutInfo.rect.height);\n      children.push(layoutNode);\n    }\n\n    this.setChildHeights(children, height);\n\n    rect.width = x;\n    rect.height = height + 1; // +1 for bottom border\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildCell(node: TableNode<T>, x: number, y: number): LayoutNode {\n    let width = this.getColumnWidth(node);\n    let {height, isEstimated} = this.getEstimatedHeight(node, width, this.rowHeight, this.estimatedRowHeight);\n    let rect = new Rect(x, y, width, height);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = node.props?.isSelectionCell;\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n\n    return {\n      layoutInfo\n    };\n  }\n\n  getVisibleLayoutInfos(rect: Rect) {\n    let res: LayoutInfo[] = [];\n\n    for (let node of this.rootNodes) {\n      res.push(node.layoutInfo);\n      this.addVisibleLayoutInfos(res, node, rect);\n    }\n\n    return res;\n  }\n\n  addVisibleLayoutInfos(res: LayoutInfo[], node: LayoutNode, rect: Rect) {\n    if (!node.children || node.children.length === 0) {\n      return;\n    }\n\n    switch (node.layoutInfo.type) {\n      case 'header': {\n        for (let child of node.children) {\n          res.push(child.layoutInfo);\n          this.addVisibleLayoutInfos(res, child, rect);\n        }\n        break;\n      }\n      case 'rowgroup': {\n        let firstVisibleRow = this.binarySearch(node.children, rect.topLeft, 'y');\n        let lastVisibleRow = this.binarySearch(node.children, rect.bottomRight, 'y');\n        for (let i = firstVisibleRow; i <= lastVisibleRow; i++) {\n          res.push(node.children[i].layoutInfo);\n          this.addVisibleLayoutInfos(res, node.children[i], rect);\n        }\n        break;\n      }\n      case 'headerrow':\n      case 'row': {\n        let firstVisibleCell = this.binarySearch(node.children, rect.topLeft, 'x');\n        let lastVisibleCell = this.binarySearch(node.children, rect.topRight, 'x');\n        let stickyIndex = 0;\n        for (let i = firstVisibleCell; i <= lastVisibleCell; i++) {\n          // Sticky columns and row headers are always in the DOM. Interleave these\n          // with the visible range so that they are in the right order.\n          if (stickyIndex < this.stickyColumnIndices.length) {\n            let idx = this.stickyColumnIndices[stickyIndex];\n            while (idx < i) {\n              res.push(node.children[idx].layoutInfo);\n              idx = this.stickyColumnIndices[stickyIndex++];\n            }\n          }\n\n          res.push(node.children[i].layoutInfo);\n        }\n\n        while (stickyIndex < this.stickyColumnIndices.length) {\n          let idx = this.stickyColumnIndices[stickyIndex++];\n          res.push(node.children[idx].layoutInfo);\n        }\n        break;\n      }\n      default:\n        throw new Error('Unknown node type ' + node.layoutInfo.type);\n    }\n  }\n\n  binarySearch(items: LayoutNode[], point: Point, axis: 'x' | 'y') {\n    let low = 0;\n    let high = items.length - 1;\n    while (low <= high) {\n      let mid = (low + high) >> 1;\n      let item = items[mid];\n\n      if ((axis === 'x' && item.layoutInfo.rect.maxX < point.x) || (axis === 'y' && item.layoutInfo.rect.maxY < point.y)) {\n        low = mid + 1;\n      } else if ((axis === 'x' && item.layoutInfo.rect.x > point.x) || (axis === 'y' && item.layoutInfo.rect.y > point.y)) {\n        high = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n\n    return Math.max(0, Math.min(items.length - 1, low));\n  }\n}\n"],"names":["DEFAULT_HEIGHT","ListLayout","Layout","constructor","options","rowHeight","estimatedRowHeight","headingHeight","estimatedHeadingHeight","padding","indentationForItem","layoutInfos","layoutNodes","contentSize","collection","disabledKeys","Set","isLoading","lastWidth","lastCollection","rootNodes","collator","cache","WeakMap","Map","getLayoutInfo","key","get","getVisibleLayoutInfos","rect","res","addNodes","nodes","node","isVisible","push","layoutInfo","header","children","intersects","isSticky","validate","invalidationContext","sizeChanged","virtualizer","buildCollection","visibleRect","width","y","layoutNode","buildChild","maxY","Rect","loader","LayoutInfo","set","Size","x","cached","buildNode","parentKey","prev","childKeys","child","add","has","removeLayoutNode","delete","type","buildSection","buildItem","rectHeight","isEstimated","previousLayoutNode","curNode","getItem","lastNode","height","estimatedSize","rendered","headerRect","startY","childNodes","updateItemSize","size","getContentSize","getKeyAbove","getKeyBefore","item","getKeyBelow","getKeyAfter","getKeyPageAbove","pageY","Math","max","keyAbove","getFirstKey","getKeyPageBelow","min","keyBelow","getLastKey","getKeyForSearch","search","fromKey","substring","textValue","slice","length","compare","getInitialLayoutInfo","opacity","transform","getFinalLayoutInfo","TableLayout","columnWidths","stickyColumnIndices","columns","some","c","i","buildColumnWidths","buildHeader","body","buildBody","remainingColumns","remainingSpace","column","props","defaultWidth","w","parseWidth","isSelectionCell","rowHeaderColumnKeys","index","columnWidth","minWidth","maxWidth","Infinity","match","Error","parseInt","headerRow","headerRows","buildHeaderRow","row","cell","maxX","setChildHeights","copy","getColumnWidth","colspan","getEstimatedHeight","estimatedHeight","buildColumn","zIndex","empty","buildRow","buildCell","addVisibleLayoutInfos","firstVisibleRow","binarySearch","topLeft","lastVisibleRow","bottomRight","firstVisibleCell","lastVisibleCell","topRight","stickyIndex","idx","items","point","axis","low","high","mid"],"version":3,"file":"main.js.map"}