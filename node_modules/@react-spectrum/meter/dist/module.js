import { useMeter } from "@react-aria/meter";
import _react from "react";
import { ProgressBarBase } from "@react-spectrum/progress";
import { classNames } from "@react-spectrum/utils";
import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import "./main.css";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/barloader/vars.css
var $eae5301468e7259fd99d852e67771$exports = {};
$eae5301468e7259fd99d852e67771$exports = {
  "spectrum-BarLoader": "_spectrum-BarLoader_c74d2",
  "spectrum-BarLoader-track": "_spectrum-BarLoader-track_c74d2",
  "spectrum-BarLoader-fill": "_spectrum-BarLoader-fill_c74d2",
  "spectrum-BarLoader-label": "_spectrum-BarLoader-label_c74d2",
  "spectrum-BarLoader-percentage": "_spectrum-BarLoader-percentage_c74d2",
  "spectrum-BarLoader--sideLabel": "_spectrum-BarLoader--sideLabel_c74d2",
  "spectrum-BarLoader--small": "_spectrum-BarLoader--small_c74d2",
  "spectrum-BarLoader--indeterminate": "_spectrum-BarLoader--indeterminate_c74d2",
  "indeterminate-loop-ltr": "_indeterminate-loop-ltr_c74d2",
  "indeterminate-loop-rtl": "_indeterminate-loop-rtl_c74d2",
  "spectrum-BarLoader--overBackground": "_spectrum-BarLoader--overBackground_c74d2",
  "is-positive": "_is-positive_c74d2",
  "is-warning": "_is-warning_c74d2",
  "is-critical": "_is-critical_c74d2"
};
var $eae5301468e7259fd99d852e67771$$interop$default = $parcel$interopDefault($eae5301468e7259fd99d852e67771$exports);

function $bcb2e2f8c69b8e81c8ae8ad355ffd7f$var$Meter(props, ref) {
  let {
    variant
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["variant"]);

  const {
    meterProps,
    labelProps
  } = useMeter(props);
  return /*#__PURE__*/_react.createElement(ProgressBarBase, _babelRuntimeHelpersEsmExtends({}, otherProps, {
    ref: ref,
    barProps: meterProps,
    labelProps: labelProps,
    barClassName: classNames($eae5301468e7259fd99d852e67771$$interop$default, {
      'is-positive': variant === 'positive',
      'is-warning': variant === 'warning',
      'is-critical': variant === 'critical'
    })
  }));
}
/**
 * Meters are visual representations of a quantity or an achievement.
 * Their progress is determined by user actions, rather than system actions.
 */


export let Meter = _react.forwardRef($bcb2e2f8c69b8e81c8ae8ad355ffd7f$var$Meter);
//# sourceMappingURL=module.js.map
