import { ReactElement, ReactNode, RefObject, CSSProperties, HTMLAttributes } from "react";
import { DOMRef, DOMRefValue, FocusableRef, FocusableRefValue, DimensionValue, Direction, StyleProps, ViewStyleProps } from "@react-types/shared";
export let shouldKeepSpectrumClassNames: boolean;
export function keepSpectrumClassNames(): void;
export function classNames(cssModule: {
    [key: string]: string;
}, ...values: Array<string | Object>): string;
export function getWrappedElement(children: string | ReactElement | ReactNode): ReactElement;
export function useMediaQuery(query: string): boolean;
export function createDOMRef<T extends HTMLElement = HTMLElement>(ref: RefObject<T>): DOMRefValue<T>;
export function createFocusableRef<T extends HTMLElement = HTMLElement>(domRef: RefObject<T>, focusableRef?: RefObject<HTMLElement>): FocusableRefValue<T>;
export function useDOMRef<T extends HTMLElement = HTMLElement>(ref: DOMRef<T>): RefObject<T>;
export function useFocusableRef<T extends HTMLElement = HTMLElement>(ref: FocusableRef<T>, focusableRef?: RefObject<HTMLElement>): RefObject<T>;
export function unwrapDOMRef<T extends HTMLElement>(ref: RefObject<DOMRefValue<T>>): RefObject<T>;
type StyleName = string | string[] | ((dir: Direction) => string);
type StyleHandler = (value: any) => string;
export interface StyleHandlers {
    [key: string]: [StyleName, StyleHandler];
}
export const baseStyleProps: StyleHandlers;
export const viewStyleProps: StyleHandlers;
export function dimensionValue(value: DimensionValue): string;
export function convertStyleProps(props: ViewStyleProps, handlers: StyleHandlers, direction: Direction): CSSProperties;
export function useStyleProps<T extends StyleProps>(props: T, handlers?: StyleHandlers): {
    styleProps: HTMLAttributes<HTMLElement>;
};
export function passthroughStyle(value: any): any;
export function useSlotProps<T>(props: T, defaultSlot?: string): T;
export function cssModuleToSlots(cssModule: any): {};
export function SlotProvider(props: any): JSX.Element;
export function ClearSlots(props: any): JSX.Element;
export function useHasChild(query: string, ref: RefObject<HTMLElement>): boolean;

//# sourceMappingURL=types.d.ts.map
