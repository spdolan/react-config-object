import { useToggleState } from "@react-stately/toggle";
import { useSwitch } from "@react-aria/switch";
import { useProviderProps } from "@react-spectrum/provider";
import { useHover } from "@react-aria/interactions";
import _react, { forwardRef, useRef } from "react";
import { FocusRing } from "@react-aria/focus";
import { classNames, useFocusableRef, useStyleProps } from "@react-spectrum/utils";
import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import "./main.css";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/toggle/vars.css
var $b4570f0606b2c7eda302cc75c533$exports = {};
$b4570f0606b2c7eda302cc75c533$exports = {
  "spectrum-ToggleSwitch": "_spectrum-ToggleSwitch_fc100",
  "spectrum-ToggleSwitch-input": "_spectrum-ToggleSwitch-input_fc100",
  "spectrum-ToggleSwitch-switch": "_spectrum-ToggleSwitch-switch_fc100",
  "focus-ring": "_focus-ring_fc100",
  "spectrum-ToggleSwitch-label": "_spectrum-ToggleSwitch-label_fc100",
  "is-hovered": "_is-hovered_fc100",
  "spectrum-ToggleSwitch--quiet": "_spectrum-ToggleSwitch--quiet_fc100",
  "spectrum-ToggleSwitch--ab": "_spectrum-ToggleSwitch--ab_fc100"
};
var $b4570f0606b2c7eda302cc75c533$$interop$default = $parcel$interopDefault($b4570f0606b2c7eda302cc75c533$exports);

function $aff44b1672011b1b1b5b6fdc24d8a9d8$var$Switch(props, ref) {
  props = useProviderProps(props);

  let {
    isEmphasized = false,
    isDisabled = false,
    autoFocus,
    children
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["isEmphasized", "isDisabled", "autoFocus", "children"]);

  let {
    styleProps
  } = useStyleProps(otherProps);
  let {
    hoverProps,
    isHovered
  } = useHover({
    isDisabled
  });
  let inputRef = useRef(null);
  let domRef = useFocusableRef(ref, inputRef);
  let state = useToggleState(props);
  let {
    inputProps
  } = useSwitch(props, state, inputRef);
  return /*#__PURE__*/_react.createElement("label", _babelRuntimeHelpersEsmExtends({}, styleProps, hoverProps, {
    ref: domRef,
    className: classNames($b4570f0606b2c7eda302cc75c533$$interop$default, 'spectrum-ToggleSwitch', {
      'spectrum-ToggleSwitch--quiet': !isEmphasized,
      'is-disabled': isDisabled,
      'is-hovered': isHovered
    }, styleProps.className)
  }), /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($b4570f0606b2c7eda302cc75c533$$interop$default, 'focus-ring'),
    autoFocus: autoFocus
  }, /*#__PURE__*/_react.createElement("input", _babelRuntimeHelpersEsmExtends({}, inputProps, {
    ref: inputRef,
    className: classNames($b4570f0606b2c7eda302cc75c533$$interop$default, 'spectrum-ToggleSwitch-input')
  }))), /*#__PURE__*/_react.createElement("span", {
    className: classNames($b4570f0606b2c7eda302cc75c533$$interop$default, 'spectrum-ToggleSwitch-switch')
  }), children && /*#__PURE__*/_react.createElement("span", {
    className: classNames($b4570f0606b2c7eda302cc75c533$$interop$default, 'spectrum-ToggleSwitch-label')
  }, children));
}
/**
 * Switches allow users to turn an individual option on or off.
 * They are usually used to activate or deactivate a specific setting.
 */


export const Switch = forwardRef($aff44b1672011b1b1b5b6fdc24d8a9d8$var$Switch);
//# sourceMappingURL=module.js.map
