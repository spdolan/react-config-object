{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,sBAAT,CAAgCC,CAAhC,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAACC,UAAP,GAAoBD,CAAC,CAACE,OAAtB,GAAgCF,CAAvC;AACD;;;;ACFD,4CAAiB;AACf,0BAAwB,6BADT;AAEf,iCAA+B,oCAFhB;AAGf,oCAAkC,uCAHnB;AAIf,uCAAqC,0CAJtB;AAKf,oCAAkC;AALnB,CAAjB;;;ACoBA,SAASG,+CAAT,CAAqBC,KAArB,EAAsDC,GAAtD,EAAmF;AACjF,MAAI;AAACC,IAAAA;AAAD,MAAUC,WAAW,EAAzB;AACAH,EAAAA,KAAK,GAAGI,gBAAgB,CAACJ,KAAD,CAAxB;AACAA,EAAAA,KAAK,GAAGK,YAAY,CAACL,KAAD,EAAQ,aAAR,CAApB;;AAEA,MAAI;AACFM,IAAAA,QADE;AAEFC,IAAAA,WAAW,GAAG,YAFZ;AAGFC,IAAAA,UAHE;AAIFC,IAAAA,KAAK,GAAG;AAJN,MAMAT,KANJ;AAAA,MAKKU,UALL,oDAMIV,KANJ;;AAQA,MAAI;AAACW,IAAAA;AAAD,MAAeC,aAAa,CAACF,UAAD,CAAhC;AACA,MAAIG,MAAM,GAAGC,SAAS,CAACb,GAAD,CAAtB;AACA,MAAI,CAACc,WAAD,EAAcC,cAAd,IAAgCC,QAAQ,CAAC,KAAD,CAA5C;AACA,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBF,QAAQ,CAAC,KAAD,CAAhC;AAEA,MAAIG,gBAAgB,GAAGC,WAAW,CAAC,MAAM;AACvC,QAAIR,MAAM,CAACS,OAAP,IAAkBf,WAAW,KAAK,YAAtC,EAAoD;AAClDS,MAAAA,cAAc,CAAC,KAAD,CAAd;AACA,UAAIO,mBAAmB,GAAGC,KAAK,CAACC,IAAN,CAAWZ,MAAM,CAACS,OAAP,CAAehB,QAA1B,CAA1B;AACA,UAAIoB,IAAI,GAAGb,MAAM,CAACS,OAAP,CAAeK,WAAf,GAA6B,CAAxC,CAHkD,CAGP;AAC3C;AACA;;AACA,UAAIJ,mBAAmB,CAACK,IAApB,CAAyBC,KAAK,IAAIA,KAAK,CAACC,UAAN,GAAmB,CAAnB,IAAwBD,KAAK,CAACC,UAAN,GAAmBD,KAAK,CAACF,WAAzB,GAAuCD,IAAjG,CAAJ,EAA4G;AAC1GV,QAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF;AACF,GAXiC,EAW/B,CAACH,MAAD,EAASN,WAAT,CAX+B,CAAlC,CAlBiF,CA+BjF;;AACAwB,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIb,KAAJ,EAAW;AACTE,MAAAA,gBAAgB;AAChBD,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD;AACF,GALc,EAKZ,CAACD,KAAD,EAAQE,gBAAR,CALY,CAAf;AAOAY,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACd,KAAL,EAAY;AACVC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAHa,CAIhB;AACA;;AACC,GANQ,EAMN,CAACb,QAAD,EAAWJ,KAAX,CANM,CAAT,CAvCiF,CA+CjF;;AACA8B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIzB,WAAW,KAAK,UAApB,EAAgC;AAC9B;AACA;AACA0B,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCd,gBAAlC;AACAA,MAAAA,gBAAgB;AAChB,aAAO,MAAM;AACXa,QAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCf,gBAArC;AACD,OAFD;AAGD;AACF,GAVQ,EAUN,CAACA,gBAAD,EAAmBb,WAAnB,CAVM,CAAT;AAYA,sBACE,4DACM6B,cAAc,CAAC1B,UAAD,CADpB,EAEMC,UAFN;AAGE,IAAA,GAAG,EAAEE,MAHP;AAIE,IAAA,SAAS,EACPwB,UAAU,qDAER,sBAFQ,EAGR;AACE,wCAAkC9B,WAAW,KAAK,UAAhB,IAA+B,CAACW,KAAD,IAAUH,WAD7E;AAEE,wCAAkCN,KAAK,KAAK,KAF9C;AAGE,2CAAqCA,KAAK,KAAK;AAHjD,KAHQ,EAQRE,UAAU,CAAC2B,SARH;AALd,mBAgBE,qBAAC,YAAD;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE;AACN/B,QAAAA,UADM;AAENgC,QAAAA,gBAAgB,EAAEH,UAAU,qDAAS,6BAAT;AAFtB;AADH;AADT,KAOG/B,QAPH,CAhBF,CADF;AA4BD;AAED;;;;;AAGA,IAAImC,WAAY,GAAGC,MAAK,CAACC,UAAN,CAAiB5C,+CAAjB,CAAnB","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@adobe/spectrum-css-temp/components/buttongroup/vars.css","./packages/@react-spectrum/buttongroup/src/ButtonGroup.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useDOMRef, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport React, {useCallback, useEffect, useLayoutEffect, useState} from 'react';\nimport {SpectrumButtonGroupProps} from '@react-types/buttongroup';\nimport styles from '@adobe/spectrum-css-temp/components/buttongroup/vars.css';\nimport {useProvider, useProviderProps} from '@react-spectrum/provider';\n\nfunction ButtonGroup(props: SpectrumButtonGroupProps, ref: DOMRef<HTMLDivElement>) {\n  let {scale} = useProvider();\n  props = useProviderProps(props);\n  props = useSlotProps(props, 'buttonGroup');\n\n  let {\n    children,\n    orientation = 'horizontal',\n    isDisabled,\n    align = 'start',\n    ...otherProps\n  } = props;\n\n  let {styleProps} = useStyleProps(otherProps);\n  let domRef = useDOMRef(ref);\n  let [hasOverflow, setHasOverflow] = useState(false);\n  let [dirty, setDirty] = useState(false);\n\n  let checkForOverflow = useCallback(() => {\n    if (domRef.current && orientation === 'horizontal') {\n      setHasOverflow(false);\n      let buttonGroupChildren = Array.from(domRef.current.children) as HTMLElement[];\n      let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors\n      // If any buttons have negative X positions (align=\"end\") or extend beyond\n      // the width of the button group (align=\"start\"), then switch to vertical.\n      if (buttonGroupChildren.some(child => child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX)) {\n        setHasOverflow(true);\n      }\n    }\n  }, [domRef, orientation]);\n\n  // On scale or children change, remove vertical orientation class via dirty = true and check for overflow\n  useLayoutEffect(() => {\n    if (dirty) {\n      checkForOverflow();\n      setDirty(false);\n    }\n  }, [dirty, checkForOverflow]);\n\n  useEffect(() => {\n    if (!dirty) {\n      setDirty(true);\n    }\n  // Don't add dirty to dep array since it will cause infinite loop\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [children, scale]);\n\n  // Check for overflow on window resize\n  useEffect(() => {\n    if (orientation !== 'vertical') {\n      // I think performance could be optimized here by creating a global, debounced hook for listening to resize\n      // events rather than creating an event-listener per component.\n      window.addEventListener('resize', checkForOverflow);\n      checkForOverflow();\n      return () => {\n        window.removeEventListener('resize', checkForOverflow);\n      };\n    }\n  }, [checkForOverflow, orientation]);\n\n  return (\n    <div\n      {...filterDOMProps(otherProps)}\n      {...styleProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-ButtonGroup',\n          {\n            'spectrum-ButtonGroup--vertical': orientation === 'vertical' || (!dirty && hasOverflow),\n            'spectrum-ButtonGroup--alignEnd': align === 'end',\n            'spectrum-ButtonGroup--alignCenter': align === 'center'\n          },\n          styleProps.className\n        )\n      }>\n      <SlotProvider\n        slots={{\n          button: {\n            isDisabled,\n            UNSAFE_className: classNames(styles, 'spectrum-ButtonGroup-Button')\n          }\n        }}>\n        {children}\n      </SlotProvider>\n    </div>\n  );\n}\n\n/**\n * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.\n */\nlet _ButtonGroup = React.forwardRef(ButtonGroup);\nexport {_ButtonGroup as ButtonGroup};\n"],"names":["$parcel$interopDefault","a","__esModule","default","ButtonGroup","props","ref","scale","useProvider","useProviderProps","useSlotProps","children","orientation","isDisabled","align","otherProps","styleProps","useStyleProps","domRef","useDOMRef","hasOverflow","setHasOverflow","useState","dirty","setDirty","checkForOverflow","useCallback","current","buttonGroupChildren","Array","from","maxX","offsetWidth","some","child","offsetLeft","useLayoutEffect","useEffect","window","addEventListener","removeEventListener","filterDOMProps","classNames","className","button","UNSAFE_className","_ButtonGroup","React","forwardRef"],"version":3,"file":"main.js.map"}