import { useTextField } from "@react-aria/textfield";
import { useProviderProps } from "@react-spectrum/provider";
import { useHover } from "@react-aria/interactions";
import { useFormProps } from "@react-spectrum/form";
import { Label } from "@react-spectrum/label";
import { FocusRing } from "@react-aria/focus";
import { classNames, createFocusableRef, useStyleProps } from "@react-spectrum/utils";
import _spectrumIconsUiCheckmarkMedium from "@spectrum-icons/ui/CheckmarkMedium";
import _spectrumIconsUiAlertMedium from "@spectrum-icons/ui/AlertMedium";
import _react, { useRef, cloneElement, forwardRef, useImperativeHandle } from "react";
import { chain, mergeProps } from "@react-aria/utils";
import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import "./main.css";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $c9fb1f4220ea2c59cb2e10f0e9828c6e$exports = {};
$c9fb1f4220ea2c59cb2e10f0e9828c6e$exports = {
  "spectrum-FieldLabel": "_spectrum-FieldLabel_36b9b",
  "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_36b9b",
  "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_36b9b",
  "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_36b9b",
  "spectrum-Field": "_spectrum-Field_36b9b",
  "spectrum-Field--positionTop": "_spectrum-Field--positionTop_36b9b",
  "spectrum-Field-field": "_spectrum-Field-field_36b9b",
  "spectrum-Field--positionSide": "_spectrum-Field--positionSide_36b9b",
  "spectrum-Form": "_spectrum-Form_36b9b",
  "spectrum-Form--positionSide": "_spectrum-Form--positionSide_36b9b",
  "spectrum-Form--positionTop": "_spectrum-Form--positionTop_36b9b",
  "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_36b9b",
  "is-disabled": "_is-disabled_36b9b"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/textfield/vars.css
var $aa1c742e7a2a16aa7981ca9e2f4a89$exports = {};
$aa1c742e7a2a16aa7981ca9e2f4a89$exports = {
  "spectrum-Textfield": "_spectrum-Textfield_61339",
  "spectrum-Textfield--quiet": "_spectrum-Textfield--quiet_61339",
  "spectrum-Textfield--multiline": "_spectrum-Textfield--multiline_61339",
  "spectrum-Textfield-input": "_spectrum-Textfield-input_61339",
  "is-hovered": "_is-hovered_61339",
  "is-valid": "_is-valid_61339",
  "is-invalid": "_is-invalid_61339",
  "spectrum-Textfield-validationIcon": "_spectrum-Textfield-validationIcon_61339",
  "spectrum-Textfield-icon": "_spectrum-Textfield-icon_61339",
  "spectrum-Textfield-inputIcon": "_spectrum-Textfield-inputIcon_61339",
  "is-focused": "_is-focused_61339",
  "focus-ring": "_focus-ring_61339",
  "is-disabled": "_is-disabled_61339"
};
var $aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default = $parcel$interopDefault($aa1c742e7a2a16aa7981ca9e2f4a89$exports);
var $c9fb1f4220ea2c59cb2e10f0e9828c6e$$interop$default = $parcel$interopDefault($c9fb1f4220ea2c59cb2e10f0e9828c6e$exports);

function $bf4e8b5f6a6cf158db09231425531fea$var$TextFieldBase(props, ref) {
  props = useProviderProps(props);
  props = useFormProps(props);

  let {
    label,
    labelPosition = 'top',
    labelAlign,
    isRequired,
    necessityIndicator,
    validationState,
    icon,
    isQuiet = false,
    isDisabled,
    multiLine,
    autoFocus,
    inputClassName,
    wrapperChildren,
    labelProps,
    inputProps,
    inputRef
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["label", "labelPosition", "labelAlign", "isRequired", "necessityIndicator", "validationState", "icon", "isQuiet", "isDisabled", "multiLine", "autoFocus", "inputClassName", "wrapperChildren", "labelProps", "inputProps", "inputRef"]);

  let {
    hoverProps,
    isHovered
  } = useHover({
    isDisabled
  });
  let domRef = useRef(null);
  let defaultInputRef = useRef(null);
  inputRef = inputRef || defaultInputRef; // Expose imperative interface for ref

  useImperativeHandle(ref, () => _babelRuntimeHelpersEsmExtends({}, createFocusableRef(domRef, inputRef), {
    select() {
      if (inputRef.current) {
        inputRef.current.select();
      }
    },

    getInputElement() {
      return inputRef.current;
    }

  }));
  let {
    styleProps
  } = useStyleProps(otherProps);
  let ElementType = multiLine ? 'textarea' : 'input';
  let isInvalid = validationState === 'invalid';

  if (icon) {
    let UNSAFE_className = classNames($aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default, icon.props && icon.props.UNSAFE_className, 'spectrum-Textfield-icon');
    icon = cloneElement(icon, {
      UNSAFE_className,
      size: 'S'
    });
  }

  let validationIcon = isInvalid ? /*#__PURE__*/_react.createElement(_spectrumIconsUiAlertMedium, null) : /*#__PURE__*/_react.createElement(_spectrumIconsUiCheckmarkMedium, null);
  let validation = cloneElement(validationIcon, {
    UNSAFE_className: classNames($aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default, 'spectrum-Textfield-validationIcon', {
      'is-invalid': isInvalid,
      'is-valid': validationState === 'valid'
    })
  });

  let textField = /*#__PURE__*/_react.createElement("div", {
    className: classNames($aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default, 'spectrum-Textfield', {
      'is-invalid': isInvalid,
      'is-valid': validationState === 'valid',
      'spectrum-Textfield--quiet': isQuiet,
      'spectrum-Textfield--multiline': multiLine
    })
  }, /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default, 'focus-ring'),
    isTextInput: true,
    autoFocus: autoFocus
  }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersEsmExtends({}, mergeProps(inputProps, hoverProps), {
    ref: inputRef,
    rows: multiLine ? 1 : undefined,
    className: classNames($aa1c742e7a2a16aa7981ca9e2f4a89$$interop$default, 'spectrum-Textfield-input', {
      'spectrum-Textfield-inputIcon': icon,
      'is-hovered': isHovered
    }, inputClassName)
  }))), icon, validationState ? validation : null, wrapperChildren);

  if (label) {
    let labelWrapperClass = classNames($c9fb1f4220ea2c59cb2e10f0e9828c6e$$interop$default, 'spectrum-Field', {
      'spectrum-Field--positionTop': labelPosition === 'top',
      'spectrum-Field--positionSide': labelPosition === 'side'
    }, styleProps.className);
    textField = _react.cloneElement(textField, mergeProps(textField.props, {
      className: classNames($c9fb1f4220ea2c59cb2e10f0e9828c6e$$interop$default, 'spectrum-Field-field')
    }));
    return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, styleProps, {
      ref: domRef,
      className: labelWrapperClass
    }), /*#__PURE__*/_react.createElement(Label, _babelRuntimeHelpersEsmExtends({}, labelProps, {
      labelPosition: labelPosition,
      labelAlign: labelAlign,
      isRequired: isRequired,
      necessityIndicator: necessityIndicator
    }), label), textField);
  }

  return _react.cloneElement(textField, mergeProps(textField.props, _babelRuntimeHelpersEsmExtends({}, styleProps, {
    ref: domRef
  })));
}

export const TextFieldBase = forwardRef($bf4e8b5f6a6cf158db09231425531fea$var$TextFieldBase);

function $c4fbb705db8be6f428971c31601c3$var$TextArea(props, ref) {
  props = useProviderProps(props);

  let {
    isDisabled = false,
    isQuiet = false,
    isReadOnly = false,
    isRequired = false,
    onChange
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["isDisabled", "isQuiet", "isReadOnly", "isRequired", "onChange"]);

  let inputRef = useRef();

  let onHeightChange = () => {
    if (isQuiet) {
      let input = inputRef.current;
      input.style.height = 'auto';
      input.style.height = input.scrollHeight + "px";
    }
  };

  let {
    labelProps,
    inputProps
  } = useTextField(_babelRuntimeHelpersEsmExtends({}, props, {
    onChange: chain(onChange, onHeightChange)
  }), inputRef);
  return /*#__PURE__*/_react.createElement(TextFieldBase, _babelRuntimeHelpersEsmExtends({}, otherProps, {
    ref: ref,
    inputRef: inputRef,
    labelProps: labelProps,
    inputProps: inputProps,
    multiLine: true,
    isDisabled: isDisabled,
    isQuiet: isQuiet,
    isReadOnly: isReadOnly,
    isRequired: isRequired
  }));
}
/**
 * TextAreas are multiline text inputs, useful for cases where users have
 * a sizable amount of text to enter. They allow for all customizations that
 * are available to text fields.
 */


export let TextArea = _react.forwardRef($c4fbb705db8be6f428971c31601c3$var$TextArea);

function $b9415e5cf6b021d77e82405d516096$var$TextField(props, ref) {
  props = useProviderProps(props);
  let inputRef = useRef();
  let {
    labelProps,
    inputProps
  } = useTextField(props, inputRef);
  return /*#__PURE__*/_react.createElement(TextFieldBase, _babelRuntimeHelpersEsmExtends({}, props, {
    labelProps: labelProps,
    inputProps: inputProps,
    ref: ref,
    inputRef: inputRef
  }));
}
/**
 * TextFields are text inputs that allow users to input custom text entries
 * with a keyboard. Various decorations can be displayed around the field to
 * communicate the entry requirements.
 */


export const TextField = forwardRef($b9415e5cf6b021d77e82405d516096$var$TextField);
//# sourceMappingURL=module.js.map
