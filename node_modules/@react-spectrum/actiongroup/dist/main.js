var {
  useActionGroup,
  useActionGroupItem
} = require("@react-aria/actiongroup");

var _react2 = require("react");

var _react = $parcel$interopDefault(_react2);

var {
  forwardRef,
  useRef
} = _react2;

var {
  Provider,
  useProviderProps
} = require("@react-spectrum/provider");

var {
  PressResponder,
  useHover
} = require("@react-aria/interactions");

var {
  mergeProps
} = require("@react-aria/utils");

var {
  useListState
} = require("@react-stately/list");

var {
  classNames,
  unwrapDOMRef,
  useDOMRef,
  useStyleProps
} = require("@react-spectrum/utils");

var {
  ActionButton
} = require("@react-spectrum/button");

var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));

var {
  Item
} = require("@react-stately/collections");

exports.Item = Item;

require("./main.css");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/button/vars.css
var $a9040831959d0ed42473e9713dd4b23$exports = {};
$a9040831959d0ed42473e9713dd4b23$exports = {
  "spectrum-Button": "_spectrum-Button_7a745",
  "spectrum-ActionButton": "_spectrum-ActionButton_7a745",
  "spectrum-LogicButton": "_spectrum-LogicButton_7a745",
  "spectrum-FieldButton": "_spectrum-FieldButton_7a745",
  "spectrum-ClearButton": "_spectrum-ClearButton_7a745",
  "focus-ring": "_focus-ring_7a745",
  "spectrum-Icon": "_spectrum-Icon_7a745",
  "is-hovered": "_is-hovered_7a745",
  "spectrum-Button-label": "_spectrum-Button-label_7a745",
  "spectrum-ActionButton-label": "_spectrum-ActionButton-label_7a745",
  "spectrum-ActionButton-hold": "_spectrum-ActionButton-hold_7a745",
  "spectrum-ActionButton--quiet": "_spectrum-ActionButton--quiet_7a745",
  "is-disabled": "_is-disabled_7a745",
  "is-open": "_is-open_7a745",
  "spectrum-FieldButton--quiet": "_spectrum-FieldButton--quiet_7a745",
  "spectrum-ClearButton--overBackground": "_spectrum-ClearButton--overBackground_7a745",
  "spectrum-ClearButton--small": "_spectrum-ClearButton--small_7a745",
  "is-focused": "_is-focused_7a745",
  "is-active": "_is-active_7a745",
  "spectrum-Button--cta": "_spectrum-Button--cta_7a745",
  "spectrum-Button--primary": "_spectrum-Button--primary_7a745",
  "spectrum-Button--secondary": "_spectrum-Button--secondary_7a745",
  "spectrum-Button--warning": "_spectrum-Button--warning_7a745",
  "spectrum-Button--overBackground": "_spectrum-Button--overBackground_7a745",
  "spectrum-Button--quiet": "_spectrum-Button--quiet_7a745",
  "is-selected": "_is-selected_7a745",
  "spectrum-ActionButton--emphasized": "_spectrum-ActionButton--emphasized_7a745",
  "spectrum-LogicButton--and": "_spectrum-LogicButton--and_7a745",
  "spectrum-LogicButton--or": "_spectrum-LogicButton--or_7a745",
  "is-placeholder": "_is-placeholder_7a745",
  "is-invalid": "_is-invalid_7a745"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/actiongroup/vars.css
var $fca4dfdd23dc1cdb3a256953c$exports = {};
$fca4dfdd23dc1cdb3a256953c$exports = {
  "flex-container": "_flex-container_97f54",
  "flex-gap": "_flex-gap_97f54",
  "spectrum-ActionGroup": "_spectrum-ActionGroup_97f54",
  "spectrum-ActionGroup-item": "_spectrum-ActionGroup-item_97f54",
  "spectrum-ActionGroup--vertical": "_spectrum-ActionGroup--vertical_97f54",
  "spectrum-ActionGroup--quiet": "_spectrum-ActionGroup--quiet_97f54",
  "spectrum-ActionGroup--justified": "_spectrum-ActionGroup--justified_97f54",
  "spectrum-ActionGroup--compact": "_spectrum-ActionGroup--compact_97f54",
  "is-selected": "_is-selected_97f54",
  "is-hovered": "_is-hovered_97f54"
};
var $fca4dfdd23dc1cdb3a256953c$$interop$default = $parcel$interopDefault($fca4dfdd23dc1cdb3a256953c$exports);

function $d1ce1419524cab384aad70acd928619$var$ActionGroup(props, ref) {
  props = useProviderProps(props);

  let {
    isEmphasized,
    density,
    isJustified,
    isDisabled,
    orientation = 'horizontal',
    isQuiet,
    onAction
  } = props,
      otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, ["isEmphasized", "density", "isJustified", "isDisabled", "orientation", "isQuiet", "onAction"]);

  let domRef = useDOMRef(ref);
  let state = useListState(props);
  let {
    actionGroupProps
  } = useActionGroup(props, state, domRef);
  let isVertical = orientation === 'vertical';
  let providerProps = {
    isEmphasized,
    isDisabled,
    isQuiet
  };
  let {
    styleProps
  } = useStyleProps(props);
  return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersExtends({}, styleProps, {
    className: classNames($fca4dfdd23dc1cdb3a256953c$$interop$default, 'flex-container', styleProps.className)
  }), /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersExtends({}, actionGroupProps, {
    ref: domRef,
    className: classNames($fca4dfdd23dc1cdb3a256953c$$interop$default, 'flex-gap', 'spectrum-ActionGroup', {
      'spectrum-ActionGroup--quiet': isQuiet,
      'spectrum-ActionGroup--vertical': isVertical,
      'spectrum-ActionGroup--compact': density === 'compact',
      'spectrum-ActionGroup--justified': isJustified
    }, otherProps.UNSAFE_className)
  }), /*#__PURE__*/_react.createElement(Provider, providerProps, [...state.collection].map(item => /*#__PURE__*/_react.createElement($d1ce1419524cab384aad70acd928619$var$ActionGroupItem, {
    key: item.key,
    onAction: onAction,
    isDisabled: isDisabled,
    isEmphasized: isEmphasized,
    item: item,
    state: state
  })))));
}
/**
 * An ActionGroup is a grouping of ActionButtons that are related to one another.
 */


const ActionGroup = forwardRef($d1ce1419524cab384aad70acd928619$var$ActionGroup);
exports.ActionGroup = ActionGroup;
var $a9040831959d0ed42473e9713dd4b23$$interop$default = $parcel$interopDefault($a9040831959d0ed42473e9713dd4b23$exports);

function $d1ce1419524cab384aad70acd928619$var$ActionGroupItem(_ref) {
  let {
    item,
    state,
    isDisabled,
    isEmphasized,
    onAction
  } = _ref;
  let ref = useRef();
  let {
    buttonProps
  } = useActionGroupItem({
    key: item.key
  }, state, unwrapDOMRef(ref));
  isDisabled = isDisabled || state.disabledKeys.has(item.key);
  let isSelected = state.selectionManager.isSelected(item.key);
  let {
    hoverProps,
    isHovered
  } = useHover({
    isDisabled
  });

  if (onAction && !isDisabled) {
    buttonProps = mergeProps(buttonProps, {
      onPress: () => onAction(item.key)
    });
  }

  let button =
  /*#__PURE__*/
  // Use a PressResponder to send DOM props through.
  // ActionButton doesn't allow overriding the role by default.
  _react.createElement(PressResponder, mergeProps(buttonProps, hoverProps), /*#__PURE__*/_react.createElement(ActionButton, {
    ref: ref,
    UNSAFE_className: classNames($fca4dfdd23dc1cdb3a256953c$$interop$default, 'spectrum-ActionGroup-item', {
      'is-selected': isSelected,
      'is-hovered': isHovered
    }, classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, {
      'spectrum-ActionButton--emphasized': isEmphasized,
      'is-selected': isSelected
    })),
    isDisabled: isDisabled,
    "aria-label": item['aria-label']
  }, item.rendered));

  if (item.wrapper) {
    button = item.wrapper(button);
  }

  return button;
}
//# sourceMappingURL=main.js.map
