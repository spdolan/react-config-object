import { useActionGroup, useActionGroupItem } from "@react-aria/actiongroup";
import _react, { forwardRef, useRef } from "react";
import { Provider, useProviderProps } from "@react-spectrum/provider";
import { PressResponder, useHover } from "@react-aria/interactions";
import { mergeProps } from "@react-aria/utils";
import { useListState } from "@react-stately/list";
import { classNames, unwrapDOMRef, useDOMRef, useStyleProps } from "@react-spectrum/utils";
import { ActionButton } from "@react-spectrum/button";
import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import { Item } from "@react-stately/collections";
export { Item };
import "./main.css";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/button/vars.css
var $a0b8eb4b46824fd288195a4db8814b$exports = {};
$a0b8eb4b46824fd288195a4db8814b$exports = {
  "spectrum-Button": "_spectrum-Button_7a745",
  "spectrum-ActionButton": "_spectrum-ActionButton_7a745",
  "spectrum-LogicButton": "_spectrum-LogicButton_7a745",
  "spectrum-FieldButton": "_spectrum-FieldButton_7a745",
  "spectrum-ClearButton": "_spectrum-ClearButton_7a745",
  "focus-ring": "_focus-ring_7a745",
  "spectrum-Icon": "_spectrum-Icon_7a745",
  "is-hovered": "_is-hovered_7a745",
  "spectrum-Button-label": "_spectrum-Button-label_7a745",
  "spectrum-ActionButton-label": "_spectrum-ActionButton-label_7a745",
  "spectrum-ActionButton-hold": "_spectrum-ActionButton-hold_7a745",
  "spectrum-ActionButton--quiet": "_spectrum-ActionButton--quiet_7a745",
  "is-disabled": "_is-disabled_7a745",
  "is-open": "_is-open_7a745",
  "spectrum-FieldButton--quiet": "_spectrum-FieldButton--quiet_7a745",
  "spectrum-ClearButton--overBackground": "_spectrum-ClearButton--overBackground_7a745",
  "spectrum-ClearButton--small": "_spectrum-ClearButton--small_7a745",
  "is-focused": "_is-focused_7a745",
  "is-active": "_is-active_7a745",
  "spectrum-Button--cta": "_spectrum-Button--cta_7a745",
  "spectrum-Button--primary": "_spectrum-Button--primary_7a745",
  "spectrum-Button--secondary": "_spectrum-Button--secondary_7a745",
  "spectrum-Button--warning": "_spectrum-Button--warning_7a745",
  "spectrum-Button--overBackground": "_spectrum-Button--overBackground_7a745",
  "spectrum-Button--quiet": "_spectrum-Button--quiet_7a745",
  "is-selected": "_is-selected_7a745",
  "spectrum-ActionButton--emphasized": "_spectrum-ActionButton--emphasized_7a745",
  "spectrum-LogicButton--and": "_spectrum-LogicButton--and_7a745",
  "spectrum-LogicButton--or": "_spectrum-LogicButton--or_7a745",
  "is-placeholder": "_is-placeholder_7a745",
  "is-invalid": "_is-invalid_7a745"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/actiongroup/vars.css
var $b94f26c7d62d19d8f66eba0e11e8d03d$exports = {};
$b94f26c7d62d19d8f66eba0e11e8d03d$exports = {
  "flex-container": "_flex-container_97f54",
  "flex-gap": "_flex-gap_97f54",
  "spectrum-ActionGroup": "_spectrum-ActionGroup_97f54",
  "spectrum-ActionGroup-item": "_spectrum-ActionGroup-item_97f54",
  "spectrum-ActionGroup--vertical": "_spectrum-ActionGroup--vertical_97f54",
  "spectrum-ActionGroup--quiet": "_spectrum-ActionGroup--quiet_97f54",
  "spectrum-ActionGroup--justified": "_spectrum-ActionGroup--justified_97f54",
  "spectrum-ActionGroup--compact": "_spectrum-ActionGroup--compact_97f54",
  "is-selected": "_is-selected_97f54",
  "is-hovered": "_is-hovered_97f54"
};
var $b94f26c7d62d19d8f66eba0e11e8d03d$$interop$default = $parcel$interopDefault($b94f26c7d62d19d8f66eba0e11e8d03d$exports);

function $c6c692da1cfbbd16b5ce1db157471b0$var$ActionGroup(props, ref) {
  props = useProviderProps(props);

  let {
    isEmphasized,
    density,
    isJustified,
    isDisabled,
    orientation = 'horizontal',
    isQuiet,
    onAction
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["isEmphasized", "density", "isJustified", "isDisabled", "orientation", "isQuiet", "onAction"]);

  let domRef = useDOMRef(ref);
  let state = useListState(props);
  let {
    actionGroupProps
  } = useActionGroup(props, state, domRef);
  let isVertical = orientation === 'vertical';
  let providerProps = {
    isEmphasized,
    isDisabled,
    isQuiet
  };
  let {
    styleProps
  } = useStyleProps(props);
  return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, styleProps, {
    className: classNames($b94f26c7d62d19d8f66eba0e11e8d03d$$interop$default, 'flex-container', styleProps.className)
  }), /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, actionGroupProps, {
    ref: domRef,
    className: classNames($b94f26c7d62d19d8f66eba0e11e8d03d$$interop$default, 'flex-gap', 'spectrum-ActionGroup', {
      'spectrum-ActionGroup--quiet': isQuiet,
      'spectrum-ActionGroup--vertical': isVertical,
      'spectrum-ActionGroup--compact': density === 'compact',
      'spectrum-ActionGroup--justified': isJustified
    }, otherProps.UNSAFE_className)
  }), /*#__PURE__*/_react.createElement(Provider, providerProps, [...state.collection].map(item => /*#__PURE__*/_react.createElement($c6c692da1cfbbd16b5ce1db157471b0$var$ActionGroupItem, {
    key: item.key,
    onAction: onAction,
    isDisabled: isDisabled,
    isEmphasized: isEmphasized,
    item: item,
    state: state
  })))));
}
/**
 * An ActionGroup is a grouping of ActionButtons that are related to one another.
 */


export const ActionGroup = forwardRef($c6c692da1cfbbd16b5ce1db157471b0$var$ActionGroup);
var $a0b8eb4b46824fd288195a4db8814b$$interop$default = $parcel$interopDefault($a0b8eb4b46824fd288195a4db8814b$exports);

function $c6c692da1cfbbd16b5ce1db157471b0$var$ActionGroupItem(_ref) {
  let {
    item,
    state,
    isDisabled,
    isEmphasized,
    onAction
  } = _ref;
  let ref = useRef();
  let {
    buttonProps
  } = useActionGroupItem({
    key: item.key
  }, state, unwrapDOMRef(ref));
  isDisabled = isDisabled || state.disabledKeys.has(item.key);
  let isSelected = state.selectionManager.isSelected(item.key);
  let {
    hoverProps,
    isHovered
  } = useHover({
    isDisabled
  });

  if (onAction && !isDisabled) {
    buttonProps = mergeProps(buttonProps, {
      onPress: () => onAction(item.key)
    });
  }

  let button =
  /*#__PURE__*/
  // Use a PressResponder to send DOM props through.
  // ActionButton doesn't allow overriding the role by default.
  _react.createElement(PressResponder, mergeProps(buttonProps, hoverProps), /*#__PURE__*/_react.createElement(ActionButton, {
    ref: ref,
    UNSAFE_className: classNames($b94f26c7d62d19d8f66eba0e11e8d03d$$interop$default, 'spectrum-ActionGroup-item', {
      'is-selected': isSelected,
      'is-hovered': isHovered
    }, classNames($a0b8eb4b46824fd288195a4db8814b$$interop$default, {
      'spectrum-ActionButton--emphasized': isEmphasized,
      'is-selected': isSelected
    })),
    isDisabled: isDisabled,
    "aria-label": item['aria-label']
  }, item.rendered));

  if (item.wrapper) {
    button = item.wrapper(button);
  }

  return button;
}
//# sourceMappingURL=module.js.map
