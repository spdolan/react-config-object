{"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,sBAAT,CAAgCC,CAAhC,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAACC,UAAP,GAAoBD,CAAC,CAACE,OAAtB,GAAgCF,CAAvC;AACD;;ACiBD;AAEA,SAASG,yCAAT,CAAeC,KAAf,EAA0CC,GAA1C,EAAuE;AACrED,EAAAA,KAAK,GAAGE,YAAY,CAACF,KAAD,EAAQ,OAAR,CAApB;;AACA,0BAKIG,gBAAgB,CAACH,KAAD,CALpB;AAAA,MAAI;AACFI,IAAAA,SADE;AAEFC,IAAAA,GAFE;AAGFC,IAAAA;AAHE,GAAJ;AAAA,MAIKC,UAJL;;AAMA,MAAI;AAACC,IAAAA;AAAD,MAAeC,aAAa,CAACF,UAAD,CAAhC;AACA,MAAIG,MAAM,GAAGC,SAAS,CAACV,GAAD,CAAtB;;AAEA,MAAIK,GAAG,IAAI,IAAX,EAAiB;AACfM,IAAAA,OAAO,CAACC,IAAR,CACE,kDACA,qFADA,GAEA,8FAHF;AAKD;;AAED,sBACE,4DACMC,cAAc,CAACd,KAAD,CADpB,EAEMQ,UAFN;AAGE,IAAA,SAAS,EAAEO,UAAU,CAAC,EAAD,EAAKP,UAAU,CAACQ,SAAhB,CAHvB;AAIE,IAAA,KAAK,kCACAR,UAAU,CAACS,KADX;AAEHC,MAAAA,QAAQ,EAAE;AAFP,MAJP;AAQE,IAAA,GAAG,EAAER;AARP,mBASE;AACE,IAAA,GAAG,EAAEL,GADP;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,KAAK,EAAE;AAACF,MAAAA,SAAD;AAAYe,MAAAA,MAAM,EAAE,MAApB;AAA4BC,MAAAA,KAAK,EAAE;AAAnC;AAHT,IATF,CADF;AAgBD;AAED;;;;;AAGA,MAAMC,KAAM,GAAGC,MAAK,CAACC,UAAN,CAAiBxB,yCAAjB,CAAf","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-spectrum/image/src/Image.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, useDOMRef, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport React from 'react';\nimport {SpectrumImageProps} from '@react-types/image';\nimport {useProviderProps} from '@react-spectrum/provider';\n\n// incomplete component for show right now\n\nfunction Image(props: SpectrumImageProps, ref: DOMRef<HTMLDivElement>) {\n  props = useSlotProps(props, 'image');\n  let {\n    objectFit,\n    src,\n    alt,\n    ...otherProps\n  } = useProviderProps(props);\n  let {styleProps} = useStyleProps(otherProps);\n  let domRef = useDOMRef(ref);\n\n  if (alt == null) {\n    console.warn(\n      'The `alt` prop was not provided to an image. ' +\n      'Add `alt` text for screen readers, or set `alt=\"\"` prop to indicate that the image ' +\n      'is decorative or redundant with displayed text and should not be annouced by screen readers.'\n    );\n  }\n\n  return (\n    <div\n      {...filterDOMProps(props)}\n      {...styleProps}\n      className={classNames({}, styleProps.className)}\n      style={{\n        ...styleProps.style,\n        overflow: 'hidden'\n      }}\n      ref={domRef}>\n      <img\n        src={src}\n        alt={alt}\n        style={{objectFit, height: '100%', width: '100%'}} />\n    </div>\n  );\n}\n\n/**\n * Image is used to insert and display an image within a component.\n */\nconst _Image = React.forwardRef(Image);\nexport {_Image as Image};\n"],"names":["$parcel$interopDefault","a","__esModule","default","Image","props","ref","useSlotProps","useProviderProps","objectFit","src","alt","otherProps","styleProps","useStyleProps","domRef","useDOMRef","console","warn","filterDOMProps","classNames","className","style","overflow","height","width","_Image","React","forwardRef"],"version":3,"file":"main.js.map"}