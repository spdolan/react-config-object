import { useProgressBar } from "@react-aria/progress";
import _react from "react";
import { clamp } from "@react-aria/utils";
import { classNames, useDOMRef, useStyleProps } from "@react-spectrum/utils";
import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import "./main.css";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/barloader/vars.css
var $eae5301468e7259fd99d852e67771$exports = {};
$eae5301468e7259fd99d852e67771$exports = {
  "spectrum-BarLoader": "_spectrum-BarLoader_c74d2",
  "spectrum-BarLoader-track": "_spectrum-BarLoader-track_c74d2",
  "spectrum-BarLoader-fill": "_spectrum-BarLoader-fill_c74d2",
  "spectrum-BarLoader-label": "_spectrum-BarLoader-label_c74d2",
  "spectrum-BarLoader-percentage": "_spectrum-BarLoader-percentage_c74d2",
  "spectrum-BarLoader--sideLabel": "_spectrum-BarLoader--sideLabel_c74d2",
  "spectrum-BarLoader--small": "_spectrum-BarLoader--small_c74d2",
  "spectrum-BarLoader--indeterminate": "_spectrum-BarLoader--indeterminate_c74d2",
  "indeterminate-loop-ltr": "_indeterminate-loop-ltr_c74d2",
  "indeterminate-loop-rtl": "_indeterminate-loop-rtl_c74d2",
  "spectrum-BarLoader--overBackground": "_spectrum-BarLoader--overBackground_c74d2",
  "is-positive": "_is-positive_c74d2",
  "is-warning": "_is-warning_c74d2",
  "is-critical": "_is-critical_c74d2"
};
var $eae5301468e7259fd99d852e67771$$interop$default = $parcel$interopDefault($eae5301468e7259fd99d852e67771$exports);

// Base ProgressBar component shared with Meter.
function $c5cde9743903482bb7abecafb119431a$var$ProgressBarBase(props, ref) {
  let {
    value = 0,
    minValue = 0,
    maxValue = 100,
    size = 'L',
    label,
    barClassName,
    showValueLabel = !!label,
    labelPosition = 'top',
    isIndeterminate = false,
    barProps,
    labelProps,
    'aria-label': ariaLabel,
    'aria-labelledby': ariaLabelledby
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["value", "minValue", "maxValue", "size", "label", "barClassName", "showValueLabel", "labelPosition", "isIndeterminate", "barProps", "labelProps", "aria-label", "aria-labelledby"]);

  let domRef = useDOMRef(ref);
  let {
    styleProps
  } = useStyleProps(otherProps);
  value = clamp(value, minValue, maxValue);
  let barStyle = {};

  if (!isIndeterminate) {
    let percentage = (value - minValue) / (maxValue - minValue);
    barStyle.width = Math.round(percentage * 100) + "%";
  } // Ideally this should be in useProgressBar, but children
  // are not supported in ProgressCircle which shares that hook...


  if (!label && !ariaLabel && !ariaLabelledby) {
    console.warn('If you do not provide a visible label via children, you must specify an aria-label or aria-labelledby attribute for accessibility');
  }

  return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, styleProps, barProps, {
    ref: domRef,
    className: classNames($eae5301468e7259fd99d852e67771$$interop$default, 'spectrum-BarLoader', {
      'spectrum-BarLoader--small': size === 'S',
      'spectrum-BarLoader--large': size === 'L',
      'spectrum-BarLoader--indeterminate': isIndeterminate,
      'spectrum-BarLoader--sideLabel': labelPosition === 'side'
    }, barClassName, styleProps.className)
  }), label && /*#__PURE__*/_react.createElement("span", _babelRuntimeHelpersEsmExtends({}, labelProps, {
    className: classNames($eae5301468e7259fd99d852e67771$$interop$default, 'spectrum-BarLoader-label')
  }), label), showValueLabel && /*#__PURE__*/_react.createElement("div", {
    className: classNames($eae5301468e7259fd99d852e67771$$interop$default, 'spectrum-BarLoader-percentage')
  }, barProps['aria-valuetext']), /*#__PURE__*/_react.createElement("div", {
    className: classNames($eae5301468e7259fd99d852e67771$$interop$default, 'spectrum-BarLoader-track')
  }, /*#__PURE__*/_react.createElement("div", {
    className: classNames($eae5301468e7259fd99d852e67771$$interop$default, 'spectrum-BarLoader-fill'),
    style: barStyle
  })));
}

export let ProgressBarBase = _react.forwardRef($c5cde9743903482bb7abecafb119431a$var$ProgressBarBase);

function $f18373465a3261d8a2c5beeda930081$var$ProgressBar(props, ref) {
  let {
    variant
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["variant"]);

  const {
    progressBarProps,
    labelProps
  } = useProgressBar(props);
  return /*#__PURE__*/_react.createElement(ProgressBarBase, _babelRuntimeHelpersEsmExtends({}, otherProps, {
    ref: ref,
    barProps: progressBarProps,
    labelProps: labelProps,
    barClassName: classNames($eae5301468e7259fd99d852e67771$$interop$default, {
      'spectrum-BarLoader--overBackground': variant === 'overBackground'
    })
  }));
}
/**
 * ProgressBars show the progression of a system operation: downloading, uploading, processing, etc., in a visual way.
 * They can represent either determinate or indeterminate progress.
 */


export let ProgressBar = _react.forwardRef($f18373465a3261d8a2c5beeda930081$var$ProgressBar);
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/circleloader/vars.css
var $ac0b16ab45b43a13bd626652200d2$exports = {};
$ac0b16ab45b43a13bd626652200d2$exports = {
  "spectrum-CircleLoader--indeterminate-fill-submask-2": "_spectrum-CircleLoader--indeterminate-fill-submask-2_40b43",
  "spectrum-fill-mask-2": "_spectrum-fill-mask-2_40b43",
  "spectrum-CircleLoader": "_spectrum-CircleLoader_40b43",
  "spectrum-CircleLoader-track": "_spectrum-CircleLoader-track_40b43",
  "spectrum-CircleLoader-fills": "_spectrum-CircleLoader-fills_40b43",
  "spectrum-CircleLoader-fill": "_spectrum-CircleLoader-fill_40b43",
  "spectrum-CircleLoader-fillMask1": "_spectrum-CircleLoader-fillMask1_40b43",
  "spectrum-CircleLoader-fillMask2": "_spectrum-CircleLoader-fillMask2_40b43",
  "spectrum-CircleLoader-fillSubMask1": "_spectrum-CircleLoader-fillSubMask1_40b43",
  "spectrum-CircleLoader-fillSubMask2": "_spectrum-CircleLoader-fillSubMask2_40b43",
  "spectrum-CircleLoader--small": "_spectrum-CircleLoader--small_40b43",
  "spectrum-CircleLoader--large": "_spectrum-CircleLoader--large_40b43",
  "spectrum-CircleLoader--indeterminate": "_spectrum-CircleLoader--indeterminate_40b43",
  "spectrum-fills-rotate": "_spectrum-fills-rotate_40b43",
  "spectrum-fill-mask-1": "_spectrum-fill-mask-1_40b43",
  "spectrum-CircleLoader--overBackground": "_spectrum-CircleLoader--overBackground_40b43"
};
var $ac0b16ab45b43a13bd626652200d2$$interop$default = $parcel$interopDefault($ac0b16ab45b43a13bd626652200d2$exports);

function $e712ab91a3ca4a742ab6443c53b96b8$var$ProgressCircle(props, ref) {
  let {
    value = 0,
    minValue = 0,
    maxValue = 100,
    size = 'M',
    variant,
    isIndeterminate = false,
    'aria-label': ariaLabel,
    'aria-labelledby': ariaLabelledby
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["value", "minValue", "maxValue", "size", "variant", "isIndeterminate", "aria-label", "aria-labelledby"]);

  let domRef = useDOMRef(ref);
  let {
    styleProps
  } = useStyleProps(otherProps);
  value = clamp(value, minValue, maxValue);
  let {
    progressBarProps
  } = useProgressBar(_babelRuntimeHelpersEsmExtends({}, props, {
    value
  }));
  let subMask1Style = {};
  let subMask2Style = {};

  if (!isIndeterminate) {
    let percentage = (value - minValue) / (maxValue - minValue) * 100;
    let angle;

    if (percentage > 0 && percentage <= 50) {
      angle = -180 + percentage / 50 * 180;
      subMask1Style.transform = "rotate(" + angle + "deg)";
      subMask2Style.transform = 'rotate(-180deg)';
    } else if (percentage > 50) {
      angle = -180 + (percentage - 50) / 50 * 180;
      subMask1Style.transform = 'rotate(0deg)';
      subMask2Style.transform = "rotate(" + angle + "deg)";
    }
  }

  if (!ariaLabel && !ariaLabelledby) {
    console.warn('ProgressCircle requires an aria-label or aria-labelledby attribute for accessibility');
  }

  return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, styleProps, progressBarProps, {
    ref: domRef,
    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader', {
      'spectrum-CircleLoader--indeterminate': isIndeterminate,
      'spectrum-CircleLoader--small': size === 'S',
      'spectrum-CircleLoader--large': size === 'L',
      'spectrum-CircleLoader--overBackground': variant === 'overBackground'
    }, styleProps.className)
  }), /*#__PURE__*/_react.createElement("div", {
    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-track')
  }), /*#__PURE__*/_react.createElement("div", {
    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fills')
  }, /*#__PURE__*/_react.createElement("div", {
    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fillMask1')
  }, /*#__PURE__*/_react.createElement("div", {
    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fillSubMask1'),
    style: subMask1Style
  }, /*#__PURE__*/_react.createElement("div", {
    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fill')
  }))), /*#__PURE__*/_react.createElement("div", {
    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fillMask2')
  }, /*#__PURE__*/_react.createElement("div", {
    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fillSubMask2'),
    style: subMask2Style
  }, /*#__PURE__*/_react.createElement("div", {
    className: classNames($ac0b16ab45b43a13bd626652200d2$$interop$default, 'spectrum-CircleLoader-fill')
  })))));
}
/**
 * ProgressCircles show the progression of a system operation such as downloading, uploading, processing, etc. in a visual way.
 * They can represent determinate or indeterminate progress.
 */


export let ProgressCircle = _react.forwardRef($e712ab91a3ca4a742ab6443c53b96b8$var$ProgressCircle);
//# sourceMappingURL=module.js.map
