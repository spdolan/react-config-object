{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@adobe/spectrum-css-temp/components/barloader/vars.css","./packages/@react-spectrum/progress/src/ProgressBarBase.tsx","./packages/@react-spectrum/progress/src/ProgressBar.tsx","./node_modules/@adobe/spectrum-css-temp/components/circleloader/vars.css","./packages/@react-spectrum/progress/src/ProgressCircle.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp} from '@react-aria/utils';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {ProgressBarProps} from '@react-types/progress';\nimport React, {CSSProperties, HTMLAttributes} from 'react';\nimport {SpectrumProgressBarBaseProps} from '@react-types/progress';\nimport styles from '@adobe/spectrum-css-temp/components/barloader/vars.css';\n\ninterface ProgressBarBaseProps extends SpectrumProgressBarBaseProps, ProgressBarProps {\n  barClassName?: string,\n  barProps?: HTMLAttributes<HTMLDivElement>,\n  labelProps?: HTMLAttributes<HTMLLabelElement>\n}\n\n// Base ProgressBar component shared with Meter.\nfunction ProgressBarBase(props: ProgressBarBaseProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    size = 'L',\n    label,\n    barClassName,\n    showValueLabel = !!label,\n    labelPosition = 'top',\n    isIndeterminate = false,\n    barProps,\n    labelProps,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    ...otherProps\n  } = props;\n  let domRef = useDOMRef(ref);\n  let {styleProps} = useStyleProps(otherProps);\n\n  value = clamp(value, minValue, maxValue);\n\n  let barStyle: CSSProperties = {};\n  if (!isIndeterminate) {\n    let percentage = (value - minValue) / (maxValue - minValue);\n    barStyle.width = `${Math.round(percentage * 100)}%`;\n  }\n\n  // Ideally this should be in useProgressBar, but children\n  // are not supported in ProgressCircle which shares that hook...\n  if (!label && !ariaLabel && !ariaLabelledby) {\n    console.warn('If you do not provide a visible label via children, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  return (\n    <div\n      {...styleProps}\n      {...barProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-BarLoader',\n          {\n            'spectrum-BarLoader--small': size === 'S',\n            'spectrum-BarLoader--large': size === 'L',\n            'spectrum-BarLoader--indeterminate': isIndeterminate,\n            'spectrum-BarLoader--sideLabel': labelPosition === 'side'\n          },\n          barClassName,\n          styleProps.className\n        )\n      }>\n      {label &&\n        <span\n          {...labelProps}\n          className={classNames(styles, 'spectrum-BarLoader-label')}>\n            {label}\n        </span>\n      }\n      {showValueLabel &&\n        <div className={classNames(styles, 'spectrum-BarLoader-percentage')}>\n          {barProps['aria-valuetext']}\n        </div>\n      }\n      <div className={classNames(styles, 'spectrum-BarLoader-track')}>\n        <div\n          className={classNames(styles, 'spectrum-BarLoader-fill')}\n          style={barStyle} />\n      </div>\n    </div>\n  );\n}\n\nlet _ProgressBarBase = React.forwardRef(ProgressBarBase);\nexport {_ProgressBarBase as ProgressBarBase};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {ProgressBarBase} from './ProgressBarBase';\nimport React from 'react';\nimport {SpectrumProgressBarProps} from '@react-types/progress';\nimport styles from '@adobe/spectrum-css-temp/components/barloader/vars.css';\nimport {useProgressBar} from '@react-aria/progress';\n\nfunction ProgressBar(props: SpectrumProgressBarProps, ref: DOMRef<HTMLDivElement>) {\n  let {variant, ...otherProps} = props;\n  const {\n    progressBarProps,\n    labelProps\n  } = useProgressBar(props);\n\n  return (\n    <ProgressBarBase\n      {...otherProps}\n      ref={ref}\n      barProps={progressBarProps}\n      labelProps={labelProps}\n      barClassName={\n        classNames(\n          styles,\n          {\n            'spectrum-BarLoader--overBackground': variant === 'overBackground'\n          }\n        )\n      } />\n  );\n}\n\n/**\n * ProgressBars show the progression of a system operation: downloading, uploading, processing, etc., in a visual way.\n * They can represent either determinate or indeterminate progress.\n */\nlet _ProgressBar = React.forwardRef(ProgressBar);\nexport {_ProgressBar as ProgressBar};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp} from '@react-aria/utils';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport React, {CSSProperties} from 'react';\nimport {SpectrumProgressCircleProps} from '@react-types/progress';\nimport styles from '@adobe/spectrum-css-temp/components/circleloader/vars.css';\nimport {useProgressBar} from '@react-aria/progress';\n\nfunction ProgressCircle(props: SpectrumProgressCircleProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    size = 'M',\n    variant,\n    isIndeterminate = false,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    ...otherProps\n  } = props;\n  let domRef = useDOMRef(ref);\n  let {styleProps} = useStyleProps(otherProps);\n\n  value = clamp(value, minValue, maxValue);\n  let {progressBarProps} = useProgressBar({...props, value});\n\n  let subMask1Style: CSSProperties = {};\n  let subMask2Style: CSSProperties = {};\n  if (!isIndeterminate) {\n    let percentage = (value - minValue) / (maxValue - minValue) * 100;\n    let angle;\n    if (percentage > 0 && percentage <= 50) {\n      angle = -180 + (percentage / 50 * 180);\n      subMask1Style.transform = `rotate(${angle}deg)`;\n      subMask2Style.transform = 'rotate(-180deg)';\n    } else if (percentage > 50) {\n      angle = -180 + (percentage - 50) / 50 * 180;\n      subMask1Style.transform = 'rotate(0deg)';\n      subMask2Style.transform = `rotate(${angle}deg)`;\n    }\n  }\n\n  if (!ariaLabel && !ariaLabelledby) {\n    console.warn('ProgressCircle requires an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  return (\n    <div\n      {...styleProps}\n      {...progressBarProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-CircleLoader',\n          {\n            'spectrum-CircleLoader--indeterminate': isIndeterminate,\n            'spectrum-CircleLoader--small': size === 'S',\n            'spectrum-CircleLoader--large': size === 'L',\n            'spectrum-CircleLoader--overBackground': variant === 'overBackground'\n          },\n          styleProps.className\n        )\n      }>\n      <div className={classNames(styles, 'spectrum-CircleLoader-track')} />\n      <div className={classNames(styles, 'spectrum-CircleLoader-fills')} >\n        <div className={classNames(styles, 'spectrum-CircleLoader-fillMask1')} >\n          <div\n            className={classNames(styles, 'spectrum-CircleLoader-fillSubMask1')}\n            data-testid=\"fillSubMask1\"\n            style={subMask1Style}>\n            <div className={classNames(styles, 'spectrum-CircleLoader-fill')} />\n          </div>\n        </div>\n        <div className={classNames(styles, 'spectrum-CircleLoader-fillMask2')} >\n          <div\n            className={classNames(styles, 'spectrum-CircleLoader-fillSubMask2')}\n            data-testid=\"fillSubMask2\"\n            style={subMask2Style} >\n            <div className={classNames(styles, 'spectrum-CircleLoader-fill')} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * ProgressCircles show the progression of a system operation such as downloading, uploading, processing, etc. in a visual way.\n * They can represent determinate or indeterminate progress.\n */\nlet _ProgressCircle = React.forwardRef(ProgressCircle);\nexport {_ProgressCircle as ProgressCircle};\n"],"names":["$parcel$interopDefault","a","__esModule","default","ProgressBarBase","props","ref","value","minValue","maxValue","size","label","barClassName","showValueLabel","labelPosition","isIndeterminate","barProps","labelProps","ariaLabel","ariaLabelledby","otherProps","domRef","useDOMRef","styleProps","useStyleProps","clamp","barStyle","percentage","width","Math","round","console","warn","classNames","className","_ProgressBarBase","React","forwardRef","ProgressBar","variant","progressBarProps","useProgressBar","_ProgressBar","ProgressCircle","subMask1Style","subMask2Style","angle","transform","_ProgressCircle"],"version":3,"file":"main.js.map"}