import { AriaLabelingProps, DOMProps, FocusStrategy, StyleProps } from "@react-types/shared";
import { ListLayout } from "@react-stately/layout";
import { ListState } from "@react-stately/list";
import React, { HTMLAttributes } from "react";
import { SpectrumListBoxProps } from "@react-types/listbox";
interface ListBoxBaseProps<T> extends DOMProps, AriaLabelingProps, StyleProps {
    layout: ListLayout<T>;
    state: ListState<T>;
    autoFocus?: boolean | FocusStrategy;
    shouldFocusWrap?: boolean;
    shouldSelectOnPressUp?: boolean;
    focusOnPointerEnter?: boolean;
    domProps?: HTMLAttributes<HTMLElement>;
    disallowEmptySelection?: boolean;
    isLoading?: boolean;
    onLoadMore?: () => void;
}
/** @private */
export function useListBoxLayout<T>(state: ListState<T>): ListLayout<T>;
export const ListBoxBase: <T>(props: ListBoxBaseProps<T> & {
    ref?: React.RefObject<HTMLDivElement>;
}) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
/**
 * A list of options that can allow selection of one or more.
 */
export const ListBox: <T>(props: SpectrumListBoxProps<T> & {
    ref?: React.Ref<import("@react-types/shared").DOMRefValue<HTMLDivElement>>;
}) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
export { Item, Section } from '@react-stately/collections';

//# sourceMappingURL=types.d.ts.map
