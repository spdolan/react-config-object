{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,sBAAT,CAAgCC,CAAhC,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAACC,UAAP,GAAoBD,CAAC,CAACE,OAAtB,GAAgCF,CAAvC;AACD;;;;ACFD,2CAAiB;AACf,iCAA+B,oCADhB;AAEf,yCAAuC,4CAFxB;AAGf,6CAA2C,gDAH5B;AAIf,sCAAoC;AAJrB,CAAjB;;;ACoBA,SAASG,uDAAT,CAA4BC,KAA5B,EAAoEC,GAApE,EAAiG;AAC/F,MAAI;AACFC,IAAAA;AADE,MAGAF,KAHJ;AAAA,MAEKG,UAFL,oDAGIH,KAHJ;;AAKA,MAAI;AAACI,IAAAA;AAAD,MAAeC,aAAa,CAACF,UAAD,CAAhC;AACA,MAAIG,gBAAgB,GAAGC,UAAU,oDAAS,qCAAT,CAAjC;AACA,MAAIC,gBAAgB,GAAGD,UAAU,oDAAS,yCAAT,CAAjC;AAEA,MAAIE,KAAK,GAAG;AACVC,IAAAA,OAAO,EAAE;AAACC,MAAAA,gBAAgB,EAAEL;AAAnB,KADC;AAEVM,IAAAA,OAAO,EAAE;AAACD,MAAAA,gBAAgB,EAAEH;AAAnB;AAFC,GAAZ;AAKA,sBACE,qBAAC,IAAD,kCACMK,cAAc,CAACV,UAAD,CADpB;AAEE,IAAA,YAAY,EAAEC,UAAU,CAACU,KAF3B;AAGE,IAAA,QAAQ,EAAEV,UAAU,CAACW,MAHvB;AAIE,IAAA,gBAAgB,EAAER,UAAU,oDAE1B,6BAF0B,EAG1BH,UAAU,CAACY,SAHe,CAJ9B;AASE,IAAA,GAAG,EAAEf;AATP,mBAUE,qBAAC,YAAD;AAAc,IAAA,KAAK,EAAEQ;AAArB,KACGP,QADH,CAVF,CADF;AAgBD;AAED;;;;;;AAIA,IAAIe,kBAAmB,GAAGC,UAAU,CAACnB,uDAAD,CAApC","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@adobe/spectrum-css-temp/components/illustratedmessage/vars.css","./packages/@react-spectrum/illustratedmessage/src/IllustratedMessage.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {Flex} from '@react-spectrum/layout';\nimport React, {forwardRef} from 'react';\nimport {SpectrumIllustratedMessageProps} from '@react-types/illustratedmessage';\nimport styles from '@adobe/spectrum-css-temp/components/illustratedmessage/vars.css';\n\nfunction IllustratedMessage(props: SpectrumIllustratedMessageProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    children,\n    ...otherProps\n  } = props;\n\n  let {styleProps} = useStyleProps(otherProps);\n  let headingClassName = classNames(styles, 'spectrum-IllustratedMessage-heading');\n  let contentClassName = classNames(styles, 'spectrum-IllustratedMessage-description');\n\n  let slots = {\n    heading: {UNSAFE_className: headingClassName},\n    content: {UNSAFE_className: contentClassName}\n  };\n\n  return (\n    <Flex\n      {...filterDOMProps(otherProps)}\n      UNSAFE_style={styleProps.style}\n      isHidden={styleProps.hidden}\n      UNSAFE_className={classNames(\n        styles,\n        'spectrum-IllustratedMessage',\n        styleProps.className\n      )}\n      ref={ref}>\n      <SlotProvider slots={slots}>\n        {children}\n      </SlotProvider>\n    </Flex>\n  );\n}\n\n/**\n * An IllustratedMessage displays an illustration and a message, usually\n * for an empty state or an error page.\n */\nlet _IllustratedMessage = forwardRef(IllustratedMessage);\nexport {_IllustratedMessage as IllustratedMessage};\n"],"names":["$parcel$interopDefault","a","__esModule","default","IllustratedMessage","props","ref","children","otherProps","styleProps","useStyleProps","headingClassName","classNames","contentClassName","slots","heading","UNSAFE_className","content","filterDOMProps","style","hidden","className","_IllustratedMessage","forwardRef"],"version":3,"file":"main.js.map"}