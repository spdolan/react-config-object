import { shouldKeepSpectrumClassNames, useDOMRef, useStyleProps, useMediaQuery } from "@react-spectrum/utils";
import _react, { useContext, useEffect, useRef } from "react";
import { ModalProvider, useModalProvider } from "@react-aria/overlays";
import { I18nProvider, useLocale } from "@react-aria/i18n";
import { filterDOMProps } from "@react-aria/utils";
import _classnames from "classnames";
import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import "./main.css";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/page/vars.css
var $b25d8b701135d8d7a7615286f4137155$exports = {};
$b25d8b701135d8d7a7615286f4137155$exports = {
  "spectrum": "_spectrum_d43d2"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/typography/index.css
var $af89659787f3bb83d548267e89d8c4e$exports = {};
$af89659787f3bb83d548267e89d8c4e$exports = {
  "spectrum": "_spectrum_60105",
  "spectrum-Body": "_spectrum-Body_60105",
  "spectrum-Body--italic": "_spectrum-Body--italic_60105"
};

function $c51f12b1e2e192b6909c7f3967b7e077$export$useColorScheme(theme, defaultColorScheme) {
  let matchesDark = useMediaQuery('(prefers-color-scheme: dark)');
  let matchesLight = useMediaQuery('(prefers-color-scheme: light)'); // importance OS > default > omitted

  if (theme.dark && matchesDark) {
    return 'dark';
  }

  if (theme.light && matchesLight) {
    return 'light';
  }

  if (theme.dark && defaultColorScheme === 'dark') {
    return 'dark';
  }

  if (theme.light && defaultColorScheme === 'light') {
    return 'light';
  }

  if (!theme.dark) {
    return 'light';
  }

  if (!theme.light) {
    return 'dark';
  }

  return 'light';
}

function $c51f12b1e2e192b6909c7f3967b7e077$export$useScale(theme) {
  let matchesFine = useMediaQuery('(any-pointer: fine)');

  if (matchesFine && theme.medium) {
    return 'medium';
  }

  if (theme.large) {
    return 'large';
  }

  return 'medium';
}

// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/provider/package.json
var $e44261d82f8bb46fa32302e6282353ef$exports = {};
$e44261d82f8bb46fa32302e6282353ef$exports = JSON.parse("{\"name\":\"@react-spectrum/provider\",\"version\":\"3.0.2\",\"description\":\"Spectrum UI components in React\",\"license\":\"Apache-2.0\",\"main\":\"dist/main.js\",\"module\":\"dist/module.js\",\"types\":\"dist/types.d.ts\",\"source\":\"src/index.ts\",\"files\":[\"dist\",\"src\"],\"sideEffects\":[\"*.css\"],\"targets\":{\"main\":{\"includeNodeModules\":[\"@adobe/spectrum-css-temp\"]},\"module\":{\"includeNodeModules\":[\"@adobe/spectrum-css-temp\"]}},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/adobe/react-spectrum\"},\"dependencies\":{\"@babel/runtime\":\"^7.6.2\",\"@react-aria/i18n\":\"^3.0.2\",\"@react-aria/overlays\":\"^3.0.2\",\"@react-aria/utils\":\"^3.0.2\",\"@react-spectrum/utils\":\"^3.0.2\",\"@react-types/provider\":\"^3.0.2\",\"@react-types/shared\":\"^3.0.2\",\"classnames\":\"^2.2.5\"},\"devDependencies\":{\"@adobe/spectrum-css-temp\":\"^3.0.0-alpha.1\"},\"peerDependencies\":{\"react\":\"^16.8.0\"},\"publishConfig\":{\"access\":\"public\"}}");

const $bc3300334f45fd1ec62a173e70ad86$var$Context = _react.createContext(null);

function $bc3300334f45fd1ec62a173e70ad86$var$Provider(props, ref) {
  let prevContext = useProvider();
  let prevColorScheme = prevContext && prevContext.colorScheme;
  let {
    theme = prevContext && prevContext.theme,
    defaultColorScheme
  } = props; // Hooks must always be called.

  let autoColorScheme = $c51f12b1e2e192b6909c7f3967b7e077$export$useColorScheme(theme, defaultColorScheme);
  let autoScale = $c51f12b1e2e192b6909c7f3967b7e077$export$useScale(theme);
  let {
    locale: prevLocale
  } = useLocale(); // if the new theme doesn't support the prevColorScheme, we must resort to the auto

  let usePrevColorScheme = !!theme[prevColorScheme]; // importance of color scheme props > parent > auto:(OS > default > omitted)

  let {
    colorScheme = usePrevColorScheme ? prevColorScheme : autoColorScheme,
    scale = prevContext ? prevContext.scale : autoScale,
    locale = prevContext ? prevLocale : null,
    children,
    isQuiet,
    isEmphasized,
    isDisabled,
    isRequired,
    isReadOnly,
    validationState
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["colorScheme", "scale", "locale", "children", "isQuiet", "isEmphasized", "isDisabled", "isRequired", "isReadOnly", "validationState"]); // select only the props with values so undefined props don't overwrite prevContext values


  let currentProps = {
    version: $e44261d82f8bb46fa32302e6282353ef$exports.version,
    theme,
    colorScheme,
    scale,
    isQuiet,
    isEmphasized,
    isDisabled,
    isRequired,
    isReadOnly,
    validationState
  };
  let filteredProps = {};
  Object.entries(currentProps).forEach((_ref) => {
    let [key, value] = _ref;
    return value !== undefined && (filteredProps[key] = value);
  }); // Merge options with parent provider

  let context = Object.assign({}, prevContext, filteredProps); // Only wrap in a DOM node if the theme, colorScheme, or scale changed

  let contents = children;
  let domProps = filterDOMProps(otherProps);
  let {
    styleProps
  } = useStyleProps(otherProps);

  if (!prevContext || props.locale || theme !== prevContext.theme || colorScheme !== prevContext.colorScheme || scale !== prevContext.scale || Object.keys(domProps).length > 0 || otherProps.UNSAFE_className || Object.keys(styleProps.style).length > 0) {
    contents = /*#__PURE__*/_react.createElement($bc3300334f45fd1ec62a173e70ad86$var$ProviderWrapper, _babelRuntimeHelpersEsmExtends({}, props, {
      UNSAFE_style: _babelRuntimeHelpersEsmExtends({
        isolation: !prevContext ? 'isolate' : undefined
      }, styleProps.style),
      ref: ref
    }), contents);
  }

  return /*#__PURE__*/_react.createElement($bc3300334f45fd1ec62a173e70ad86$var$Context.Provider, {
    value: context
  }, /*#__PURE__*/_react.createElement(I18nProvider, {
    locale: locale
  }, /*#__PURE__*/_react.createElement(ModalProvider, null, contents)));
}
/**
 * Provider is the container for all React Spectrum applications.
 * It defines the theme, locale, and other application level settings,
 * and can also be used to provide common properties to a group of components.
 */


export let Provider = _react.forwardRef($bc3300334f45fd1ec62a173e70ad86$var$Provider);
var $b25d8b701135d8d7a7615286f4137155$$interop$default = $parcel$interopDefault($b25d8b701135d8d7a7615286f4137155$exports);
var $af89659787f3bb83d548267e89d8c4e$$interop$default = $parcel$interopDefault($af89659787f3bb83d548267e89d8c4e$exports);

const $bc3300334f45fd1ec62a173e70ad86$var$ProviderWrapper = _react.forwardRef(function ProviderWrapper(props, ref) {
  var _props$colorScheme;

  let {
    children
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["children"]);

  let {
    locale,
    direction
  } = useLocale();
  let {
    theme,
    colorScheme,
    scale
  } = useProvider();
  let {
    modalProviderProps
  } = useModalProvider();
  let {
    styleProps
  } = useStyleProps(otherProps);
  let domRef = useDOMRef(ref);
  let themeKey = Object.keys(theme[colorScheme])[0];
  let scaleKey = Object.keys(theme[scale])[0];

  let className = _classnames(styleProps.className, $b25d8b701135d8d7a7615286f4137155$$interop$default['spectrum'], $af89659787f3bb83d548267e89d8c4e$$interop$default['spectrum'], theme[colorScheme][themeKey], theme[scale][scaleKey], theme.global ? Object.values(theme.global) : null, {
    'react-spectrum-provider': shouldKeepSpectrumClassNames,
    spectrum: shouldKeepSpectrumClassNames,
    [themeKey]: shouldKeepSpectrumClassNames,
    [scaleKey]: shouldKeepSpectrumClassNames
  });

  let style = _babelRuntimeHelpersEsmExtends({}, styleProps.style, {
    // This ensures that browser native UI like scrollbars are rendered in the right color scheme.
    // See https://web.dev/color-scheme/.
    colorScheme: (_props$colorScheme = props.colorScheme) != null ? _props$colorScheme : Object.keys(theme).filter(k => k === 'light' || k === 'dark').join(' ')
  });

  let hasWarned = useRef(false);
  useEffect(() => {
    if (direction && domRef.current) {
      let closestDir = domRef.current.parentElement.closest('[dir]');
      let dir = closestDir && closestDir.getAttribute('dir');

      if (dir && dir !== direction && !hasWarned.current) {
        console.warn("Language directions cannot be nested. " + direction + " inside " + dir + ".");
        hasWarned.current = true;
      }
    }
  }, [direction, domRef, hasWarned]);
  return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, filterDOMProps(otherProps), styleProps, modalProviderProps, {
    className: className,
    style: style,
    lang: locale,
    dir: direction,
    ref: domRef
  }), children);
});

export function useProvider() {
  return useContext($bc3300334f45fd1ec62a173e70ad86$var$Context);
}
export function useProviderProps(props) {
  let context = useProvider();

  if (!context) {
    return props;
  }

  return Object.assign({}, {
    isQuiet: context.isQuiet,
    isEmphasized: context.isEmphasized,
    isDisabled: context.isDisabled,
    isRequired: context.isRequired,
    isReadOnly: context.isReadOnly,
    validationState: context.validationState
  }, props);
}
//# sourceMappingURL=module.js.map
