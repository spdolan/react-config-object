import { useTreeState } from "@react-stately/tree";
import { useSeparator } from "@react-aria/separator";
import { Text } from "@react-spectrum/text";
import { mergeProps } from "@react-aria/utils";
import { Grid } from "@react-spectrum/layout";
import _spectrumIconsUiCheckmarkMedium from "@spectrum-icons/ui/CheckmarkMedium";
import { useMenuTriggerState } from "@react-stately/menu";
import { useMenuTrigger, useMenuItem, useMenuSection, useMenu } from "@react-aria/menu";
import { PressResponder, useHover } from "@react-aria/interactions";
import { Popover, Tray } from "@react-spectrum/overlays";
import _react, { useContext, forwardRef, Fragment, useRef, useEffect } from "react";
import { FocusScope, FocusRing } from "@react-aria/focus";
import { DismissButton, useOverlayPosition } from "@react-aria/overlays";
import { classNames, unwrapDOMRef, useDOMRef, useMediaQuery, useStyleProps, SlotProvider } from "@react-spectrum/utils";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import { Item, Section } from "@react-stately/collections";
export { Item, Section };
import "./main.css";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

const $e0344bf6d2697b02b94f0b49777ebba6$export$MenuContext = _react.createContext({});

function $e0344bf6d2697b02b94f0b49777ebba6$export$useMenuContext() {
  return useContext($e0344bf6d2697b02b94f0b49777ebba6$export$MenuContext);
}

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/menu/vars.css
var $a0405c35323f8fc23474b1d62cf3a$exports = {};
$a0405c35323f8fc23474b1d62cf3a$exports = {
  "spectrum-Menu-popover": "_spectrum-Menu-popover_7c360",
  "spectrum-Menu": "_spectrum-Menu_7c360",
  "spectrum-Menu-sectionHeading": "_spectrum-Menu-sectionHeading_7c360",
  "spectrum-Menu-checkmark": "_spectrum-Menu-checkmark_7c360",
  "spectrum-Menu-item": "_spectrum-Menu-item_7c360",
  "is-selected": "_is-selected_7c360",
  "spectrum-Icon": "_spectrum-Icon_7c360",
  "spectrum-Menu-itemLabel": "_spectrum-Menu-itemLabel_7c360",
  "spectrum-Menu-itemIcon": "_spectrum-Menu-itemIcon_7c360",
  "spectrum-Menu-itemLabel--wrapping": "_spectrum-Menu-itemLabel--wrapping_7c360",
  "spectrum-Menu-divider": "_spectrum-Menu-divider_7c360",
  "spectrum-Menu-itemGrid": "_spectrum-Menu-itemGrid_7c360",
  "is-selectable": "_is-selectable_7c360",
  "spectrum-Menu-end": "_spectrum-Menu-end_7c360",
  "spectrum-Menu-icon": "_spectrum-Menu-icon_7c360",
  "spectrum-Menu-description": "_spectrum-Menu-description_7c360",
  "spectrum-Menu-keyboard": "_spectrum-Menu-keyboard_7c360",
  "focus-ring": "_focus-ring_7c360",
  "is-focused": "_is-focused_7c360",
  "is-hovered": "_is-hovered_7c360",
  "is-highlighted": "_is-highlighted_7c360",
  "is-open": "_is-open_7c360",
  "is-active": "_is-active_7c360",
  "is-disabled": "_is-disabled_7c360"
};
var $a0405c35323f8fc23474b1d62cf3a$$interop$default = $parcel$interopDefault($a0405c35323f8fc23474b1d62cf3a$exports);

function $c43ae1eefde37efa8df9440181b3682e$var$MenuTrigger(props, ref) {
  let menuPopoverRef = useRef();
  let triggerRef = useRef();
  let domRef = useDOMRef(ref);
  let menuTriggerRef = domRef || triggerRef;
  let menuRef = useRef();
  let {
    children,
    align = 'start',
    shouldFlip = true,
    direction = 'bottom',
    closeOnSelect = true
  } = props;

  let [menuTrigger, menu] = _react.Children.toArray(children);

  let state = useMenuTriggerState(props);
  let {
    menuTriggerProps,
    menuProps
  } = useMenuTrigger({}, state, menuTriggerRef);
  let {
    overlayProps: positionProps,
    placement
  } = useOverlayPosition({
    targetRef: menuTriggerRef,
    overlayRef: unwrapDOMRef(menuPopoverRef),
    scrollRef: menuRef,
    placement: direction + " " + align,
    shouldFlip: shouldFlip,
    isOpen: state.isOpen
  });
  let isMobile = useMediaQuery('(max-width: 700px)');

  let menuContext = _babelRuntimeHelpersEsmExtends({}, menuProps, {
    ref: menuRef,
    onClose: state.close,
    closeOnSelect,
    autoFocus: state.focusStrategy || true,
    UNSAFE_style: {
      width: isMobile ? '100%' : undefined
    },
    UNSAFE_className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, {
      'spectrum-Menu-popover': !isMobile
    })
  });

  let contents = /*#__PURE__*/_react.createElement(FocusScope, {
    restoreFocus: true
  }, /*#__PURE__*/_react.createElement(DismissButton, {
    onDismiss: state.close
  }), menu, /*#__PURE__*/_react.createElement(DismissButton, {
    onDismiss: state.close
  })); // On small screen devices, the menu is rendered in a tray, otherwise a popover.


  let overlay;

  if (isMobile) {
    overlay = /*#__PURE__*/_react.createElement(Tray, {
      isOpen: state.isOpen,
      onClose: state.close,
      shouldCloseOnBlur: true
    }, contents);
  } else {
    overlay = /*#__PURE__*/_react.createElement(Popover, {
      isOpen: state.isOpen,
      UNSAFE_style: positionProps.style,
      ref: menuPopoverRef,
      placement: placement,
      hideArrow: true,
      onClose: state.close,
      shouldCloseOnBlur: true
    }, contents);
  }

  return /*#__PURE__*/_react.createElement(Fragment, null, /*#__PURE__*/_react.createElement(PressResponder, _babelRuntimeHelpersEsmExtends({}, menuTriggerProps, {
    ref: menuTriggerRef,
    isPressed: state.isOpen
  }), menuTrigger), /*#__PURE__*/_react.createElement($e0344bf6d2697b02b94f0b49777ebba6$export$MenuContext.Provider, {
    value: menuContext
  }, overlay));
}
/**
 * The MenuTrigger serves as a wrapper around a Menu and its associated trigger,
 * linking the Menu's open state with the trigger's press state.
 */


export let MenuTrigger = forwardRef($c43ae1eefde37efa8df9440181b3682e$var$MenuTrigger);

/** @private */
function $d728816e2ff4946eb3656e641cbfafdb$export$MenuItem(props) {
  let {
    item,
    state,
    isVirtualized,
    onAction
  } = props;
  let {
    onClose,
    closeOnSelect
  } = $e0344bf6d2697b02b94f0b49777ebba6$export$useMenuContext();
  let {
    rendered,
    key
  } = item;
  let isSelected = state.selectionManager.isSelected(key);
  let isDisabled = state.disabledKeys.has(key);
  let ref = useRef();
  let {
    menuItemProps,
    labelProps,
    descriptionProps,
    keyboardShortcutProps
  } = useMenuItem({
    isSelected,
    isDisabled,
    'aria-label': item['aria-label'],
    key,
    onClose,
    closeOnSelect,
    isVirtualized,
    onAction
  }, state, ref);
  let {
    hoverProps,
    isHovered
  } = useHover({
    isDisabled
  });
  let contents = typeof rendered === 'string' ? /*#__PURE__*/_react.createElement(Text, null, rendered) : rendered;
  return /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'focus-ring')
  }, /*#__PURE__*/_react.createElement("li", _babelRuntimeHelpersEsmExtends({}, mergeProps(menuItemProps, hoverProps), {
    ref: ref,
    className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu-item', {
      'is-disabled': isDisabled,
      'is-selected': isSelected,
      'is-selectable': state.selectionManager.selectionMode !== 'none',
      'is-hovered': isHovered
    })
  }), /*#__PURE__*/_react.createElement(Grid, {
    UNSAFE_className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu-itemGrid')
  }, /*#__PURE__*/_react.createElement(SlotProvider, {
    slots: {
      text: _babelRuntimeHelpersEsmExtends({
        UNSAFE_className: $a0405c35323f8fc23474b1d62cf3a$$interop$default['spectrum-Menu-itemLabel']
      }, labelProps),
      end: _babelRuntimeHelpersEsmExtends({
        UNSAFE_className: $a0405c35323f8fc23474b1d62cf3a$$interop$default['spectrum-Menu-end']
      }, descriptionProps),
      icon: {
        UNSAFE_className: $a0405c35323f8fc23474b1d62cf3a$$interop$default['spectrum-Menu-icon']
      },
      description: _babelRuntimeHelpersEsmExtends({
        UNSAFE_className: $a0405c35323f8fc23474b1d62cf3a$$interop$default['spectrum-Menu-description']
      }, descriptionProps),
      keyboard: _babelRuntimeHelpersEsmExtends({
        UNSAFE_className: $a0405c35323f8fc23474b1d62cf3a$$interop$default['spectrum-Menu-keyboard']
      }, keyboardShortcutProps)
    }
  }, contents, isSelected && /*#__PURE__*/_react.createElement(_spectrumIconsUiCheckmarkMedium, {
    slot: "checkmark",
    UNSAFE_className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu-checkmark')
  })))));
}

/** @private */
function $c8d8516d196f0e0f219f9d2aa36a7bbb$export$MenuSection(props) {
  let {
    item,
    state,
    onAction
  } = props;
  let {
    itemProps,
    headingProps,
    groupProps
  } = useMenuSection({
    heading: item.rendered,
    'aria-label': item['aria-label']
  });
  let {
    separatorProps
  } = useSeparator({
    elementType: 'li'
  });
  return /*#__PURE__*/_react.createElement(Fragment, null, item.key !== state.collection.getFirstKey() && /*#__PURE__*/_react.createElement("li", _babelRuntimeHelpersEsmExtends({}, separatorProps, {
    className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu-divider')
  })), /*#__PURE__*/_react.createElement("li", itemProps, item.rendered && /*#__PURE__*/_react.createElement("span", _babelRuntimeHelpersEsmExtends({}, headingProps, {
    className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu-sectionHeading')
  }), item.rendered), /*#__PURE__*/_react.createElement("ul", _babelRuntimeHelpersEsmExtends({}, groupProps, {
    className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu')
  }), [...item.childNodes].map(node => {
    let item = /*#__PURE__*/_react.createElement($d728816e2ff4946eb3656e641cbfafdb$export$MenuItem, {
      key: node.key,
      item: node,
      state: state,
      onAction: onAction
    });

    if (node.wrapper) {
      item = node.wrapper(item);
    }

    return item;
  }))));
}

function $b8289691bd5f1d9f865a222ff9ba3a$var$Menu(props, ref) {
  let contextProps = useContext($e0344bf6d2697b02b94f0b49777ebba6$export$MenuContext);

  let completeProps = _babelRuntimeHelpersEsmExtends({}, mergeProps(contextProps, props));

  let domRef = useDOMRef(ref);
  let state = useTreeState(completeProps);
  let {
    menuProps
  } = useMenu(completeProps, state, domRef);
  let {
    styleProps
  } = useStyleProps(completeProps); // Sync ref from <MenuTrigger> context with DOM ref.

  useEffect(() => {
    if (contextProps && contextProps.ref) {
      contextProps.ref.current = domRef.current;
      return () => {
        contextProps.ref.current = null;
      };
    }
  }, [contextProps, domRef]);
  return /*#__PURE__*/_react.createElement("ul", _babelRuntimeHelpersEsmExtends({}, menuProps, styleProps, {
    ref: domRef,
    className: classNames($a0405c35323f8fc23474b1d62cf3a$$interop$default, 'spectrum-Menu', styleProps.className)
  }), [...state.collection].map(item => {
    if (item.type === 'section') {
      return /*#__PURE__*/_react.createElement($c8d8516d196f0e0f219f9d2aa36a7bbb$export$MenuSection, {
        key: item.key,
        item: item,
        state: state,
        onAction: completeProps.onAction
      });
    }

    let menuItem = /*#__PURE__*/_react.createElement($d728816e2ff4946eb3656e641cbfafdb$export$MenuItem, {
      key: item.key,
      item: item,
      state: state,
      onAction: completeProps.onAction
    });

    if (item.wrapper) {
      menuItem = item.wrapper(menuItem);
    }

    return menuItem;
  }));
}
/**
 * Menus display a list of actions or options that a user can choose.
 */
// forwardRef doesn't support generic parameters, so cast the result to the correct type
// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref


export const Menu = _react.forwardRef($b8289691bd5f1d9f865a222ff9ba3a$var$Menu);
//# sourceMappingURL=module.js.map
