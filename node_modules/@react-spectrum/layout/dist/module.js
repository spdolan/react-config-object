import _react, { forwardRef } from "react";
import { filterDOMProps } from "@react-aria/utils";
import { baseStyleProps, dimensionValue, passthroughStyle, useDOMRef, useStyleProps, classNames } from "@react-spectrum/utils";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import "./main.css";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

const $b23dc17afddee903803cb9d0132e8399$var$gridStyleProps = _babelRuntimeHelpersEsmExtends({}, baseStyleProps, {
  autoFlow: ['gridAutoFlow', passthroughStyle],
  autoColumns: ['gridAutoColumns', $b23dc17afddee903803cb9d0132e8399$var$gridDimensionValue],
  autoRows: ['gridAutoRows', $b23dc17afddee903803cb9d0132e8399$var$gridDimensionValue],
  areas: ['gridTemplateAreas', $b23dc17afddee903803cb9d0132e8399$var$gridTemplateAreasValue],
  columns: ['gridTemplateColumns', $b23dc17afddee903803cb9d0132e8399$var$gridTemplateValue],
  rows: ['gridTemplateRows', $b23dc17afddee903803cb9d0132e8399$var$gridTemplateValue],
  gap: ['gap', dimensionValue],
  rowGap: ['rowGap', dimensionValue],
  columnGap: ['columnGap', dimensionValue],
  justifyItems: ['justifyItems', passthroughStyle],
  justifyContent: ['justifyContent', passthroughStyle],
  alignItems: ['alignItems', passthroughStyle],
  alignContent: ['alignContent', passthroughStyle]
});

function $b23dc17afddee903803cb9d0132e8399$var$Grid(props, ref) {
  let {
    children
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["children"]);

  let {
    styleProps
  } = useStyleProps(otherProps, $b23dc17afddee903803cb9d0132e8399$var$gridStyleProps);
  styleProps.style.display = 'grid'; // inline-grid?

  let domRef = useDOMRef(ref);
  return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, filterDOMProps(otherProps), styleProps, {
    ref: domRef
  }), children);
}
/**
 * Can be used to make a repeating fragment of the columns or rows list.
 * See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/repeat).
 * @param count - The number of times to repeat the fragment.
 * @param repeat - The fragment to repeat.
 */


export function repeat(count, repeat) {
  return "repeat(" + count + ", " + $b23dc17afddee903803cb9d0132e8399$var$gridTemplateValue(repeat) + ")";
}
/**
 * Defines a size range greater than or equal to min and less than or equal to max.
 * See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/minmax).
 * @param min - The minimum size.
 * @param max - The maximum size.
 */

export function minmax(min, max) {
  return "minmax(" + $b23dc17afddee903803cb9d0132e8399$var$gridDimensionValue(min) + ", " + $b23dc17afddee903803cb9d0132e8399$var$gridDimensionValue(max) + ")";
}
/**
 * Clamps a given size to an available size.
 * See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/fit-content).
 * @param dimension - The size to clamp.
 */

export function fitContent(dimension) {
  return "fit-content(" + $b23dc17afddee903803cb9d0132e8399$var$gridDimensionValue(dimension) + ")";
}

function $b23dc17afddee903803cb9d0132e8399$var$gridTemplateAreasValue(value) {
  return value.map(v => "\"" + v + "\"").join('\n');
}

function $b23dc17afddee903803cb9d0132e8399$var$gridDimensionValue(value) {
  if (/^max-content|min-content|minmax|auto|fit-content|repeat|subgrid/.test(value)) {
    return value;
  }

  return dimensionValue(value);
}

function $b23dc17afddee903803cb9d0132e8399$var$gridTemplateValue(value) {
  if (Array.isArray(value)) {
    return value.map($b23dc17afddee903803cb9d0132e8399$var$gridDimensionValue).join(' ');
  }

  return $b23dc17afddee903803cb9d0132e8399$var$gridDimensionValue(value);
}
/**
 * A layout container using CSS grid. Supports Spectrum dimensions as values to
 * ensure consistent and adaptive sizing and spacing.
 */


export const Grid = forwardRef($b23dc17afddee903803cb9d0132e8399$var$Grid);
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-spectrum/layout/src/flex.css
var $a7c7d6205bd4e7e39cda4a949682$exports = {};
$a7c7d6205bd4e7e39cda4a949682$exports = {
  "flex-container": "_flex-container_2955f",
  "-ms-flex": "_flex_2955f",
  "flex": "_flex_2955f",
  "flex-gap": "_flex-gap_2955f"
};
const $f9fee2c1db386bde8f28b36a814d1eb2$var$flexStyleProps = {
  direction: ['flexDirection', passthroughStyle],
  wrap: ['flexWrap', $f9fee2c1db386bde8f28b36a814d1eb2$var$flexWrapValue],
  justifyContent: ['justifyContent', $f9fee2c1db386bde8f28b36a814d1eb2$var$flexAlignValue],
  alignItems: ['alignItems', $f9fee2c1db386bde8f28b36a814d1eb2$var$flexAlignValue],
  alignContent: ['alignContent', $f9fee2c1db386bde8f28b36a814d1eb2$var$flexAlignValue]
};
var $a7c7d6205bd4e7e39cda4a949682$$interop$default = $parcel$interopDefault($a7c7d6205bd4e7e39cda4a949682$exports);

function $f9fee2c1db386bde8f28b36a814d1eb2$var$Flex(props, ref) {
  let {
    children
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["children"]);

  let {
    styleProps
  } = useStyleProps(otherProps);
  let {
    styleProps: flexStyle
  } = useStyleProps(otherProps, $f9fee2c1db386bde8f28b36a814d1eb2$var$flexStyleProps);
  let domRef = useDOMRef(ref); // If a gap property is specified, and there is no native support, use a shim.
  // Two divs are required for this: the outer one contains most style properties, and the inner
  // one is the flex container. Each item inside the flex container gets a margin around it based
  // on the gap, and the flex container has a negative margin to counteract this. The outer container
  // is necessary to allow nesting of flex containers with gaps, so that the inner CSS variable doesn't
  // override the outer one.

  if ((props.gap || props.rowGap || props.columnGap) && !$f9fee2c1db386bde8f28b36a814d1eb2$var$isFlexGapSupported()) {
    let style = _babelRuntimeHelpersEsmExtends({}, flexStyle.style, {
      '--column-gap': props.columnGap != null ? dimensionValue(props.columnGap) : undefined,
      '--row-gap': props.rowGap != null ? dimensionValue(props.rowGap) : undefined,
      '--gap': props.gap != null ? dimensionValue(props.gap) : undefined
    });

    return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, filterDOMProps(otherProps), styleProps, {
      className: classNames($a7c7d6205bd4e7e39cda4a949682$$interop$default, 'flex-container', styleProps.className),
      ref: domRef
    }), /*#__PURE__*/_react.createElement("div", {
      className: classNames($a7c7d6205bd4e7e39cda4a949682$$interop$default, 'flex', 'flex-gap'),
      style: style
    }, children));
  } // If no gaps, or native support exists, then we only need to render a single div.


  let style = _babelRuntimeHelpersEsmExtends({}, styleProps.style, flexStyle.style);

  if (props.gap != null) {
    style.gap = dimensionValue(props.gap);
  }

  if (props.columnGap != null) {
    style.columnGap = dimensionValue(props.columnGap);
  }

  if (props.rowGap != null) {
    style.rowGap = dimensionValue(props.rowGap);
  }

  return /*#__PURE__*/_react.createElement("div", {
    className: classNames($a7c7d6205bd4e7e39cda4a949682$$interop$default, 'flex', styleProps.className),
    style: style,
    ref: domRef
  }, children);
}
/**
 * Normalize 'start' and 'end' alignment values to 'flex-start' and 'flex-end'
 * in flex containers for browser compatibility.
 */


function $f9fee2c1db386bde8f28b36a814d1eb2$var$flexAlignValue(value) {
  if (value === 'start') {
    return 'flex-start';
  }

  if (value === 'end') {
    return 'flex-end';
  }

  return value;
}
/**
 * Takes a boolean and translates it to flex wrap or nowrap.
 */


function $f9fee2c1db386bde8f28b36a814d1eb2$var$flexWrapValue(value) {
  if (typeof value === 'boolean') {
    return value ? 'wrap' : 'nowrap';
  }

  return value;
} // Original licensing for the following method can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/Modernizr/Modernizr/blob/7efb9d0edd66815fb115fdce95fabaf019ce8db5/feature-detects/css/flexgap.js


let $f9fee2c1db386bde8f28b36a814d1eb2$var$_isFlexGapSupported = null;

function $f9fee2c1db386bde8f28b36a814d1eb2$var$isFlexGapSupported() {
  if ($f9fee2c1db386bde8f28b36a814d1eb2$var$_isFlexGapSupported != null) {
    return $f9fee2c1db386bde8f28b36a814d1eb2$var$_isFlexGapSupported;
  }

  if (typeof document === 'undefined') {
    return false;
  } // create flex container with row-gap set


  var flex = document.createElement('div');
  flex.style.display = 'flex';
  flex.style.flexDirection = 'column';
  flex.style.rowGap = '1px'; // create two, elements inside it

  flex.appendChild(document.createElement('div'));
  flex.appendChild(document.createElement('div')); // append to the DOM (needed to obtain scrollHeight)

  document.body.appendChild(flex);
  $f9fee2c1db386bde8f28b36a814d1eb2$var$_isFlexGapSupported = flex.scrollHeight === 1; // flex container should be 1px high from the row-gap

  flex.parentNode.removeChild(flex);
  return $f9fee2c1db386bde8f28b36a814d1eb2$var$_isFlexGapSupported;
}
/**
 * A layout container using flexbox. Provides Spectrum dimension values, and supports the gap
 * property to define consistent spacing between items.
 */


export const Flex = forwardRef($f9fee2c1db386bde8f28b36a814d1eb2$var$Flex);
//# sourceMappingURL=module.js.map
