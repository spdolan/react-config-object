var _spectrumIconsUiCrossSmall = $parcel$interopDefault(require("@spectrum-icons/ui/CrossSmall"));

var {
  useProviderProps
} = require("@react-spectrum/provider");

var {
  useHover
} = require("@react-aria/interactions");

var {
  useButton
} = require("@react-aria/button");

var {
  Text
} = require("@react-spectrum/text");

var _react = $parcel$interopDefault(require("react"));

var {
  mergeProps
} = require("@react-aria/utils");

var {
  FocusRing
} = require("@react-aria/focus");

var {
  classNames,
  SlotProvider,
  useFocusableRef,
  useSlotProps,
  useStyleProps
} = require("@react-spectrum/utils");

var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));

require("./main.css");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/button/vars.css
var $a9040831959d0ed42473e9713dd4b23$exports = {};
$a9040831959d0ed42473e9713dd4b23$exports = {
  "spectrum-Button": "_spectrum-Button_7a745",
  "spectrum-ActionButton": "_spectrum-ActionButton_7a745",
  "spectrum-LogicButton": "_spectrum-LogicButton_7a745",
  "spectrum-FieldButton": "_spectrum-FieldButton_7a745",
  "spectrum-ClearButton": "_spectrum-ClearButton_7a745",
  "focus-ring": "_focus-ring_7a745",
  "spectrum-Icon": "_spectrum-Icon_7a745",
  "is-hovered": "_is-hovered_7a745",
  "spectrum-Button-label": "_spectrum-Button-label_7a745",
  "spectrum-ActionButton-label": "_spectrum-ActionButton-label_7a745",
  "spectrum-ActionButton-hold": "_spectrum-ActionButton-hold_7a745",
  "spectrum-ActionButton--quiet": "_spectrum-ActionButton--quiet_7a745",
  "is-disabled": "_is-disabled_7a745",
  "is-open": "_is-open_7a745",
  "spectrum-FieldButton--quiet": "_spectrum-FieldButton--quiet_7a745",
  "spectrum-ClearButton--overBackground": "_spectrum-ClearButton--overBackground_7a745",
  "spectrum-ClearButton--small": "_spectrum-ClearButton--small_7a745",
  "is-focused": "_is-focused_7a745",
  "is-active": "_is-active_7a745",
  "spectrum-Button--cta": "_spectrum-Button--cta_7a745",
  "spectrum-Button--primary": "_spectrum-Button--primary_7a745",
  "spectrum-Button--secondary": "_spectrum-Button--secondary_7a745",
  "spectrum-Button--warning": "_spectrum-Button--warning_7a745",
  "spectrum-Button--overBackground": "_spectrum-Button--overBackground_7a745",
  "spectrum-Button--quiet": "_spectrum-Button--quiet_7a745",
  "is-selected": "_is-selected_7a745",
  "spectrum-ActionButton--emphasized": "_spectrum-ActionButton--emphasized_7a745",
  "spectrum-LogicButton--and": "_spectrum-LogicButton--and_7a745",
  "spectrum-LogicButton--or": "_spectrum-LogicButton--or_7a745",
  "is-placeholder": "_is-placeholder_7a745",
  "is-invalid": "_is-invalid_7a745"
};
// todo: CSS hasn't caught up yet, map
let $ead2ca032915257adf53f639d99d1a73$var$VARIANT_MAPPING = {
  negative: 'warning'
};
var $a9040831959d0ed42473e9713dd4b23$$interop$default = $parcel$interopDefault($a9040831959d0ed42473e9713dd4b23$exports);

function $ead2ca032915257adf53f639d99d1a73$var$Button(props, ref) {
  props = useProviderProps(props);
  props = useSlotProps(props, 'button');

  let {
    elementType: ElementType = 'button',
    children,
    variant,
    isQuiet,
    isDisabled,
    autoFocus
  } = props,
      otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, ["elementType", "children", "variant", "isQuiet", "isDisabled", "autoFocus"]);

  let domRef = useFocusableRef(ref);
  let {
    buttonProps,
    isPressed
  } = useButton(props, domRef);
  let {
    hoverProps,
    isHovered
  } = useHover({
    isDisabled
  });
  let {
    styleProps
  } = useStyleProps(otherProps);
  let buttonVariant = variant;

  if ($ead2ca032915257adf53f639d99d1a73$var$VARIANT_MAPPING[variant]) {
    buttonVariant = $ead2ca032915257adf53f639d99d1a73$var$VARIANT_MAPPING[variant];
  }

  return /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'focus-ring'),
    autoFocus: autoFocus
  }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersExtends({}, styleProps, mergeProps(buttonProps, hoverProps), {
    ref: domRef,
    className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Button', "spectrum-Button--" + buttonVariant, {
      'spectrum-Button--quiet': isQuiet,
      'is-disabled': isDisabled,
      'is-active': isPressed,
      'is-hovered': isHovered
    }, styleProps.className)
  }), /*#__PURE__*/_react.createElement(SlotProvider, {
    slots: {
      icon: {
        size: 'S',
        UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Icon')
      },
      text: {
        UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Button-label')
      }
    }
  }, typeof children === 'string' ? /*#__PURE__*/_react.createElement(Text, null, children) : children)));
}
/**
 * Buttons allow users to perform an action or to navigate to another page.
 * They have multiple styles for various needs, and are ideal for calling attention to
 * where a user needs to do something in order to move forward in a flow.
 */


let Button = _react.forwardRef($ead2ca032915257adf53f639d99d1a73$var$Button);

exports.Button = Button;

function $f3063a10f4b2c05148061fca201b$var$ActionButton(props, ref) {
  props = useProviderProps(props);

  let {
    isQuiet,
    isDisabled,
    children,
    autoFocus
  } = props,
      otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, ["isQuiet", "isDisabled", "children", "autoFocus"]);

  let domRef = useFocusableRef(ref);
  let {
    buttonProps,
    isPressed
  } = useButton(props, domRef);
  let {
    hoverProps,
    isHovered
  } = useHover({
    isDisabled
  });
  let {
    styleProps
  } = useStyleProps(otherProps);

  let isTextOnly = _react.Children.toArray(props.children).every(c => !_react.isValidElement(c));

  return /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'focus-ring'),
    autoFocus: autoFocus
  }, /*#__PURE__*/_react.createElement("button", _babelRuntimeHelpersExtends({}, styleProps, mergeProps(buttonProps, hoverProps), {
    ref: domRef,
    className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-ActionButton', {
      'spectrum-ActionButton--quiet': isQuiet,
      'is-active': isPressed,
      'is-disabled': isDisabled,
      'is-hovered': isHovered
    }, styleProps.className)
  }), /*#__PURE__*/_react.createElement(SlotProvider, {
    slots: {
      icon: {
        size: 'S',
        UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Icon')
      },
      text: {
        UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-ActionButton-label')
      }
    }
  }, typeof children === 'string' || isTextOnly ? /*#__PURE__*/_react.createElement(Text, null, children) : children)));
}
/**
 * ActionButtons allow users to perform an action or mark a selection.
 * They’re used for similar, task-based options within a workflow, and are ideal for interfaces where buttons aren’t meant to draw a lot of attention.
 */


let ActionButton = _react.forwardRef($f3063a10f4b2c05148061fca201b$var$ActionButton);

exports.ActionButton = ActionButton;

// @private
function $fee777d101ae103380e7aba8c00fbda$var$FieldButton(props, ref) {
  let {
    isQuiet,
    isDisabled,
    validationState,
    children,
    autoFocus,
    isActive
  } = props,
      otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, ["isQuiet", "isDisabled", "validationState", "children", "autoFocus", "isActive"]);

  let domRef = useFocusableRef(ref);
  let {
    buttonProps,
    isPressed
  } = useButton(props, domRef);
  let {
    hoverProps,
    isHovered
  } = useHover({
    isDisabled
  });
  let {
    styleProps
  } = useStyleProps(otherProps);
  return /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'focus-ring'),
    autoFocus: autoFocus
  }, /*#__PURE__*/_react.createElement("button", _babelRuntimeHelpersExtends({}, mergeProps(buttonProps, hoverProps), {
    ref: domRef,
    className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-FieldButton', {
      'spectrum-FieldButton--quiet': isQuiet,
      'is-active': isActive || isPressed,
      'is-disabled': isDisabled,
      'is-invalid': validationState === 'invalid',
      'is-hovered': isHovered
    }, styleProps.className)
  }), /*#__PURE__*/_react.createElement(SlotProvider, {
    slots: {
      icon: {
        size: 'S',
        UNSAFE_className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Icon')
      }
    }
  }, children)));
}

let FieldButton = _react.forwardRef($fee777d101ae103380e7aba8c00fbda$var$FieldButton);

exports.FieldButton = FieldButton;

function $c1e922c08e26f540cc0b70e2998879f7$var$LogicButton(props, ref) {
  props = useProviderProps(props);

  let {
    variant,
    children,
    isDisabled,
    autoFocus
  } = props,
      otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, ["variant", "children", "isDisabled", "autoFocus"]);

  let domRef = useFocusableRef(ref);
  let {
    buttonProps,
    isPressed
  } = useButton(props, domRef);
  let {
    hoverProps,
    isHovered
  } = useHover({
    isDisabled
  });
  let {
    styleProps
  } = useStyleProps(otherProps);
  return /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'focus-ring'),
    autoFocus: autoFocus
  }, /*#__PURE__*/_react.createElement("button", _babelRuntimeHelpersExtends({}, styleProps, mergeProps(buttonProps, hoverProps), {
    ref: domRef,
    className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-LogicButton', {
      ["spectrum-LogicButton--" + variant]: variant,
      'is-disabled': isDisabled,
      'is-active': isPressed,
      'is-hovered': isHovered
    }, styleProps.className)
  }), /*#__PURE__*/_react.createElement("span", {
    className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-Button-label')
  }, children)));
}
/**
 * A LogicButton displays an operator within a boolean logic sequence.
 */


let LogicButton = _react.forwardRef($c1e922c08e26f540cc0b70e2998879f7$var$LogicButton);

exports.LogicButton = LogicButton;

function $da329d9cf39ae507e223a144e84f29$var$ClearButton(props, ref) {
  let {
    children = /*#__PURE__*/_react.createElement(_spectrumIconsUiCrossSmall, {
      UNSAFE_className: $a9040831959d0ed42473e9713dd4b23$$interop$default['spectrum-Icon']
    }),
    focusClassName,
    variant,
    autoFocus,
    isDisabled
  } = props,
      otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, ["children", "focusClassName", "variant", "autoFocus", "isDisabled"]);

  let domRef = useFocusableRef(ref);
  let {
    buttonProps,
    isPressed
  } = useButton(props, domRef);
  let {
    hoverProps,
    isHovered
  } = useHover({
    isDisabled
  });
  let {
    styleProps
  } = useStyleProps(otherProps);
  return /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'focus-ring', focusClassName),
    autoFocus: autoFocus
  }, /*#__PURE__*/_react.createElement("button", _babelRuntimeHelpersExtends({}, styleProps, mergeProps(buttonProps, hoverProps), {
    ref: domRef,
    className: classNames($a9040831959d0ed42473e9713dd4b23$$interop$default, 'spectrum-ClearButton', {
      ["spectrum-ClearButton--" + variant]: variant,
      'is-active': isPressed,
      'is-hovered': isHovered
    }, styleProps.className)
  }), children));
}

let ClearButton = _react.forwardRef($da329d9cf39ae507e223a144e84f29$var$ClearButton);

exports.ClearButton = ClearButton;
//# sourceMappingURL=main.js.map
