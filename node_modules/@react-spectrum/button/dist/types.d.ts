import React from "react";
import { SpectrumButtonProps, SpectrumActionButtonProps, ButtonProps, SpectrumLogicButtonProps } from "@react-types/button";
import { DOMProps, StyleProps } from "@react-types/shared";
/**
 * Buttons allow users to perform an action or to navigate to another page.
 * They have multiple styles for various needs, and are ideal for calling attention to
 * where a user needs to do something in order to move forward in a flow.
 */
export let Button: React.ForwardRefExoticComponent<SpectrumButtonProps & React.RefAttributes<import("@react-types/shared").FocusableRefValue<HTMLElement, HTMLElement>>>;
/**
 * ActionButtons allow users to perform an action or mark a selection.
 * They’re used for similar, task-based options within a workflow, and are ideal for interfaces where buttons aren’t meant to draw a lot of attention.
 */
export let ActionButton: React.ForwardRefExoticComponent<SpectrumActionButtonProps & React.RefAttributes<import("@react-types/shared").FocusableRefValue<HTMLButtonElement, HTMLButtonElement>>>;
interface FieldButtonProps extends ButtonProps, DOMProps, StyleProps {
    isQuiet?: boolean;
    isActive?: boolean;
    validationState?: 'valid' | 'invalid';
}
export let FieldButton: React.ForwardRefExoticComponent<FieldButtonProps & React.RefAttributes<import("@react-types/shared").FocusableRefValue<HTMLElement, HTMLElement>>>;
/**
 * A LogicButton displays an operator within a boolean logic sequence.
 */
export let LogicButton: React.ForwardRefExoticComponent<SpectrumLogicButtonProps & React.RefAttributes<import("@react-types/shared").FocusableRefValue<HTMLButtonElement, HTMLButtonElement>>>;
interface ClearButtonProps extends ButtonProps, DOMProps, StyleProps {
    focusClassName?: string;
    variant?: 'overBackground';
}
export let ClearButton: React.ForwardRefExoticComponent<ClearButtonProps & React.RefAttributes<import("@react-types/shared").FocusableRefValue<HTMLButtonElement, HTMLButtonElement>>>;

//# sourceMappingURL=types.d.ts.map
